---
# Source: greymatter/charts/data/templates/mongo-passwords.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mongo-credentials
  labels:
    chart: "data-2.0.2"
    release: "gm"
type: Opaque
stringData:
  root_username: mongogm
  root_password: USCISMongo64
  admin_password: USCISMongoA32
  database: gmdata
---
# Source: greymatter/charts/edge/templates/edge-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: edge
  labels:
    chart: "edge-2.0.1"
    release: "gm"
type: Opaque
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdjVENDQkZtZ0F3SUJBZ0lDRUFBd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z2MweEN6QUpCZ05WQkFZVEFsVlQKTVJFd0R3WURWUVFJREFoV2FYSm5hVzVwWVRFVE1CRUdBMVVFQnd3S1FXeGxlR0Z1WkhKcFlURWtNQ0lHQTFVRQpDZ3diUkdWamFYQm9aWElnVkdWamFHNXZiRzluZVNCVGRIVmthVzl6TVJRd0VnWURWUVFMREF0RmJtZHBibVZsCmNtbHVaekV1TUN3R0ExVUVBd3dsUkdWamFYQm9aWElnUTJWeWRHbG1hV05oZEdVZ1FYVjBhRzl5YVhSNUlDaFMKYjI5MEtURXFNQ2dHQ1NxR1NJYjNEUUVKQVJZYlpXNW5hVzVsWlhKcGJtZEFaR1ZqYVhCb1pYSnViM2N1WTI5dApNQjRYRFRFM01EZ3dPVEV4TWpNd09Gb1hEVEkzTURnd056RXhNak13T0Zvd2djQXhDekFKQmdOVkJBWVRBbFZUCk1SRXdEd1lEVlFRSURBaFdhWEpuYVc1cFlURWtNQ0lHQTFVRUNnd2JSR1ZqYVhCb1pYSWdWR1ZqYUc1dmJHOW4KZVNCVGRIVmthVzl6TVJRd0VnWURWUVFMREF0RmJtZHBibVZsY21sdVp6RTJNRFFHQTFVRUF3d3RSR1ZqYVhCbwpaWElnUTJWeWRHbG1hV05oZEdVZ1FYVjBhRzl5YVhSNUlDaEpiblJsY20xbFpHbGhkR1VwTVNvd0tBWUpLb1pJCmh2Y05BUWtCRmh0bGJtZHBibVZsY21sdVowQmtaV05wY0dobGNtNXZkeTVqYjIwd2dnSWlNQTBHQ1NxR1NJYjMKRFFFQkFRVUFBNElDRHdBd2dnSUtBb0lDQVFEUGt4YWlVRDN1cVIyQUE1andBYjlnQ2pEK0JyT3JZQm9lbG5SNgp1MjlGUFQ1Y0hlTThiZlZvNnppeHk3cUMybFh6aEs1Z0gvVExXWGVscEV3VStzdzgxb1VielpsQjdaMmx2cGo4CnQ0elhnNHpnSE5QcUFGSk02TDliNzBkTGd1a2hjVU82bm5JaVBQQXBybXRCRHZYYnRCd0RDek9QYU1jQmVFd2kKekVSYTRXeVhZam41USthOExUVExRL09GbUxIRkEyZENHNzhzNmNZUU9mRjkyTDY0MVFkT2hxWFB0cStRd3FBbQpXa1E1M1BlczZySG1qVDBrQzhoRUk1ZkNLRUEzUVhZdDZZdGdYK0tJSGdPWVdJMGcyMndoOTVvaGsrRHVSTC9PCjN6eko5dENqck1QTzJseG1nMEdkcHVxamZSNks4Q0VrNFlxMmRVd1lDN2RmZmdDcld2OXppay9wWGVvU3ZUdjMKWHByTU4yV1dLQlg5bFZDMnFLRmhOWDRkcmlCRlJPMGk1K2JHZE0xZThOaWxVRHFIaWlrd2hhVngyem5iL0UvYgpMQ0N3bGhDMG9BQXhuVloxSjE4azQ2U1RlN2hsZy9ScU0vMTh1eG1oUDlhbjJGa0R0dXlaQnVnYnBXcGdrN2xFCnRwT2Q5MmlDR1lEYzZrOEpzbitwMFVpWmppb0p2L0dtMDRUM3Q5MGRrVnU3RCttd0ZJc0VBYUpqd2VwRVo3a2kKSUJheVdySm1sK0RUNGdoeWFka21zOFVhT2ErWU9ZRVppWTVHekpoRW9kQXQwMU9hblNrelIvRllqTTRTdUdYdwpScnEycDhoVHVVQkJtMXA5aXB2OERMcVBtbFhaMkNuN0J5VFg3VE1zRys3N1I0emtrYTVYRDV0VUxwQWY1eEtvCnF4NE4vUUlEQVFBQm8yWXdaREFkQmdOVkhRNEVGZ1FVYkEySTlwWlVKN1o2V3hYZlRSZWNvQ3NxZm5Vd0h3WUQKVlIwakJCZ3dGb0FVWTVVNEpiOGhDNlNzaW5oMkx6Q0IzdGx5OGJjd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQgpBREFPQmdOVkhROEJBZjhFQkFNQ0FZWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBSE10ZW5zbG5FdXZuVDRnCkpXUjcwRlp2M3dVT09xQXN5eEpkV2o0bzh5TTcvVjN3R0tNeGtSdjdPcWV0cDkyWFlhdWZmU1B4RTNJTm5HTXEKRGRSTVRmMk1HVm52L1c1UEpvdVp3TWhCWDRXNnJqdmw0UUNTbCtRK3dTdCtPaWJOdTJBeGRDZVFLYTY3Y3d2ZgpRZkQ0dWZlV2Z2VVB6YXp3enVKcUU1V0NqTm5NMktzV2JtemNscXVBYlVqS0gwMDE3VUdSWWU4VEhyQ1o1TWRuCkw5WCtaU2U1d1dIV0ltN0pMbjVuZXhlVzY2OGhnY2RJTnJLQlJnN3lnS1dyTy9hTUZubDNjUVhtYk50WEJ0K3kKRTV0b2Y2MTgvSFdKQmpDM2UrZXlJTXFqZ2pFWm14WWZ4d0JUazBYVkVadUEzUHlBR2lnQTE3UTBldjVaeDRpaQoyZkdJWU41eTNMNk9NcmZrY21kdGlob1Fpc3FkK3pLbGd4V0g0WjJLdFYwUkZWVHJlb29OYVNwRlp1NkVlQ1BICjBmZysrVFYvdUdPRWZOYzRzZUVmRmlhTTR1cThtcDVFMVBZT1hYNERMa3ppZ25xcWw5aDh1My8zWkM3bTROb1kKcXBvT3VyUXlZL2RDVUlKdzNLYitEbGNrMU9ac0dRTnZrcGZsSHZDeEN2VHE0OGJFZ2pPK3hrb1lCT0RoWTB3VApncmwxa0ZCWE1OTkFpRmlIbEhhTTZoK01Ldi85Y1JpNjNLWG1oaUVqVVdVVmNkVDlaUlJQSjZxZDVRQUpISitoCk5VN3MxN2FyNS80U2dKeDlCWlNFWXpRUUN6dDRSRXdCeGZyRi9HZEdOaWExd1pjcU1OeWxta0Q4ZkNXQlppVzIKc2Fyc0R6Vnp3dmR1TDFPREl5Y1h4ZS9wWlV4aQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlHZ2pDQ0JHcWdBd0lCQWdJSkFLQmRsUlVuWFhJSk1BMEdDU3FHU0liM0RRRUJDd1VBTUlITk1Rc3dDUVlEClZRUUdFd0pWVXpFUk1BOEdBMVVFQ0F3SVZtbHlaMmx1YVdFeEV6QVJCZ05WQkFjTUNrRnNaWGhoYm1SeWFXRXgKSkRBaUJnTlZCQW9NRzBSbFkybHdhR1Z5SUZSbFkyaHViMnh2WjNrZ1UzUjFaR2x2Y3pFVU1CSUdBMVVFQ3d3TApSVzVuYVc1bFpYSnBibWN4TGpBc0JnTlZCQU1NSlVSbFkybHdhR1Z5SUVObGNuUnBabWxqWVhSbElFRjFkR2h2CmNtbDBlU0FvVW05dmRDa3hLakFvQmdrcWhraUc5dzBCQ1FFV0cyVnVaMmx1WldWeWFXNW5RR1JsWTJsd2FHVnkKYm05M0xtTnZiVEFlRncweE56QTRNRGt4TVRJeU1UbGFGdzB5TnpBNE1EY3hNVEl5TVRsYU1JSE5NUXN3Q1FZRApWUVFHRXdKVlV6RVJNQThHQTFVRUNBd0lWbWx5WjJsdWFXRXhFekFSQmdOVkJBY01Da0ZzWlhoaGJtUnlhV0V4CkpEQWlCZ05WQkFvTUcwUmxZMmx3YUdWeUlGUmxZMmh1YjJ4dloza2dVM1IxWkdsdmN6RVVNQklHQTFVRUN3d0wKUlc1bmFXNWxaWEpwYm1jeExqQXNCZ05WQkFNTUpVUmxZMmx3YUdWeUlFTmxjblJwWm1sallYUmxJRUYxZEdodgpjbWwwZVNBb1VtOXZkQ2t4S2pBb0Jna3Foa2lHOXcwQkNRRVdHMlZ1WjJsdVpXVnlhVzVuUUdSbFkybHdhR1Z5CmJtOTNMbU52YlRDQ0FpSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBTERvMDh6UmJzc2kKdnJnSXlDaUUzeDV0dEhEY0VzT3MzRWFaYUUzaEhwWEs1YW41aVhUOC90bDM1QkRBV2wxSjZDSmttNGlwMENoNQpqT3FyazVwZVFKS3VONzMxR2xhZnpvYWJ3SGNxeUQ2Q3ZKWkFOcmU2NHMwSjJDVFpwb2IyZ1dNMDZDNzV1d3pLCjVXNEpmaXZTekJwSHU4QStGSkFSbVpwblFvRkRSSVBXUUZrOXEyMkNQSVd0bFVkcmt3VmRuSGxWKytoUktLQlUKcXdBeVhqNlVVbnJ2d1dORVIwQzB3a3NvSmYrNW9QL0hMeXF6VWNkNnlQbU9pQWU4UWhSOGpMZHQvSzhlMTRHSQo3WGhBeXRLeEkycUhxelVtaTJUNTdsSXp6ODNmRzRDbW81OW1JRjRqTHZIZmpDNDh6ejlkQ29PYkNLL1FjY3pYCmxpcHhtVG05SG9jRFdDQ28wTDAzNWFydld4UmtQOGVjNzVDRTIwUThScVVZOWpRbzRhNjRSeWRiQWFiQ3c4czAKYjBtU29IYlJ2cFpDeDk2S2hDRzdFa2pDb3JXcnZoOWR4WkFlbklaREFibjNzWDlRR2M2QStCNU1ZYnY3MFVLbwo4UkQySU9Ec3Z1Q1NubjFyRVFwR2IwZDZoTlNSZUROMmNZTG5TZXVvTVVseFQvU1JDTkJpekdPV3hKdUZMMUNyCjVZbk55VXYzdENFWEt4RU05T29SSHV0eWRtZWc4ZlRiVHU4aEFsR2lZaGdxZWhta0FwUzI1cUNsNHNWejNGVWoKL3kyeWZRYmVjbGl1L1lkUFZ6aVJHc0xPVEdoUWxkQlNJYVZkTUdBL211enhWdE9KZExCdUsvcUsvZ3ZXN04ycwp2WlFUSFp6K0IxMERseHM5UzJOaGY3Rlg3cE1MTTloWEFnTUJBQUdqWXpCaE1CMEdBMVVkRGdRV0JCUmpsVGdsCnZ5RUxwS3lLZUhZdk1JSGUyWEx4dHpBZkJnTlZIU01FR0RBV2dCUmpsVGdsdnlFTHBLeUtlSFl2TUlIZTJYTHgKdHpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUE0R0ExVWREd0VCL3dRRUF3SUJoakFOQmdrcWhraUc5dzBCQVFzRgpBQU9DQWdFQWNCNHo0QUxSWCtzMUZiMWoyc1dMbzY1akl5eG0wT0IyUlRsaHN0ZDQremQrekZqTGc3WEUwTzVqCklsbTNiYXNWbExNMm1UbWk1Q0M0bXZPQmliU2I2TmxKcjM0R21LYmZ3WVZMajN0cG5sbkEvSEdHekhZM3VvWDYKekJVU0lZUkgxMGsyYm1wTTQzOGZYdHo5UCtrSEFrbXNWajJZazh1TGcrdFpEWkVkTThxaVdiYUlaYSthd0h3TApEQmhkMWRRN1p5ZWpWSkxLR3lZd2Q3ZE1ZTHEwNEY0QXFhd1BwMmtzbWNVdGt0VTJRK3VHbUpCa3FnQnpVVEMrCjY0eVBLQmJQYTJXRkZEVnRxdDByNnFEMk43RkQ2djBiMFBpQmVydXZocFN2YTF5dkUwdk1OZmE5a2M4RXhyS3oKN0dNTUdzdjNUSU9xSzB0WVhKYXlvTSs4VkFFTHdCY0Z2a0Nrb2JzNFR0a0YzVm9QaU85MWhsbTdLKzd3b05RSApPVmh4cURxSDNFQ0E3dk5MZUEwOXhUN0VBcFh6UEd3azE2M080cW9aZFQ3VlVJMkZ1OUcwK0l6elM0MlRWWE9tCk1VcDFzRWlkVVVFbHd1dXFEdkt4c0JQNmRvOXhUOGRIZzJuOVkwNE1FMkZ5UTFvbXVMelJyY3lqVTZRbzZQTHIKSC9kaTZLVDNpaVovbGVGa0RNZjUvUGVzeTdiRXhQWk4yc0hSM1NwUjVSd1FoNTBUNEtaeDdGT3F2Q0pwaTZQcApIMWN6MDkyMXFHdEcwaWhlT3pXZm9ubXZZS25oeGNUVHBnK2Z1aVZkUFd3ZHV0alZsK0hQYzJ5ancxR2RxdzRoCm40b0ZqRzRLUU82enZaekdERmF5OUhhelp5VUtwZ2FteTI0dThYWTcvQlNXYzFjOTVHZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  ca_b64: TFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVZGpWRU5EUWtadFowRjNTVUpCWjBsRFJVRkJkMFJSV1VwTGIxcEphSFpqVGtGUlJVeENVVUYzWjJNd2VFTjZRVXBDWjA1V1FrRlpWRUZzVmxRS1RWSkZkMFIzV1VSV1VWRkpSRUZvVjJGWVNtNWhWelZ3V1ZSRlZFMUNSVWRCTVZWRlFuZDNTMUZYZUd4bFIwWjFXa2hLY0ZsVVJXdE5RMGxIUVRGVlJRcERaM2RpVWtkV2FtRllRbTlhV0VsblZrZFdhbUZITlhaaVJ6bHVaVk5DVkdSSVZtdGhWemw2VFZKUmQwVm5XVVJXVVZGTVJFRjBSbUp0WkhCaWJWWnNDbU50YkhWYWVrVjFUVU4zUjBFeFZVVkJkM2RzVWtkV2FtRllRbTlhV0VsblVUSldlV1JIYkcxaFYwNW9aRWRWWjFGWVZqQmhSemw1WVZoU05VbERhRk1LWWpJNU1FdFVSWEZOUTJkSFExTnhSMU5KWWpORVVVVktRVkpaWWxwWE5XNWhWelZzV2xoS2NHSnRaRUZhUjFacVlWaENiMXBZU25WaU0yTjFXVEk1ZEFwTlFqUllSRlJGTTAxRVozZFBWRVY0VFdwTmQwOUdiMWhFVkVrelRVUm5kMDU2UlhoTmFrMTNUMFp2ZDJkalFYaERla0ZLUW1kT1ZrSkJXVlJCYkZaVUNrMVNSWGRFZDFsRVZsRlJTVVJCYUZkaFdFcHVZVmMxY0ZsVVJXdE5RMGxIUVRGVlJVTm5kMkpTUjFacVlWaENiMXBZU1dkV1IxWnFZVWMxZG1KSE9XNEtaVk5DVkdSSVZtdGhWemw2VFZKUmQwVm5XVVJXVVZGTVJFRjBSbUp0WkhCaWJWWnNZMjFzZFZwNlJUSk5SRkZIUVRGVlJVRjNkM1JTUjFacVlWaENid3BhV0VsblVUSldlV1JIYkcxaFYwNW9aRWRWWjFGWVZqQmhSemw1WVZoU05VbERhRXBpYmxKc1kyMHhiRnBIYkdoa1IxVndUVk52ZDB0QldVcExiMXBKQ21oMlkwNUJVV3RDUm1oMGJHSnRaSEJpYlZac1kyMXNkVm93UW10YVYwNXdZMGRvYkdOdE5YWmtlVFZxWWpJd2QyZG5TV2xOUVRCSFExTnhSMU5KWWpNS1JGRkZRa0ZSVlVGQk5FbERSSGRCZDJkblNVdEJiMGxEUVZGRVVHdDRZV2xWUkROMWNWSXlRVUUxYW5kQllqbG5RMnBFSzBKeVQzSlpRbTlsYkc1U05ncDFNamxHVUZRMVkwaGxUVGhpWmxadk5ucHBlSGszY1VNeWJGaDZhRXMxWjBndlZFeFhXR1ZzY0VWM1ZTdHpkemd4YjFWaWVscHNRamRhTW14MmNHbzRDblEwZWxobk5IcG5TRTVRY1VGR1NrMDJURGxpTnpCa1RHZDFhMmhqVlU4MmJtNUphVkJRUVhCeWJYUkNSSFpZWW5SQ2QwUkRlazlRWVUxalFtVkZkMmtLZWtWU1lUUlhlVmhaYW00MVVTdGhPRXhVVkV4UkwwOUdiVXhJUmtFeVpFTkhOemh6Tm1OWlVVOW1Samt5VERZME1WRmtUMmh4V0ZCMGNTdFJkM0ZCYlFwWGExRTFNMUJsY3paeVNHMXFWREJyUXpob1JVazFaa05MUlVFelVWaFpkRFpaZEdkWUswdEpTR2RQV1ZkSk1HY3lNbmRvT1RWdmFHc3JSSFZTVEM5UENqTjZla281ZEVOcWNrMVFUekpzZUcxbk1FZGtjSFZ4YW1aU05rczRRMFZyTkZseE1tUlZkMWxETjJSbVptZERjbGQyT1hwcGF5OXdXR1Z2VTNaVWRqTUtXSEJ5VFU0eVYxZExRbGc1YkZaRE1uRkxSbWhPV0RSa2NtbENSbEpQTUdrMUsySkhaRTB4WlRoT2FXeFZSSEZJYVdscmQyaGhWbmd5ZW01aUwwVXZZZ3BNUTBOM2JHaERNRzlCUVhodVZsb3hTakU0YXpRMlUxUmxOMmhzWnk5U2NVMHZNVGgxZUcxb1VEbGhiakpHYTBSMGRYbGFRblZuWW5CWGNHZHJOMnhGQ25Sd1QyUTVNbWxEUjFsRVl6WnJPRXB6Yml0d01GVnBXbXBwYjBwMkwwZHRNRFJVTTNRNU1HUnJWblUzUkN0dGQwWkpjMFZCWVVwcWQyVndSVm8zYTJrS1NVSmhlVmR5U20xc0swUlVOR2RvZVdGa2EyMXpPRlZoVDJFcldVOVpSVnBwV1RWSGVrcG9SVzlrUVhRd01VOWhibE5yZWxJdlJsbHFUVFJUZFVkWWR3cFNjbkV5Y0Rob1ZIVlZRa0p0TVhBNWFYQjJPRVJNY1ZCdGJGaGFNa051TjBKNVZGZzNWRTF6UnlzM04xSTBlbXRyWVRWWVJEVjBWVXh3UVdZMWVFdHZDbkY0TkU0dlVVbEVRVkZCUW04eVdYZGFSRUZrUW1kT1ZraFJORVZHWjFGVllrRXlTVGx3V2xWS04xbzJWM2hZWmxSU1pXTnZRM054Wm01VmQwaDNXVVFLVmxJd2FrSkNaM2RHYjBGVldUVlZORXBpT0doRE5sTnphVzVvTWt4NlEwSXpkR3g1T0dKamQwVm5XVVJXVWpCVVFWRklMMEpCWjNkQ1owVkNMM2RKUWdwQlJFRlBRbWRPVmtoUk9FSkJaamhGUWtGTlEwRlpXWGRFVVZsS1MyOWFTV2gyWTA1QlVVVk1RbEZCUkdkblNVSkJTRTEwWlc1emJHNUZkWFp1VkRSbkNrcFhVamN3UmxwMk0zZFZUMDl4UVhONWVFcGtWMm8wYnpoNVRUY3ZWak4zUjB0TmVHdFNkamRQY1dWMGNEa3lXRmxoZFdabVUxQjRSVE5KVG01SFRYRUtSR1JTVFZSbU1rMUhWbTUyTDFjMVVFcHZkVnAzVFdoQ1dEUlhObkpxZG13MFVVTlRiQ3RSSzNkVGRDdFBhV0pPZFRKQmVHUkRaVkZMWVRZM1kzZDJaZ3BSWmtRMGRXWmxWMloyVlZCNllYcDNlblZLY1VVMVYwTnFUbTVOTWt0elYySnRlbU5zY1hWQllsVnFTMGd3TURFM1ZVZFNXV1U0VkVoeVExbzFUV1J1Q2t3NVdDdGFVMlUxZDFkSVYwbHROMHBNYmpWdVpYaGxWelkyT0doblkyUkpUbkpMUWxKbk4zbG5TMWR5VHk5aFRVWnViRE5qVVZodFlrNTBXRUowSzNrS1JUVjBiMlkyTVRndlNGZEtRbXBETTJVclpYbEpUWEZxWjJwRldtMTRXV1o0ZDBKVWF6QllWa1ZhZFVFelVIbEJSMmxuUVRFM1VUQmxkalZhZURScGFRb3laa2RKV1U0MWVUTk1OazlOY21aclkyMWtkR2xvYjFGcGMzRmtLM3BMYkdkNFYwZzBXakpMZEZZd1VrWldWSEpsYjI5T1lWTndSbHAxTmtWbFExQklDakJtWnlzclZGWXZkVWRQUldaT1l6UnpaVVZtUm1saFRUUjFjVGh0Y0RWRk1WQlpUMWhZTkVSTWEzcHBaMjV4Y1d3NWFEaDFNeTh6V2tNM2JUUk9iMWtLY1hCdlQzVnlVWGxaTDJSRFZVbEtkek5MWWl0RWJHTnJNVTlhYzBkUlRuWnJjR1pzU0haRGVFTjJWSEUwT0dKRloycFBLM2hyYjFsQ1QwUm9XVEIzVkFwbmNtd3hhMFpDV0UxT1RrRnBSbWxJYkVoaFRUWm9LMDFMZGk4NVkxSnBOak5MV0cxb2FVVnFWVmRWVm1Oa1ZEbGFVbEpRU2paeFpEVlJRVXBJU2l0b0NrNVZOM014TjJGeU5TODBVMmRLZURsQ1dsTkZXWHBSVVVONmREUlNSWGRDZUdaeVJpOUhaRWRPYVdFeGQxcGpjVTFPZVd4dGEwUTRaa05YUWxwcFZ6SUtjMkZ5YzBSNlZucDNkbVIxVERGUFJFbDVZMWg0WlM5d1dsVjRhUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDaTB0TFMwdFFrVkhTVTRnUTBWU1ZFbEdTVU5CVkVVdExTMHRMUXBOU1VsSFoycERRMEpIY1dkQmQwbENRV2RKU2tGTFFtUnNVbFZ1V0ZoSlNrMUJNRWREVTNGSFUwbGlNMFJSUlVKRGQxVkJUVWxJVGsxUmMzZERVVmxFQ2xaUlVVZEZkMHBXVlhwRlVrMUJPRWRCTVZWRlEwRjNTVlp0YkhsYU1teDFZVmRGZUVWNlFWSkNaMDVXUWtGalRVTnJSbk5hV0dob1ltMVNlV0ZYUlhnS1NrUkJhVUpuVGxaQ1FXOU5SekJTYkZreWJIZGhSMVo1U1VaU2JGa3lhSFZpTW5oMldqTnJaMVV6VWpGYVIyeDJZM3BGVlUxQ1NVZEJNVlZGUTNkM1RBcFNWelZ1WVZjMWJGcFlTbkJpYldONFRHcEJjMEpuVGxaQ1FVMU5TbFZTYkZreWJIZGhSMVo1U1VWT2JHTnVVbkJhYld4cVdWaFNiRWxGUmpGa1IyaDJDbU50YkRCbFUwRnZWVzA1ZG1SRGEzaExha0Z2UW1kcmNXaHJhVWM1ZHpCQ1ExRkZWMGN5Vm5WYU1teDFXbGRXZVdGWE5XNVJSMUpzV1RKc2QyRkhWbmtLWW0wNU0weHRUblppVkVGbFJuY3dlRTU2UVRSTlJHdDRUVlJKZVUxVWJHRkdkekI1VG5wQk5FMUVZM2hOVkVsNVRWUnNZVTFKU0U1TlVYTjNRMUZaUkFwV1VWRkhSWGRLVmxWNlJWSk5RVGhIUVRGVlJVTkJkMGxXYld4NVdqSnNkV0ZYUlhoRmVrRlNRbWRPVmtKQlkwMURhMFp6V2xob2FHSnRVbmxoVjBWNENrcEVRV2xDWjA1V1FrRnZUVWN3VW14Wk1teDNZVWRXZVVsR1VteFpNbWgxWWpKNGRsb3phMmRWTTFJeFdrZHNkbU42UlZWTlFrbEhRVEZWUlVOM2Qwd0tVbGMxYm1GWE5XeGFXRXB3WW0xamVFeHFRWE5DWjA1V1FrRk5UVXBWVW14Wk1teDNZVWRXZVVsRlRteGpibEp3V20xc2FsbFlVbXhKUlVZeFpFZG9kZ3BqYld3d1pWTkJiMVZ0T1haa1EydDRTMnBCYjBKbmEzRm9hMmxIT1hjd1FrTlJSVmRITWxaMVdqSnNkVnBYVm5saFZ6VnVVVWRTYkZreWJIZGhSMVo1Q21KdE9UTk1iVTUyWWxSRFEwRnBTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblNWQkJSRU5EUVdkdlEyZG5TVUpCVEVSdk1EaDZVbUp6YzJrS2RuSm5TWGxEYVVVemVEVjBkRWhFWTBWelQzTXpSV0ZhWVVVemFFaHdXRXMxWVc0MWFWaFVPQzkwYkRNMVFrUkJWMnd4U2paRFNtdHROR2x3TUVOb05RcHFUM0Z5YXpWd1pWRktTM1ZPTnpNeFIyeGhabnB2WVdKM1NHTnhlVVEyUTNaS1drRk9jbVUyTkhNd1NqSkRWRnB3YjJJeVoxZE5NRFpETnpWMWQzcExDalZYTkVwbWFYWlRla0p3U0hVNFFTdEdTa0ZTYlZwd2JsRnZSa1JTU1ZCWFVVWnJPWEV5TWtOUVNWZDBiRlZrY210M1ZtUnVTR3hXS3l0b1VrdExRbFVLY1hkQmVWaHFObFZWYm5KMmQxZE9SVkl3UXpCM2EzTnZTbVlyTlc5UUwwaE1lWEY2VldOa05ubFFiVTlwUVdVNFVXaFNPR3BNWkhRdlN6aGxNVFJIU1FvM1dHaEJlWFJMZUVreWNVaHhlbFZ0YVRKVU5UZHNTWHA2T0RObVJ6UkRiVzgxT1cxSlJqUnFUSFpJWm1wRE5EaDZlamxrUTI5UFlrTkxMMUZqWTNwWUNteHBjSGh0VkcwNVNHOWpSRmREUTI4d1REQXpOV0Z5ZGxkNFVtdFFPR1ZqTnpWRFJUSXdVVGhTY1ZWWk9XcFJielJoTmpSU2VXUmlRV0ZpUTNjNGN6QUtZakJ0VTI5SVlsSjJjRnBEZURrMlMyaERSemRGYTJwRGIzSlhjblpvT1dSNFdrRmxia2xhUkVGaWJqTnpXRGxSUjJNMlFTdENOVTFaWW5ZM01GVkxid280VWtReVNVOUVjM1oxUTFOdWJqRnlSVkZ3UjJJd1pEWm9UbE5TWlVST01tTlpURzVUWlhWdlRWVnNlRlF2VTFKRFRrSnBla2RQVjNoS2RVWk1NVU55Q2pWWmJrNTVWWFl6ZEVORldFdDRSVTA1VDI5U1NIVjBlV1J0WldjNFpsUmlWSFU0YUVGc1IybFphR2R4WldodGEwRndVekkxY1VOc05ITldlak5HVldvS0wza3llV1pSWW1WamJHbDFMMWxrVUZaNmFWSkhjMHhQVkVkb1VXeGtRbE5KWVZaa1RVZEJMMjExZW5oV2RFOUtaRXhDZFVzdmNVc3ZaM1pYTjA0eWN3cDJXbEZVU0ZwNkswSXhNRVJzZUhNNVV6Sk9hR1kzUmxnM2NFMU1UVGxvV0VGblRVSkJRVWRxV1hwQ2FFMUNNRWRCTVZWa1JHZFJWMEpDVW1wc1ZHZHNDblo1UlV4d1MzbExaVWhaZGsxSlNHVXlXRXg0ZEhwQlprSm5UbFpJVTAxRlIwUkJWMmRDVW1wc1ZHZHNkbmxGVEhCTGVVdGxTRmwyVFVsSVpUSllUSGdLZEhwQlVFSm5UbFpJVWsxQ1FXWTRSVUpVUVVSQlVVZ3ZUVUUwUjBFeFZXUkVkMFZDTDNkUlJVRjNTVUpvYWtGT1FtZHJjV2hyYVVjNWR6QkNRVkZ6UmdwQlFVOURRV2RGUVdOQ05IbzBRVXhTV0N0ek1VWmlNV295YzFkTWJ6WTFha2w1ZUcwd1QwSXlVbFJzYUhOMFpEUXJlbVFyZWtacVRHYzNXRVV3VHpWcUNrbHNiVE5pWVhOV2JFeE5NbTFVYldrMVEwTTBiWFpQUW1saVUySTJUbXhLY2pNMFIyMUxZbVozV1ZaTWFqTjBjRzVzYmtFdlNFZEhla2haTTNWdldEWUtla0pWVTBsWlVrZ3hNR3N5WW0xd1RUUXpPR1pZZEhvNVVDdHJTRUZyYlhOV2FqSlphemgxVEdjcmRGcEVXa1ZrVFRoeGFWZGlZVWxhWVN0aGQwaDNUQXBFUW1oa01XUlJOMXA1WldwV1NreExSM2xaZDJRM1pFMVpUSEV3TkVZMFFYRmhkMUJ3TW10emJXTlZkR3QwVlRKUkszVkhiVXBDYTNGblFucFZWRU1yQ2pZMGVWQkxRbUpRWVRKWFJrWkVWblJ4ZERCeU5uRkVNazQzUmtRMmRqQmlNRkJwUW1WeWRYWm9jRk4yWVRGNWRrVXdkazFPWm1FNWEyTTRSWGh5UzNvS04wZE5UVWR6ZGpOVVNVOXhTekIwV1ZoS1lYbHZUU3M0VmtGRlRIZENZMFoyYTBOcmIySnpORlIwYTBZelZtOVFhVTg1TVdoc2JUZExLemQzYjA1UlNBcFBWbWg0Y1VSeFNETkZRMEUzZGs1TVpVRXdPWGhVTjBWQmNGaDZVRWQzYXpFMk0wODBjVzlhWkZRM1ZsVkpNa1oxT1Vjd0swbDZlbE0wTWxSV1dFOXRDazFWY0RGelJXbGtWVlZGYkhkMWRYRkVka3Q0YzBKUU5tUnZPWGhVT0dSSVp6SnVPVmt3TkUxRk1rWjVVVEZ2YlhWTWVsSnlZM2xxVlRaUmJ6WlFUSElLU0M5a2FUWkxWRE5wYVZvdmJHVkdhMFJOWmpVdlVHVnplVGRpUlhoUVdrNHljMGhTTTFOd1VqVlNkMUZvTlRCVU5FdGFlRGRHVDNGMlEwcHdhVFpRY0FwSU1XTjZNRGt5TVhGSGRFY3dhV2hsVDNwWFptOXViWFpaUzI1b2VHTlVWSEJuSzJaMWFWWmtVRmQzWkhWMGFsWnNLMGhRWXpKNWFuY3hSMlJ4ZHpSb0NtNDBiMFpxUnpSTFVVODJlblphZWtkRVJtRjVPVWhoZWxwNVZVdHdaMkZ0ZVRJMGRUaFlXVGN2UWxOWFl6RmpPVFZIWnowS0xTMHRMUzFGVGtRZ1EwVlNWRWxHU1VOQlZFVXRMUzB0TFE9PQ==
  server.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdxRENDQkpDZ0F3SUJBZ0lDRUFBd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z2NBeEN6QUpCZ05WQkFZVEFsVlQKTVJFd0R3WURWUVFJREFoV2FYSm5hVzVwWVRFa01DSUdBMVVFQ2d3YlJHVmphWEJvWlhJZ1ZHVmphRzV2Ykc5bgplU0JUZEhWa2FXOXpNUlF3RWdZRFZRUUxEQXRGYm1kcGJtVmxjbWx1WnpFMk1EUUdBMVVFQXd3dFJHVmphWEJvClpYSWdRMlZ5ZEdsbWFXTmhkR1VnUVhWMGFHOXlhWFI1SUNoSmJuUmxjbTFsWkdsaGRHVXBNU293S0FZSktvWkkKaHZjTkFRa0JGaHRsYm1kcGJtVmxjbWx1WjBCa1pXTnBjR2hsY201dmR5NWpiMjB3SGhjTk1Ua3dNakl6TVRZMApNREExV2hjTk1qa3dNakl3TVRZME1EQTFXakNCbWpFbk1DVUdBMVVFQXd3ZUtpNW5jbVY1YldGMGRHVnlMbk4yCll5NWpiSFZ6ZEdWeUxteHZZMkZzTVJRd0VnWURWUVFMREF0RmJtZHBibVZsY21sdVp6RWtNQ0lHQTFVRUNnd2IKUkdWamFYQm9aWElnVkdWamFHNXZiRzluZVNCVGRIVmthVzl6TVJNd0VRWURWUVFIREFwQmJHVjRZVzVrY21saApNUkV3RHdZRFZRUUlEQWhXYVhKbmFXNXBZVEVMTUFrR0ExVUVCaE1DVlZNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCCkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEWVY4d0hmL0NsVG5weUJ3VWxKbHRYQUw2bzRJL3RpbTlLbUZVdUNtMjQKbDBtamhteW4vYmNQRTZiRDdVMXU3V244aUZrOXBtRjJvL2g2Qldib1BmKzcyU1Yzb1N6SWZyUGZPSG40TkZWTQp1RjllR3FsdUl5WVcrK05qZ240V0JLckZqLzVxK01GU0MvQnBNRTh6OVpldE1SeHpzbmY2UlNHaXBUMzh4bnpMClJONXp4RHlSMHpjNERxOHNVK29NQXVPS1RPM2ZOQ1JLUGVKaUczWDdRaEsxa3BTQXBaYXk4dkVXcndUbHpONEIKZHg2alJSTWtxMWx3LzMzRHJTdEZUM2R6T1FhYjFaQ3BDL0txVElYZjdJT3Y2ZytGRFFRck5hVTQzL0JqeHZZSwpSQytvVE0zRnZ4b3FFeVpVRWQveGRPMVFoQWtFb0o5UFRYYjVhRWJ3WjFLTkFnTUJBQUdqZ2dIT01JSUJ5akFKCkJnTlZIUk1FQWpBQU1CRUdDV0NHU0FHRytFSUJBUVFFQXdJR3dEQXpCZ2xnaGtnQmh2aENBUTBFSmhZa1QzQmwKYmxOVFRDQkhaVzVsY21GMFpXUWdVMlZ5ZG1WeUlFTmxjblJwWm1sallYUmxNQjBHQTFVZERnUVdCQlJ2VTkrdAo2VXV3UXg4RmxxTy9JZlM3ZGFNNjF6Q0Ird1lEVlIwakJJSHpNSUh3Z0JSc0RZajJsbFFudG5wYkZkOU5GNXlnCkt5cCtkYUdCMDZTQjBEQ0J6VEVMTUFrR0ExVUVCaE1DVlZNeEVUQVBCZ05WQkFnTUNGWnBjbWRwYm1saE1STXcKRVFZRFZRUUhEQXBCYkdWNFlXNWtjbWxoTVNRd0lnWURWUVFLREJ0RVpXTnBjR2hsY2lCVVpXTm9ibTlzYjJkNQpJRk4wZFdScGIzTXhGREFTQmdOVkJBc01DMFZ1WjJsdVpXVnlhVzVuTVM0d0xBWURWUVFERENWRVpXTnBjR2hsCmNpQkRaWEowYVdacFkyRjBaU0JCZFhSb2IzSnBkSGtnS0ZKdmIzUXBNU293S0FZSktvWklodmNOQVFrQkZodGwKYm1kcGJtVmxjbWx1WjBCa1pXTnBjR2hsY201dmR5NWpiMjJDQWhBQU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZApCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBZ1lJS3dZQkJRVUhBd0V3S1FZRFZSMFJCQ0l3SUlJZUtpNW5jbVY1CmJXRjBkR1Z5TG5OMll5NWpiSFZ6ZEdWeUxteHZZMkZzTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFER0xTY0sKZEFsNGtvRGdKMFVpUWNHTDhsSklzcTlxUmc0eXg4cWFjVUZMeCt3emRZNkNKS1F1MW5NRGdhSzdjc0hYbWxJWAp6a0lNT3RwNnB2L3AyVVFCcXVic2JYbktsR3FZdDlEU0JQT3ArLzB0L0NkalVXM0pnME1NUjU5TmhLVEd6QWs3Clp1OStka1loVlIybk12STEyWDJJNFRZM3MyTElDRzdpV1hTUmFvVGJxYVBQYjNPVUI5MW43cWFXM3JlMVAxYzAKOEJsYVpKTk5xM0djbERaTkl4QlkyVmgrbjNhdWJ6eVZEUm83S1pFLytYQmRkVjNiUjhwaUxVaDY4dW5uMDBseApJSGwwdGNzY24velU4eHlrcGFJNkhVQUhieE10b1BXcWJhSUJyK2NLSUY0aXdTT0VnVDNqekJIazhqaWt0dUNrCmVUcTJFckkwZGxscXRlMms2T1dRZmE1czBDWEpuSStYZi9qelV4L0xuQTV6djhuV2hObDE4blJTN3JLZ1ZOZnYKY3l4dFNJWGV4MWxJb3lUemt4cE92eEh3aWZQWjF3NExicFRSc2NWQXJDKzJudEtkMForMVZsYThCSUV6Z1g5SAp3YWtVa2hSenpsWERuRWZpRURuOGpGdG9oTkdKVEw0U1pxVkYwclI5RmVHdllqVlVuVDVDTTNmVmdOZXY4NzNkCmRVU0JxY0t6ZXJNN2lsZWVMNDNjZVJkeUU2eWxyTVVIMnJDeDRkeHhsWTZEYno5a3pEdnZsNDk0dkI4VDJybDcKWHVuQ3hqKzAxVlNaQld6SEc0QzZFTmJMdGs5QjVNS3I3OE1BeXVNeERTRGY5eW54bFRETEFPamFnSW5lL25UUApmRzFKKzNUWXk4TTZkSTlnVXdqRTJ2ODd4dDlqSlkybERvZkxoUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  cert_b64: TFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVZHhSRU5EUWtwRFowRjNTVUpCWjBsRFJVRkJkMFJSV1VwTGIxcEphSFpqVGtGUlJVeENVVUYzWjJOQmVFTjZRVXBDWjA1V1FrRlpWRUZzVmxRS1RWSkZkMFIzV1VSV1VWRkpSRUZvVjJGWVNtNWhWelZ3V1ZSRmEwMURTVWRCTVZWRlEyZDNZbEpIVm1waFdFSnZXbGhKWjFaSFZtcGhSelYyWWtjNWJncGxVMEpVWkVoV2EyRlhPWHBOVWxGM1JXZFpSRlpSVVV4RVFYUkdZbTFrY0dKdFZteGpiV3gxV25wRk1rMUVVVWRCTVZWRlFYZDNkRkpIVm1waFdFSnZDbHBZU1dkUk1sWjVaRWRzYldGWFRtaGtSMVZuVVZoV01HRkhPWGxoV0ZJMVNVTm9TbUp1VW14amJURnNXa2RzYUdSSFZYQk5VMjkzUzBGWlNrdHZXa2tLYUhaalRrRlJhMEpHYUhSc1ltMWtjR0p0Vm14amJXeDFXakJDYTFwWFRuQmpSMmhzWTIwMWRtUjVOV3BpTWpCM1NHaGpUazFVYTNkTmFrbDZUVlJaTUFwTlJFRXhWMmhqVGsxcWEzZE5ha2wzVFZSWk1FMUVRVEZYYWtOQ2JXcEZiazFEVlVkQk1WVkZRWGQzWlV0cE5XNWpiVlkxWWxkR01HUkhWbmxNYms0eUNsbDVOV3BpU0ZaNlpFZFdlVXh0ZUhaWk1rWnpUVkpSZDBWbldVUldVVkZNUkVGMFJtSnRaSEJpYlZac1kyMXNkVnA2Uld0TlEwbEhRVEZWUlVObmQySUtVa2RXYW1GWVFtOWFXRWxuVmtkV2FtRkhOWFppUnpsdVpWTkNWR1JJVm10aFZ6bDZUVkpOZDBWUldVUldVVkZJUkVGd1FtSkhWalJaVnpWclkyMXNhQXBOVWtWM1JIZFpSRlpSVVVsRVFXaFhZVmhLYm1GWE5YQlpWRVZNVFVGclIwRXhWVVZDYUUxRFZsWk5kMmRuUldsTlFUQkhRMU54UjFOSllqTkVVVVZDQ2tGUlZVRkJORWxDUkhkQmQyZG5SVXRCYjBsQ1FWRkVXVlk0ZDBobUwwTnNWRzV3ZVVKM1ZXeEtiSFJZUVV3MmJ6UkpMM1JwYlRsTGJVWlZkVU50TWpRS2JEQnRhbWh0ZVc0dlltTlFSVFppUkRkVk1YVTNWMjQ0YVVack9YQnRSakp2TDJnMlFsZGliMUJtS3pjeVUxWXpiMU42U1daeVVHWlBTRzQwVGtaV1RRcDFSamxsUjNGc2RVbDVXVmNySzA1cVoyNDBWMEpMY2tacUx6VnhLMDFHVTBNdlFuQk5SVGg2T1ZwbGRFMVNlSHB6Ym1ZMlVsTkhhWEJVTXpoNGJucE1DbEpPTlhwNFJIbFNNSHBqTkVSeE9ITlZLMjlOUVhWUFMxUlBNMlpPUTFKTFVHVkthVWN6V0RkUmFFc3hhM0JUUVhCYVlYazRka1ZYY25kVWJIcE9ORUlLWkhnMmFsSlNUV3R4TVd4M0x6TXpSSEpUZEVaVU0yUjZUMUZoWWpGYVEzQkRMMHR4VkVsWVpqZEpUM1kyWnl0R1JGRlJjazVoVlRRekwwSnFlSFpaU3dwU1F5dHZWRTB6Um5aNGIzRkZlVnBWUldRdmVHUlBNVkZvUVd0RmIwbzVVRlJZWWpWaFJXSjNXakZMVGtGblRVSkJRVWRxWjJkSVQwMUpTVUo1YWtGS0NrSm5UbFpJVWsxRlFXcEJRVTFDUlVkRFYwTkhVMEZIUnl0RlNVSkJVVkZGUVhkSlIzZEVRWHBDWjJ4bmFHdG5RbWgyYUVOQlVUQkZTbWhaYTFRelFtd0tZbXhPVkZSRFFraGFWelZzWTIxR01GcFhVV2RWTWxaNVpHMVdlVWxGVG14amJsSndXbTFzYWxsWVVteE5RakJIUVRGVlpFUm5VVmRDUWxKMlZUa3JkQW8yVlhWM1VYZzRSbXh4VHk5SlpsTTNaR0ZOTmpGNlEwSXJkMWxFVmxJd2FrSkpTSHBOU1VoM1owSlNjMFJaYWpKc2JGRnVkRzV3WWtaa09VNUdOWGxuQ2t0NWNDdGtZVWRDTURaVFFqQkVRMEo2VkVWTVRVRnJSMEV4VlVWQ2FFMURWbFpOZUVWVVFWQkNaMDVXUWtGblRVTkdXbkJqYldSd1ltMXNhRTFTVFhjS1JWRlpSRlpSVVVoRVFYQkNZa2RXTkZsWE5XdGpiV3hvVFZOUmQwbG5XVVJXVVZGTFJFSjBSVnBYVG5CalIyaHNZMmxDVlZwWFRtOWliVGx6WWpKa05RcEpSazR3WkZkU2NHSXpUWGhHUkVGVFFtZE9Wa0pCYzAxRE1GWjFXakpzZFZwWFZubGhWelZ1VFZNMGQweEJXVVJXVVZGRVJFTldSVnBYVG5CalIyaHNDbU5wUWtSYVdFb3dZVmRhY0ZreVJqQmFVMEpDWkZoU2IySXpTbkJrU0d0blMwWktkbUl6VVhCTlUyOTNTMEZaU2t0dldrbG9kbU5PUVZGclFrWm9kR3dLWW0xa2NHSnRWbXhqYld4MVdqQkNhMXBYVG5CalIyaHNZMjAxZG1SNU5XcGlNakpEUVdoQlFVMUJORWRCTVZWa1JIZEZRaTkzVVVWQmQwbEdiMFJCWkFwQ1owNVdTRk5WUlVacVFWVkNaMmR5UW1kRlJrSlJZMFJCWjFsSlMzZFpRa0pSVlVoQmQwVjNTMUZaUkZaU01GSkNRMGwzU1VsSlpVdHBOVzVqYlZZMUNtSlhSakJrUjFaNVRHNU9NbGw1TldwaVNGWjZaRWRXZVV4dGVIWlpNa1p6VFVFd1IwTlRjVWRUU1dJelJGRkZRa04zVlVGQk5FbERRVkZFUjB4VFkwc0taRUZzTkd0dlJHZEtNRlZwVVdOSFREaHNTa2x6Y1RseFVtYzBlWGc0Y1dGalZVWk1lQ3QzZW1SWk5rTktTMUYxTVc1TlJHZGhTemRqYzBoWWJXeEpXQXA2YTBsTlQzUndObkIyTDNBeVZWRkNjWFZpYzJKWWJrdHNSM0ZaZERsRVUwSlFUM0FyTHpCMEwwTmthbFZYTTBwbk1FMU5ValU1VG1oTFZFZDZRV3MzQ2xwMU9TdGthMWxvVmxJeWJrMTJTVEV5V0RKSk5GUlpNM015VEVsRFJ6ZHBWMWhUVW1GdlZHSnhZVkJRWWpOUFZVSTVNVzQzY1dGWE0zSmxNVkF4WXpBS09FSnNZVnBLVGs1eE0wZGpiRVJhVGtsNFFsa3lWbWdyYmpOaGRXSjZlVlpFVW04M1MxcEZMeXRZUW1Sa1ZqTmlVamh3YVV4VmFEWTRkVzV1TURCc2VBcEpTR3d3ZEdOelkyNHZlbFU0ZUhscmNHRkpOa2hWUVVoaWVFMTBiMUJYY1dKaFNVSnlLMk5MU1VZMGFYZFRUMFZuVkROcWVrSklhemhxYVd0MGRVTnJDbVZVY1RKRmNra3daR3hzY1hSbE1tczJUMWRSWm1FMWN6QkRXRXB1U1N0WVppOXFlbFY0TDB4dVFUVjZkamh1VjJoT2JERTRibEpUTjNKTFoxWk9abllLWTNsNGRGTkpXR1Y0TVd4SmIzbFVlbXQ0Y0U5MmVFaDNhV1pRV2pGM05FeGljRlJTYzJOV1FYSkRLekp1ZEV0a01Gb3JNVlpzWVRoQ1NVVjZaMWc1U0FwM1lXdFZhMmhTZW5wc1dFUnVSV1pwUlVSdU9HcEdkRzlvVGtkS1ZFdzBVMXB4VmtZd2NsSTVSbVZIZGxscVZsVnVWRFZEVFRObVZtZE9aWFk0TnpOa0NtUlZVMEp4WTB0NlpYSk5OMmxzWldWTU5ETmpaVkprZVVVMmVXeHlUVlZJTW5KRGVEUmtlSGhzV1RaRVlubzVhM3BFZG5ac05EazBka0k0VkRKeWJEY0tXSFZ1UTNocUt6QXhWbE5hUWxkNlNFYzBRelpGVG1KTWRHczVRalZOUzNJM09FMUJlWFZOZUVSVFJHWTVlVzU0YkZSRVRFRlBhbUZuU1c1bEwyNVVVQXBtUnpGS0t6TlVXWGs0VFRaa1NUbG5WWGRxUlRKMk9EZDRkRGxxU2xreWJFUnZaa3hvVVQwOUNpMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwPQ==
  server.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMkZmTUIzL3dwVTU2Y2djRkpTWmJWd0MrcU9DUDdZcHZTcGhWTGdwdHVKZEpvNFpzCnAvMjNEeE9tdysxTmJ1MXAvSWhaUGFaaGRxUDRlZ1ZtNkQzL3U5a2xkNkVzeUg2ejN6aDUrRFJWVExoZlhocXAKYmlNbUZ2dmpZNEorRmdTcXhZLythdmpCVWd2d2FUQlBNL1dYclRFY2M3SjMra1Vob3FVOS9NWjh5MFRlYzhROAprZE0zT0E2dkxGUHFEQUxqaWt6dDN6UWtTajNpWWh0MSswSVN0WktVZ0tXV3N2THhGcThFNWN6ZUFYY2VvMFVUCkpLdFpjUDk5dzYwclJVOTNjemtHbTlXUXFRdnlxa3lGMyt5RHIrb1BoUTBFS3pXbE9OL3dZOGIyQ2tRdnFFek4KeGI4YUtoTW1WQkhmOFhUdFVJUUpCS0NmVDAxMitXaEc4R2RTalFJREFRQUJBb0lCQUMyRXc0UHNjbGlGbTVPMApVR3ZSbHpSR0R0ZC9jQ2o5a0k3MFlDK3d1QWMzcGFISFhjTTJ5YlpkWHlBb0pMdXJManFaQVpYTUZRT2VXbUJxCkZJM1d4YURqZmxPZVVNcmFoY1A0b1FrTkVjbHpuWFV5VE9YRWRYWXVoMWhmazJIVWw0Mjd6ejc0bWN4R2dNM1IKQVVrZ2FrcGhZK2dmNjhoM2xTMGdjVnRtODhqY2tKeHQyNjNiL1oxenI0SHh3eDU3WFYzNTJzK05ZL3VWa3daaAppaFJvNkd5OEFPTzFGangvMVl1Y3M2SjNHRjBEVGZqQ0YyZjVoL25QYlRZU1dpdGY5T1hKUjI4d0YrTmZnd3VXCnBFb2IyaDN5RDRjK2hXSUVLcmt3TmVSRnA3VkxESnhUNUlpdWJVcVZzVUJkZFlXWjBBT3BzQ1Y1WHZVU25jdFQKbHhKdTRtMENnWUVBN1ZQb1pLL3V1d2swbkdxQnY2NUZuQTdndWtnUUd0RFJXMUwyeW82UHJmekNBWHlJMWYrSwpma1E5eUN6WUFSS3MrckRRQ2RzWHlUSFlyaUxzUC9jRlQyd1pkYmpaem5OL1NwMVorRnZOMEkrTERhbllOUHoxClp1K1NlenAvM3JTemRLV01kblg2MktDUmx3eVJJZkdIWHl4ajZMcGszSkF0YnBPSE0vMExZMjhDZ1lFQTZWMDYKU0xxWWJwRDNEZ2VmVURkOFEveElKcmVJcTdnSS9Jcm91MGZPc0x4ZkVsZ0NwcEY0Q3ZDTkQvVTVwc1p2TUM0OApxeFd2MjdXT0Z6VVU1N1dNZkdUelB2ZUdrbGF1ZE4wU291Ty9rTmIxc2Q3T25PNnc0cHBxcENSQlBrM2lQQ1ZCCld2N1hHYnVBMjNQY2ZyN3hRY1cwN3E0TTk3U3VQMGRacjlRd084TUNnWUVBanVLQ3V3UVZSalJmb1lDYVIyNUQKNkpZb2hON1lHMXozZnZVdk1ucXNWSU1seHNGVW5RcXlOaDBkMlVQdWRJN3E2Qy9Gd1BsUWs4aFgvVmQzUjNlUQprZVd5V21jRmN6K2tOcWNQd1BCOHRJR0hwWjFKVjNXb3hlV2RHbVg1RUh0WXcvVGI0WUpjbVVucS9iY0tOaFoxCmV6NTlsR09NVUNMWng0WTQwM3NZL1M4Q2dZRUE1L1lTTkM2OXk5RnVzVlJrU0VFTzFTa1VzdDltQzRKZjlGOUQKSEwwd3R6NVdwZzR6ZkV4R2JXRlVaaE5VSGZGS25qS25mVXVPUlM3L01SUkRWbHFBYlRtUEMvelFsKzl2YzV3MwpwUkFLMzdhNysvVERuUHdwZU9VU3NWdVVPcEVDR3RUUlZOalJDTFAzVHF1bzlaZG9pZjh5YkxrM0RKVmRTbXJxCnZEcUhReThDZ1lFQTRpbDlqSDd5bk93Mk9IUWJEK1hjTHhLZnpqWnRYcTNEQ2lYTmg5KzhLd1c1WHlEY21oL3IKUDJrU2t2Q3ZFRGZCN3BCUGFjL0Fwa0hGaTZ0c1NMYWZiejFWVk9mV0x2d2VVcUZuZXp1NnpXRDBxbFAwMjdVNQp6VjRJamtoWmNTRDN4N3JMSHY2M3hzTjBOVSsvRVppbE83VlZhM1JXcm81OCtMSi81U2ZPbEs0PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
  key_b64: TFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGY0ZGSlFrRkJTME5CVVVWQk1rWm1UVUl6TDNkd1ZUVTJZMmRqUmtwVFdtSldkME1yY1U5RFVEZFpjSFpUY0doV1RHZHdkSFZLWkVwdk5GcHpDbkF2TWpORWVFOXRkeXN4VG1KMU1YQXZTV2hhVUdGYWFHUnhVRFJsWjFadE5rUXpMM1U1YTJ4a05rVnplVWcyZWpONmFEVXJSRkpXVkV4b1psaG9jWEFLWW1sTmJVWjJkbXBaTkVvclJtZFRjWGhaTHl0aGRtcENWV2QyZDJGVVFsQk5MMWRZY2xSRlkyTTNTak1yYTFWb2IzRlZPUzlOV2poNU1GUmxZemhST0FwclpFMHpUMEUyZGt4R1VIRkVRVXhxYVd0NmRETjZVV3RUYWpOcFdXaDBNU3N3U1ZOMFdrdFZaMHRYVjNOMlRIaEdjVGhGTldONlpVRllZMlZ2TUZWVUNrcExkRnBqVURrNWR6WXdjbEpWT1ROamVtdEhiVGxYVVhGUmRubHhhM2xHTXl0NVJISXJiMUJvVVRCRlMzcFhiRTlPTDNkWk9HSXlRMnRSZG5GRmVrNEtlR0k0WVV0b1RXMVdRa2htT0ZoVWRGVkpVVXBDUzBObVZEQXhNaXRYYUVjNFIyUlRhbEZKUkVGUlFVSkJiMGxDUVVNeVJYYzBVSE5qYkdsR2JUVlBNQXBWUjNaU2JIcFNSMFIwWkM5alEybzVhMGszTUZsREszZDFRV016Y0dGSVNGaGpUVEo1WWxwa1dIbEJiMHBNZFhKTWFuRmFRVnBZVFVaUlQyVlhiVUp4Q2taSk0xZDRZVVJxWm14UFpWVk5jbUZvWTFBMGIxRnJUa1ZqYkhwdVdGVjVWRTlZUldSWVdYVm9NV2htYXpKSVZXdzBNamQ2ZWpjMGJXTjRSMmROTTFJS1FWVnJaMkZyY0doWksyZG1OamhvTTJ4VE1HZGpWblJ0T0RocVkydEtlSFF5TmpOaUwxb3hlbkkwU0hoM2VEVTNXRll6TlRKekswNVpMM1ZXYTNkYWFBcHBhRkp2TmtkNU9FRlBUekZHYW5ndk1WbDFZM00yU2pOSFJqQkVWR1pxUTBZeVpqVm9MMjVRWWxSWlUxZHBkR1k1VDFoS1VqSTRkMFlyVG1abmQzVlhDbkJGYjJJeWFETjVSRFJqSzJoWFNVVkxjbXQzVG1WU1JuQTNWa3hFU25oVU5VbHBkV0pWY1ZaelZVSmtaRmxYV2pCQlQzQnpRMVkxV0haVlUyNWpkRlFLYkhoS2RUUnRNRU5uV1VWQk4xWlFiMXBMTDNWMWQyc3dia2R4UW5ZMk5VWnVRVGRuZFd0blVVZDBSRkpYTVV3eWVXODJVSEptZWtOQldIbEpNV1lyU3dwbWExRTVlVU42V1VGU1MzTXJja1JSUTJSeldIbFVTRmx5YVV4elVDOWpSbFF5ZDFwa1ltcGFlbTVPTDFOd01Wb3JSblpPTUVrclRFUmhibGxPVUhveENscDFLMU5sZW5Bdk0zSlRlbVJMVjAxa2JsZzJNa3REVW14M2VWSkpaa2RJV0hsNGFqWk1jR3N6U2tGMFluQlBTRTB2TUV4Wk1qaERaMWxGUVRaV01EWUtVMHh4V1dKd1JETkVaMlZtVlVSa09GRXZlRWxLY21WSmNUZG5TUzlKY205MU1HWlBjMHg0WmtWc1owTndjRVkwUTNaRFRrUXZWVFZ3YzFwMlRVTTBPQXB4ZUZkMk1qZFhUMFo2VlZVMU4xZE5aa2RVZWxCMlpVZHJiR0YxWkU0d1UyOTFUeTlyVG1JeGMyUTNUMjVQTm5jMGNIQnhjRU5TUWxCck0ybFFRMVpDQ2xkMk4xaEhZblZCTWpOUVkyWnlOM2hSWTFjd04zRTBUVGszVTNWUU1HUmFjamxSZDA4NFRVTm5XVVZCYW5WTFEzVjNVVlpTYWxKbWIxbERZVkl5TlVRS05rcFpiMmhPTjFsSE1Yb3pablpWZGsxdWNYTldTVTFzZUhOR1ZXNVJjWGxPYURCa01sVlFkV1JKTjNFMlF5OUdkMUJzVVdzNGFGZ3ZWbVF6VWpObFVRcHJaVmQ1VjIxalJtTjZLMnRPY1dOUWQxQkNPSFJKUjBod1dqRktWak5YYjNobFYyUkhiVmcxUlVoMFdYY3ZWR0kwV1VwamJWVnVjUzlpWTB0T2FGb3hDbVY2TlRsc1IwOU5WVU5NV25nMFdUUXdNM05aTDFNNFEyZFpSVUUxTDFsVFRrTTJPWGs1Um5WelZsSnJVMFZGVHpGVGExVnpkRGx0UXpSS1pqbEdPVVFLU0V3d2QzUjZOVmR3WnpSNlprVjRSMkpYUmxWYWFFNVZTR1pHUzI1cVMyNW1WWFZQVWxNM0wwMVNVa1JXYkhGQllsUnRVRU12ZWxGc0t6bDJZelYzTXdwd1VrRkxNemRoTnlzdlZFUnVVSGR3WlU5VlUzTldkVlZQY0VWRFIzUlVVbFpPYWxKRFRGQXpWSEYxYnpsYVpHOXBaamg1WWt4ck0wUktWbVJUYlhKeENuWkVjVWhSZVRoRFoxbEZRVFJwYkRscVNEZDViazkzTWs5SVVXSkVLMWhqVEhoTFpucHFXblJZY1RORVEybFlUbWc1S3poTGQxYzFXSGxFWTIxb0wzSUtVREpyVTJ0MlEzWkZSR1pDTjNCQ1VHRmpMMEZ3YTBoR2FUWjBjMU5NWVdaaWVqRldWazltVjB4MmQyVlZjVVp1WlhwMU5ucFhSREJ4YkZBd01qZFZOUXA2VmpSSmFtdG9XbU5UUkRONE4zSk1TSFkyTTNoelRqQk9WU3N2UlZwcGJFODNWbFpoTTFKWGNtODFPQ3RNU2k4MVUyWlBiRXMwUFFvdExTMHRMVVZPUkNCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRPT0=
---
# Source: greymatter/charts/internal-data/templates/mongo-passwords.yaml
apiVersion: v1
kind: Secret
metadata:
  name: internal-mongo-credentials
  labels:
    chart: "internal-data-2.0.2"
    release: "gm"
type: Opaque
stringData:
  root_username: mongogm
  root_password: USCISMongo64
  admin_password: USCISMongoA32
  database: gmdata
---
# Source: greymatter/charts/internal-jwt/templates/jwt-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: internal-jwt-security-secret
  labels:
    chart: "internal-jwt-2.0.1"
    release: "gm"
type: Opaque
data:
  jwt.api_key: ZG05c1kyRnVieTFsY0dsa1pXMXBZeTEwZDJWc1puUm9MWFJoYldGc1pRPT0=
  jwt.key: TFMwdExTMUNSVWRKVGlCRlF5QlFVa2xXUVZSRklFdEZXUzB0TFMwdENrMUpTR05CWjBWQ1FrVkpRa052YnpkbFlXdENTekI1Wlhoek1EQnFlV1JRWlM4MmVsVktZWEpTTW1ObVJrWnBWRmN3V1RWeU5HTkJSSEpIYVdwcWNWTUtUWGhwUjA5TlJHaFJMM1YzU1U1VlFUWjJUbGxhWTBwc05IcG1iWFp3U21sa2NqWm5RbmRaUmtzMFJVVkJRMDlvWjFsclJHZFpXVUZDUVVGUVJtd3pkd3BxT0doTVowTmljVTRyVFc4eGNYRjNSRVphTDBkSVFqUXpiMnBVZWxkTmRVTnljVVpOZGpaeFZrWTFhR1F6Y21GUlptVXZOWGxGUW1FeWNGbHZaM1pRQ2xWSmVqWjBOVFpJYlVkV2JtVnhkMDR2WjBaeVQzSkJPSEp1ZFVwQlVrUlFaRU4xZVVaalNHMWxkU3RGUTAxd0swbFNTMm8zTjAxWFlWSnNVVU54UWs4S1QzVnFTRmxSYkZOUE1HTllTR3BTYUhOV04xWlhkRGd6Y2pJMWVqbFNjVFEzZG1jNGNHaGFSbHBSUFQwS0xTMHRMUzFGVGtRZ1JVTWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRPT0=
  jwt.pub: TFMwdExTMUNSVWRKVGlCUVZVSk1TVU1nUzBWWkxTMHRMUzBLVFVsSFlrMUNRVWRDZVhGSFUwMDBPVUZuUlVkQ1UzVkNRa0ZCYWtFMFIwZEJRVkZCUkhoYVpEaEpMMGxUTkVGdE5tcG1ha3RPWVhGelFYaFhabmhvZHdwbFRqWkpNRGd4YWt4bmNUWm9WRXdyY1d4U1pWbFlaRFl5YTBnemRpdGphRUZYZEhGWFMwbE1lakZEVFN0eVpXVm9OV2hzV2pOeGMwUm1ORUpoZW5GM0NsQkxOVGRwVVVWUmVqTlJjbk5vV0VJMWJuSjJhRUZxUzJacFJWTnZLeXQ2Um0xcldsVkJjV2RVYW5KdmVESkZTbFZxZEVoR2VEUXdXV0pHWlRGV2NtWUtUalk1ZFdNdlZXRjFUemMwVUV0WlYxSlhWVDBLTFMwdExTMUZUa1FnVUZWQ1RFbERJRXRGV1MwdExTMHQ=
---
# Source: greymatter/charts/internal-jwt/templates/jwt-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: internal-jwt-certs
  labels:
    chart: "internal-jwt-2.0.1"
    release: "gm"
type: Opaque
data:
  jwt.cert.pem: TFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVZHhSRU5EUWtwRFowRjNTVUpCWjBsRFJVRkJkMFJSV1VwTGIxcEphSFpqVGtGUlJVeENVVUYzWjJOQmVFTjZRVXBDWjA1V1FrRlpWRUZzVmxRS1RWSkZkMFIzV1VSV1VWRkpSRUZvVjJGWVNtNWhWelZ3V1ZSRmEwMURTVWRCTVZWRlEyZDNZbEpIVm1waFdFSnZXbGhKWjFaSFZtcGhSelYyWWtjNWJncGxVMEpVWkVoV2EyRlhPWHBOVWxGM1JXZFpSRlpSVVV4RVFYUkdZbTFrY0dKdFZteGpiV3gxV25wRk1rMUVVVWRCTVZWRlFYZDNkRkpIVm1waFdFSnZDbHBZU1dkUk1sWjVaRWRzYldGWFRtaGtSMVZuVVZoV01HRkhPWGxoV0ZJMVNVTm9TbUp1VW14amJURnNXa2RzYUdSSFZYQk5VMjkzUzBGWlNrdHZXa2tLYUhaalRrRlJhMEpHYUhSc1ltMWtjR0p0Vm14amJXeDFXakJDYTFwWFRuQmpSMmhzWTIwMWRtUjVOV3BpTWpCM1NHaGpUazFVYTNkTmFrbDZUVlJaTUFwTlJFRXhWMmhqVGsxcWEzZE5ha2wzVFZSWk1FMUVRVEZYYWtOQ2JXcEZiazFEVlVkQk1WVkZRWGQzWlV0cE5XNWpiVlkxWWxkR01HUkhWbmxNYms0eUNsbDVOV3BpU0ZaNlpFZFdlVXh0ZUhaWk1rWnpUVkpSZDBWbldVUldVVkZNUkVGMFJtSnRaSEJpYlZac1kyMXNkVnA2Uld0TlEwbEhRVEZWUlVObmQySUtVa2RXYW1GWVFtOWFXRWxuVmtkV2FtRkhOWFppUnpsdVpWTkNWR1JJVm10aFZ6bDZUVkpOZDBWUldVUldVVkZJUkVGd1FtSkhWalJaVnpWclkyMXNhQXBOVWtWM1JIZFpSRlpSVVVsRVFXaFhZVmhLYm1GWE5YQlpWRVZNVFVGclIwRXhWVVZDYUUxRFZsWk5kMmRuUldsTlFUQkhRMU54UjFOSllqTkVVVVZDQ2tGUlZVRkJORWxDUkhkQmQyZG5SVXRCYjBsQ1FWRkVXVlk0ZDBobUwwTnNWRzV3ZVVKM1ZXeEtiSFJZUVV3MmJ6UkpMM1JwYlRsTGJVWlZkVU50TWpRS2JEQnRhbWh0ZVc0dlltTlFSVFppUkRkVk1YVTNWMjQ0YVVack9YQnRSakp2TDJnMlFsZGliMUJtS3pjeVUxWXpiMU42U1daeVVHWlBTRzQwVGtaV1RRcDFSamxsUjNGc2RVbDVXVmNySzA1cVoyNDBWMEpMY2tacUx6VnhLMDFHVTBNdlFuQk5SVGg2T1ZwbGRFMVNlSHB6Ym1ZMlVsTkhhWEJVTXpoNGJucE1DbEpPTlhwNFJIbFNNSHBqTkVSeE9ITlZLMjlOUVhWUFMxUlBNMlpPUTFKTFVHVkthVWN6V0RkUmFFc3hhM0JUUVhCYVlYazRka1ZYY25kVWJIcE9ORUlLWkhnMmFsSlNUV3R4TVd4M0x6TXpSSEpUZEVaVU0yUjZUMUZoWWpGYVEzQkRMMHR4VkVsWVpqZEpUM1kyWnl0R1JGRlJjazVoVlRRekwwSnFlSFpaU3dwU1F5dHZWRTB6Um5aNGIzRkZlVnBWUldRdmVHUlBNVkZvUVd0RmIwbzVVRlJZWWpWaFJXSjNXakZMVGtGblRVSkJRVWRxWjJkSVQwMUpTVUo1YWtGS0NrSm5UbFpJVWsxRlFXcEJRVTFDUlVkRFYwTkhVMEZIUnl0RlNVSkJVVkZGUVhkSlIzZEVRWHBDWjJ4bmFHdG5RbWgyYUVOQlVUQkZTbWhaYTFRelFtd0tZbXhPVkZSRFFraGFWelZzWTIxR01GcFhVV2RWTWxaNVpHMVdlVWxGVG14amJsSndXbTFzYWxsWVVteE5RakJIUVRGVlpFUm5VVmRDUWxKMlZUa3JkQW8yVlhWM1VYZzRSbXh4VHk5SlpsTTNaR0ZOTmpGNlEwSXJkMWxFVmxJd2FrSkpTSHBOU1VoM1owSlNjMFJaYWpKc2JGRnVkRzV3WWtaa09VNUdOWGxuQ2t0NWNDdGtZVWRDTURaVFFqQkVRMEo2VkVWTVRVRnJSMEV4VlVWQ2FFMURWbFpOZUVWVVFWQkNaMDVXUWtGblRVTkdXbkJqYldSd1ltMXNhRTFTVFhjS1JWRlpSRlpSVVVoRVFYQkNZa2RXTkZsWE5XdGpiV3hvVFZOUmQwbG5XVVJXVVZGTFJFSjBSVnBYVG5CalIyaHNZMmxDVlZwWFRtOWliVGx6WWpKa05RcEpSazR3WkZkU2NHSXpUWGhHUkVGVFFtZE9Wa0pCYzAxRE1GWjFXakpzZFZwWFZubGhWelZ1VFZNMGQweEJXVVJXVVZGRVJFTldSVnBYVG5CalIyaHNDbU5wUWtSYVdFb3dZVmRhY0ZreVJqQmFVMEpDWkZoU2IySXpTbkJrU0d0blMwWktkbUl6VVhCTlUyOTNTMEZaU2t0dldrbG9kbU5PUVZGclFrWm9kR3dLWW0xa2NHSnRWbXhqYld4MVdqQkNhMXBYVG5CalIyaHNZMjAxZG1SNU5XcGlNakpEUVdoQlFVMUJORWRCTVZWa1JIZEZRaTkzVVVWQmQwbEdiMFJCWkFwQ1owNVdTRk5WUlVacVFWVkNaMmR5UW1kRlJrSlJZMFJCWjFsSlMzZFpRa0pSVlVoQmQwVjNTMUZaUkZaU01GSkNRMGwzU1VsSlpVdHBOVzVqYlZZMUNtSlhSakJrUjFaNVRHNU9NbGw1TldwaVNGWjZaRWRXZVV4dGVIWlpNa1p6VFVFd1IwTlRjVWRUU1dJelJGRkZRa04zVlVGQk5FbERRVkZFUjB4VFkwc0taRUZzTkd0dlJHZEtNRlZwVVdOSFREaHNTa2x6Y1RseFVtYzBlWGc0Y1dGalZVWk1lQ3QzZW1SWk5rTktTMUYxTVc1TlJHZGhTemRqYzBoWWJXeEpXQXA2YTBsTlQzUndObkIyTDNBeVZWRkNjWFZpYzJKWWJrdHNSM0ZaZERsRVUwSlFUM0FyTHpCMEwwTmthbFZYTTBwbk1FMU5ValU1VG1oTFZFZDZRV3MzQ2xwMU9TdGthMWxvVmxJeWJrMTJTVEV5V0RKSk5GUlpNM015VEVsRFJ6ZHBWMWhUVW1GdlZHSnhZVkJRWWpOUFZVSTVNVzQzY1dGWE0zSmxNVkF4WXpBS09FSnNZVnBLVGs1eE0wZGpiRVJhVGtsNFFsa3lWbWdyYmpOaGRXSjZlVlpFVW04M1MxcEZMeXRZUW1Sa1ZqTmlVamh3YVV4VmFEWTRkVzV1TURCc2VBcEpTR3d3ZEdOelkyNHZlbFU0ZUhscmNHRkpOa2hWUVVoaWVFMTBiMUJYY1dKaFNVSnlLMk5MU1VZMGFYZFRUMFZuVkROcWVrSklhemhxYVd0MGRVTnJDbVZVY1RKRmNra3daR3hzY1hSbE1tczJUMWRSWm1FMWN6QkRXRXB1U1N0WVppOXFlbFY0TDB4dVFUVjZkamh1VjJoT2JERTRibEpUTjNKTFoxWk9abllLWTNsNGRGTkpXR1Y0TVd4SmIzbFVlbXQ0Y0U5MmVFaDNhV1pRV2pGM05FeGljRlJTYzJOV1FYSkRLekp1ZEV0a01Gb3JNVlpzWVRoQ1NVVjZaMWc1U0FwM1lXdFZhMmhTZW5wc1dFUnVSV1pwUlVSdU9HcEdkRzlvVGtkS1ZFdzBVMXB4VmtZd2NsSTVSbVZIZGxscVZsVnVWRFZEVFRObVZtZE9aWFk0TnpOa0NtUlZVMEp4WTB0NlpYSk5OMmxzWldWTU5ETmpaVkprZVVVMmVXeHlUVlZJTW5KRGVEUmtlSGhzV1RaRVlubzVhM3BFZG5ac05EazBka0k0VkRKeWJEY0tXSFZ1UTNocUt6QXhWbE5hUWxkNlNFYzBRelpGVG1KTWRHczVRalZOUzNJM09FMUJlWFZOZUVSVFJHWTVlVzU0YkZSRVRFRlBhbUZuU1c1bEwyNVVVQXBtUnpGS0t6TlVXWGs0VFRaa1NUbG5WWGRxUlRKMk9EZDRkRGxxU2xreWJFUnZaa3hvVVQwOUNpMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwPQ==
  jwt.key.pem: TFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGY0ZGSlFrRkJTME5CVVVWQk1rWm1UVUl6TDNkd1ZUVTJZMmRqUmtwVFdtSldkME1yY1U5RFVEZFpjSFpUY0doV1RHZHdkSFZLWkVwdk5GcHpDbkF2TWpORWVFOXRkeXN4VG1KMU1YQXZTV2hhVUdGYWFHUnhVRFJsWjFadE5rUXpMM1U1YTJ4a05rVnplVWcyZWpONmFEVXJSRkpXVkV4b1psaG9jWEFLWW1sTmJVWjJkbXBaTkVvclJtZFRjWGhaTHl0aGRtcENWV2QyZDJGVVFsQk5MMWRZY2xSRlkyTTNTak1yYTFWb2IzRlZPUzlOV2poNU1GUmxZemhST0FwclpFMHpUMEUyZGt4R1VIRkVRVXhxYVd0NmRETjZVV3RUYWpOcFdXaDBNU3N3U1ZOMFdrdFZaMHRYVjNOMlRIaEdjVGhGTldONlpVRllZMlZ2TUZWVUNrcExkRnBqVURrNWR6WXdjbEpWT1ROamVtdEhiVGxYVVhGUmRubHhhM2xHTXl0NVJISXJiMUJvVVRCRlMzcFhiRTlPTDNkWk9HSXlRMnRSZG5GRmVrNEtlR0k0WVV0b1RXMVdRa2htT0ZoVWRGVkpVVXBDUzBObVZEQXhNaXRYYUVjNFIyUlRhbEZKUkVGUlFVSkJiMGxDUVVNeVJYYzBVSE5qYkdsR2JUVlBNQXBWUjNaU2JIcFNSMFIwWkM5alEybzVhMGszTUZsREszZDFRV016Y0dGSVNGaGpUVEo1WWxwa1dIbEJiMHBNZFhKTWFuRmFRVnBZVFVaUlQyVlhiVUp4Q2taSk0xZDRZVVJxWm14UFpWVk5jbUZvWTFBMGIxRnJUa1ZqYkhwdVdGVjVWRTlZUldSWVdYVm9NV2htYXpKSVZXdzBNamQ2ZWpjMGJXTjRSMmROTTFJS1FWVnJaMkZyY0doWksyZG1OamhvTTJ4VE1HZGpWblJ0T0RocVkydEtlSFF5TmpOaUwxb3hlbkkwU0hoM2VEVTNXRll6TlRKekswNVpMM1ZXYTNkYWFBcHBhRkp2TmtkNU9FRlBUekZHYW5ndk1WbDFZM00yU2pOSFJqQkVWR1pxUTBZeVpqVm9MMjVRWWxSWlUxZHBkR1k1VDFoS1VqSTRkMFlyVG1abmQzVlhDbkJGYjJJeWFETjVSRFJqSzJoWFNVVkxjbXQzVG1WU1JuQTNWa3hFU25oVU5VbHBkV0pWY1ZaelZVSmtaRmxYV2pCQlQzQnpRMVkxV0haVlUyNWpkRlFLYkhoS2RUUnRNRU5uV1VWQk4xWlFiMXBMTDNWMWQyc3dia2R4UW5ZMk5VWnVRVGRuZFd0blVVZDBSRkpYTVV3eWVXODJVSEptZWtOQldIbEpNV1lyU3dwbWExRTVlVU42V1VGU1MzTXJja1JSUTJSeldIbFVTRmx5YVV4elVDOWpSbFF5ZDFwa1ltcGFlbTVPTDFOd01Wb3JSblpPTUVrclRFUmhibGxPVUhveENscDFLMU5sZW5Bdk0zSlRlbVJMVjAxa2JsZzJNa3REVW14M2VWSkpaa2RJV0hsNGFqWk1jR3N6U2tGMFluQlBTRTB2TUV4Wk1qaERaMWxGUVRaV01EWUtVMHh4V1dKd1JETkVaMlZtVlVSa09GRXZlRWxLY21WSmNUZG5TUzlKY205MU1HWlBjMHg0WmtWc1owTndjRVkwUTNaRFRrUXZWVFZ3YzFwMlRVTTBPQXB4ZUZkMk1qZFhUMFo2VlZVMU4xZE5aa2RVZWxCMlpVZHJiR0YxWkU0d1UyOTFUeTlyVG1JeGMyUTNUMjVQTm5jMGNIQnhjRU5TUWxCck0ybFFRMVpDQ2xkMk4xaEhZblZCTWpOUVkyWnlOM2hSWTFjd04zRTBUVGszVTNWUU1HUmFjamxSZDA4NFRVTm5XVVZCYW5WTFEzVjNVVlpTYWxKbWIxbERZVkl5TlVRS05rcFpiMmhPTjFsSE1Yb3pablpWZGsxdWNYTldTVTFzZUhOR1ZXNVJjWGxPYURCa01sVlFkV1JKTjNFMlF5OUdkMUJzVVdzNGFGZ3ZWbVF6VWpObFVRcHJaVmQ1VjIxalJtTjZLMnRPY1dOUWQxQkNPSFJKUjBod1dqRktWak5YYjNobFYyUkhiVmcxUlVoMFdYY3ZWR0kwV1VwamJWVnVjUzlpWTB0T2FGb3hDbVY2TlRsc1IwOU5WVU5NV25nMFdUUXdNM05aTDFNNFEyZFpSVUUxTDFsVFRrTTJPWGs1Um5WelZsSnJVMFZGVHpGVGExVnpkRGx0UXpSS1pqbEdPVVFLU0V3d2QzUjZOVmR3WnpSNlprVjRSMkpYUmxWYWFFNVZTR1pHUzI1cVMyNW1WWFZQVWxNM0wwMVNVa1JXYkhGQllsUnRVRU12ZWxGc0t6bDJZelYzTXdwd1VrRkxNemRoTnlzdlZFUnVVSGR3WlU5VlUzTldkVlZQY0VWRFIzUlVVbFpPYWxKRFRGQXpWSEYxYnpsYVpHOXBaamg1WWt4ck0wUktWbVJUYlhKeENuWkVjVWhSZVRoRFoxbEZRVFJwYkRscVNEZDViazkzTWs5SVVXSkVLMWhqVEhoTFpucHFXblJZY1RORVEybFlUbWc1S3poTGQxYzFXSGxFWTIxb0wzSUtVREpyVTJ0MlEzWkZSR1pDTjNCQ1VHRmpMMEZ3YTBoR2FUWjBjMU5NWVdaaWVqRldWazltVjB4MmQyVlZjVVp1WlhwMU5ucFhSREJ4YkZBd01qZFZOUXA2VmpSSmFtdG9XbU5UUkRONE4zSk1TSFkyTTNoelRqQk9WU3N2UlZwcGJFODNWbFpoTTFKWGNtODFPQ3RNU2k4MVUyWlBiRXMwUFFvdExTMHRMVVZPUkNCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRPT0=
  jwt.trust.pem: 
  server.cert.pem: TFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVZHhSRU5EUWtwRFowRjNTVUpCWjBsRFJVRkJkMFJSV1VwTGIxcEphSFpqVGtGUlJVeENVVUYzWjJOQmVFTjZRVXBDWjA1V1FrRlpWRUZzVmxRS1RWSkZkMFIzV1VSV1VWRkpSRUZvVjJGWVNtNWhWelZ3V1ZSRmEwMURTVWRCTVZWRlEyZDNZbEpIVm1waFdFSnZXbGhKWjFaSFZtcGhSelYyWWtjNWJncGxVMEpVWkVoV2EyRlhPWHBOVWxGM1JXZFpSRlpSVVV4RVFYUkdZbTFrY0dKdFZteGpiV3gxV25wRk1rMUVVVWRCTVZWRlFYZDNkRkpIVm1waFdFSnZDbHBZU1dkUk1sWjVaRWRzYldGWFRtaGtSMVZuVVZoV01HRkhPWGxoV0ZJMVNVTm9TbUp1VW14amJURnNXa2RzYUdSSFZYQk5VMjkzUzBGWlNrdHZXa2tLYUhaalRrRlJhMEpHYUhSc1ltMWtjR0p0Vm14amJXeDFXakJDYTFwWFRuQmpSMmhzWTIwMWRtUjVOV3BpTWpCM1NHaGpUazFVYTNkTmFrbDZUVlJaTUFwTlJFRXhWMmhqVGsxcWEzZE5ha2wzVFZSWk1FMUVRVEZYYWtOQ2JXcEZiazFEVlVkQk1WVkZRWGQzWlV0cE5XNWpiVlkxWWxkR01HUkhWbmxNYms0eUNsbDVOV3BpU0ZaNlpFZFdlVXh0ZUhaWk1rWnpUVkpSZDBWbldVUldVVkZNUkVGMFJtSnRaSEJpYlZac1kyMXNkVnA2Uld0TlEwbEhRVEZWUlVObmQySUtVa2RXYW1GWVFtOWFXRWxuVmtkV2FtRkhOWFppUnpsdVpWTkNWR1JJVm10aFZ6bDZUVkpOZDBWUldVUldVVkZJUkVGd1FtSkhWalJaVnpWclkyMXNhQXBOVWtWM1JIZFpSRlpSVVVsRVFXaFhZVmhLYm1GWE5YQlpWRVZNVFVGclIwRXhWVVZDYUUxRFZsWk5kMmRuUldsTlFUQkhRMU54UjFOSllqTkVVVVZDQ2tGUlZVRkJORWxDUkhkQmQyZG5SVXRCYjBsQ1FWRkVXVlk0ZDBobUwwTnNWRzV3ZVVKM1ZXeEtiSFJZUVV3MmJ6UkpMM1JwYlRsTGJVWlZkVU50TWpRS2JEQnRhbWh0ZVc0dlltTlFSVFppUkRkVk1YVTNWMjQ0YVVack9YQnRSakp2TDJnMlFsZGliMUJtS3pjeVUxWXpiMU42U1daeVVHWlBTRzQwVGtaV1RRcDFSamxsUjNGc2RVbDVXVmNySzA1cVoyNDBWMEpMY2tacUx6VnhLMDFHVTBNdlFuQk5SVGg2T1ZwbGRFMVNlSHB6Ym1ZMlVsTkhhWEJVTXpoNGJucE1DbEpPTlhwNFJIbFNNSHBqTkVSeE9ITlZLMjlOUVhWUFMxUlBNMlpPUTFKTFVHVkthVWN6V0RkUmFFc3hhM0JUUVhCYVlYazRka1ZYY25kVWJIcE9ORUlLWkhnMmFsSlNUV3R4TVd4M0x6TXpSSEpUZEVaVU0yUjZUMUZoWWpGYVEzQkRMMHR4VkVsWVpqZEpUM1kyWnl0R1JGRlJjazVoVlRRekwwSnFlSFpaU3dwU1F5dHZWRTB6Um5aNGIzRkZlVnBWUldRdmVHUlBNVkZvUVd0RmIwbzVVRlJZWWpWaFJXSjNXakZMVGtGblRVSkJRVWRxWjJkSVQwMUpTVUo1YWtGS0NrSm5UbFpJVWsxRlFXcEJRVTFDUlVkRFYwTkhVMEZIUnl0RlNVSkJVVkZGUVhkSlIzZEVRWHBDWjJ4bmFHdG5RbWgyYUVOQlVUQkZTbWhaYTFRelFtd0tZbXhPVkZSRFFraGFWelZzWTIxR01GcFhVV2RWTWxaNVpHMVdlVWxGVG14amJsSndXbTFzYWxsWVVteE5RakJIUVRGVlpFUm5VVmRDUWxKMlZUa3JkQW8yVlhWM1VYZzRSbXh4VHk5SlpsTTNaR0ZOTmpGNlEwSXJkMWxFVmxJd2FrSkpTSHBOU1VoM1owSlNjMFJaYWpKc2JGRnVkRzV3WWtaa09VNUdOWGxuQ2t0NWNDdGtZVWRDTURaVFFqQkVRMEo2VkVWTVRVRnJSMEV4VlVWQ2FFMURWbFpOZUVWVVFWQkNaMDVXUWtGblRVTkdXbkJqYldSd1ltMXNhRTFTVFhjS1JWRlpSRlpSVVVoRVFYQkNZa2RXTkZsWE5XdGpiV3hvVFZOUmQwbG5XVVJXVVZGTFJFSjBSVnBYVG5CalIyaHNZMmxDVlZwWFRtOWliVGx6WWpKa05RcEpSazR3WkZkU2NHSXpUWGhHUkVGVFFtZE9Wa0pCYzAxRE1GWjFXakpzZFZwWFZubGhWelZ1VFZNMGQweEJXVVJXVVZGRVJFTldSVnBYVG5CalIyaHNDbU5wUWtSYVdFb3dZVmRhY0ZreVJqQmFVMEpDWkZoU2IySXpTbkJrU0d0blMwWktkbUl6VVhCTlUyOTNTMEZaU2t0dldrbG9kbU5PUVZGclFrWm9kR3dLWW0xa2NHSnRWbXhqYld4MVdqQkNhMXBYVG5CalIyaHNZMjAxZG1SNU5XcGlNakpEUVdoQlFVMUJORWRCTVZWa1JIZEZRaTkzVVVWQmQwbEdiMFJCWkFwQ1owNVdTRk5WUlVacVFWVkNaMmR5UW1kRlJrSlJZMFJCWjFsSlMzZFpRa0pSVlVoQmQwVjNTMUZaUkZaU01GSkNRMGwzU1VsSlpVdHBOVzVqYlZZMUNtSlhSakJrUjFaNVRHNU9NbGw1TldwaVNGWjZaRWRXZVV4dGVIWlpNa1p6VFVFd1IwTlRjVWRUU1dJelJGRkZRa04zVlVGQk5FbERRVkZFUjB4VFkwc0taRUZzTkd0dlJHZEtNRlZwVVdOSFREaHNTa2x6Y1RseFVtYzBlWGc0Y1dGalZVWk1lQ3QzZW1SWk5rTktTMUYxTVc1TlJHZGhTemRqYzBoWWJXeEpXQXA2YTBsTlQzUndObkIyTDNBeVZWRkNjWFZpYzJKWWJrdHNSM0ZaZERsRVUwSlFUM0FyTHpCMEwwTmthbFZYTTBwbk1FMU5ValU1VG1oTFZFZDZRV3MzQ2xwMU9TdGthMWxvVmxJeWJrMTJTVEV5V0RKSk5GUlpNM015VEVsRFJ6ZHBWMWhUVW1GdlZHSnhZVkJRWWpOUFZVSTVNVzQzY1dGWE0zSmxNVkF4WXpBS09FSnNZVnBLVGs1eE0wZGpiRVJhVGtsNFFsa3lWbWdyYmpOaGRXSjZlVlpFVW04M1MxcEZMeXRZUW1Sa1ZqTmlVamh3YVV4VmFEWTRkVzV1TURCc2VBcEpTR3d3ZEdOelkyNHZlbFU0ZUhscmNHRkpOa2hWUVVoaWVFMTBiMUJYY1dKaFNVSnlLMk5MU1VZMGFYZFRUMFZuVkROcWVrSklhemhxYVd0MGRVTnJDbVZVY1RKRmNra3daR3hzY1hSbE1tczJUMWRSWm1FMWN6QkRXRXB1U1N0WVppOXFlbFY0TDB4dVFUVjZkamh1VjJoT2JERTRibEpUTjNKTFoxWk9abllLWTNsNGRGTkpXR1Y0TVd4SmIzbFVlbXQ0Y0U5MmVFaDNhV1pRV2pGM05FeGljRlJTYzJOV1FYSkRLekp1ZEV0a01Gb3JNVlpzWVRoQ1NVVjZaMWc1U0FwM1lXdFZhMmhTZW5wc1dFUnVSV1pwUlVSdU9HcEdkRzlvVGtkS1ZFdzBVMXB4VmtZd2NsSTVSbVZIZGxscVZsVnVWRFZEVFRObVZtZE9aWFk0TnpOa0NtUlZVMEp4WTB0NlpYSk5OMmxzWldWTU5ETmpaVkprZVVVMmVXeHlUVlZJTW5KRGVEUmtlSGhzV1RaRVlubzVhM3BFZG5ac05EazBka0k0VkRKeWJEY0tXSFZ1UTNocUt6QXhWbE5hUWxkNlNFYzBRelpGVG1KTWRHczVRalZOUzNJM09FMUJlWFZOZUVSVFJHWTVlVzU0YkZSRVRFRlBhbUZuU1c1bEwyNVVVQXBtUnpGS0t6TlVXWGs0VFRaa1NUbG5WWGRxUlRKMk9EZDRkRGxxU2xreWJFUnZaa3hvVVQwOUNpMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwPQ==
  server.key.pem: TFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGY0ZGSlFrRkJTME5CVVVWQk1rWm1UVUl6TDNkd1ZUVTJZMmRqUmtwVFdtSldkME1yY1U5RFVEZFpjSFpUY0doV1RHZHdkSFZLWkVwdk5GcHpDbkF2TWpORWVFOXRkeXN4VG1KMU1YQXZTV2hhVUdGYWFHUnhVRFJsWjFadE5rUXpMM1U1YTJ4a05rVnplVWcyZWpONmFEVXJSRkpXVkV4b1psaG9jWEFLWW1sTmJVWjJkbXBaTkVvclJtZFRjWGhaTHl0aGRtcENWV2QyZDJGVVFsQk5MMWRZY2xSRlkyTTNTak1yYTFWb2IzRlZPUzlOV2poNU1GUmxZemhST0FwclpFMHpUMEUyZGt4R1VIRkVRVXhxYVd0NmRETjZVV3RUYWpOcFdXaDBNU3N3U1ZOMFdrdFZaMHRYVjNOMlRIaEdjVGhGTldONlpVRllZMlZ2TUZWVUNrcExkRnBqVURrNWR6WXdjbEpWT1ROamVtdEhiVGxYVVhGUmRubHhhM2xHTXl0NVJISXJiMUJvVVRCRlMzcFhiRTlPTDNkWk9HSXlRMnRSZG5GRmVrNEtlR0k0WVV0b1RXMVdRa2htT0ZoVWRGVkpVVXBDUzBObVZEQXhNaXRYYUVjNFIyUlRhbEZKUkVGUlFVSkJiMGxDUVVNeVJYYzBVSE5qYkdsR2JUVlBNQXBWUjNaU2JIcFNSMFIwWkM5alEybzVhMGszTUZsREszZDFRV016Y0dGSVNGaGpUVEo1WWxwa1dIbEJiMHBNZFhKTWFuRmFRVnBZVFVaUlQyVlhiVUp4Q2taSk0xZDRZVVJxWm14UFpWVk5jbUZvWTFBMGIxRnJUa1ZqYkhwdVdGVjVWRTlZUldSWVdYVm9NV2htYXpKSVZXdzBNamQ2ZWpjMGJXTjRSMmROTTFJS1FWVnJaMkZyY0doWksyZG1OamhvTTJ4VE1HZGpWblJ0T0RocVkydEtlSFF5TmpOaUwxb3hlbkkwU0hoM2VEVTNXRll6TlRKekswNVpMM1ZXYTNkYWFBcHBhRkp2TmtkNU9FRlBUekZHYW5ndk1WbDFZM00yU2pOSFJqQkVWR1pxUTBZeVpqVm9MMjVRWWxSWlUxZHBkR1k1VDFoS1VqSTRkMFlyVG1abmQzVlhDbkJGYjJJeWFETjVSRFJqSzJoWFNVVkxjbXQzVG1WU1JuQTNWa3hFU25oVU5VbHBkV0pWY1ZaelZVSmtaRmxYV2pCQlQzQnpRMVkxV0haVlUyNWpkRlFLYkhoS2RUUnRNRU5uV1VWQk4xWlFiMXBMTDNWMWQyc3dia2R4UW5ZMk5VWnVRVGRuZFd0blVVZDBSRkpYTVV3eWVXODJVSEptZWtOQldIbEpNV1lyU3dwbWExRTVlVU42V1VGU1MzTXJja1JSUTJSeldIbFVTRmx5YVV4elVDOWpSbFF5ZDFwa1ltcGFlbTVPTDFOd01Wb3JSblpPTUVrclRFUmhibGxPVUhveENscDFLMU5sZW5Bdk0zSlRlbVJMVjAxa2JsZzJNa3REVW14M2VWSkpaa2RJV0hsNGFqWk1jR3N6U2tGMFluQlBTRTB2TUV4Wk1qaERaMWxGUVRaV01EWUtVMHh4V1dKd1JETkVaMlZtVlVSa09GRXZlRWxLY21WSmNUZG5TUzlKY205MU1HWlBjMHg0WmtWc1owTndjRVkwUTNaRFRrUXZWVFZ3YzFwMlRVTTBPQXB4ZUZkMk1qZFhUMFo2VlZVMU4xZE5aa2RVZWxCMlpVZHJiR0YxWkU0d1UyOTFUeTlyVG1JeGMyUTNUMjVQTm5jMGNIQnhjRU5TUWxCck0ybFFRMVpDQ2xkMk4xaEhZblZCTWpOUVkyWnlOM2hSWTFjd04zRTBUVGszVTNWUU1HUmFjamxSZDA4NFRVTm5XVVZCYW5WTFEzVjNVVlpTYWxKbWIxbERZVkl5TlVRS05rcFpiMmhPTjFsSE1Yb3pablpWZGsxdWNYTldTVTFzZUhOR1ZXNVJjWGxPYURCa01sVlFkV1JKTjNFMlF5OUdkMUJzVVdzNGFGZ3ZWbVF6VWpObFVRcHJaVmQ1VjIxalJtTjZLMnRPY1dOUWQxQkNPSFJKUjBod1dqRktWak5YYjNobFYyUkhiVmcxUlVoMFdYY3ZWR0kwV1VwamJWVnVjUzlpWTB0T2FGb3hDbVY2TlRsc1IwOU5WVU5NV25nMFdUUXdNM05aTDFNNFEyZFpSVUUxTDFsVFRrTTJPWGs1Um5WelZsSnJVMFZGVHpGVGExVnpkRGx0UXpSS1pqbEdPVVFLU0V3d2QzUjZOVmR3WnpSNlprVjRSMkpYUmxWYWFFNVZTR1pHUzI1cVMyNW1WWFZQVWxNM0wwMVNVa1JXYkhGQllsUnRVRU12ZWxGc0t6bDJZelYzTXdwd1VrRkxNemRoTnlzdlZFUnVVSGR3WlU5VlUzTldkVlZQY0VWRFIzUlVVbFpPYWxKRFRGQXpWSEYxYnpsYVpHOXBaamg1WWt4ck0wUktWbVJUYlhKeENuWkVjVWhSZVRoRFoxbEZRVFJwYkRscVNEZDViazkzTWs5SVVXSkVLMWhqVEhoTFpucHFXblJZY1RORVEybFlUbWc1S3poTGQxYzFXSGxFWTIxb0wzSUtVREpyVTJ0MlEzWkZSR1pDTjNCQ1VHRmpMMEZ3YTBoR2FUWjBjMU5NWVdaaWVqRldWazltVjB4MmQyVlZjVVp1WlhwMU5ucFhSREJ4YkZBd01qZFZOUXA2VmpSSmFtdG9XbU5UUkRONE4zSk1TSFkyTTNoelRqQk9WU3N2UlZwcGJFODNWbFpoTTFKWGNtODFPQ3RNU2k4MVUyWlBiRXMwUFFvdExTMHRMVVZPUkNCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRPT0=
  server.trust.pem: 
---
# Source: greymatter/charts/internal-jwt/templates/redis-password.yaml
apiVersion: v1
kind: Secret
metadata:
  name: internal-redis-password
  labels:
    chart: "internal-jwt-2.0.1"
    release: "gm"
type: Opaque
stringData:
  password: "USCISRedis42!"
---
# Source: greymatter/charts/jwt/templates/jwt-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: jwt-security
  labels:
    chart: "jwt-2.0.1"
    release: "gm"
type: Opaque
data:
  jwt.api_key: ZG05c1kyRnVieTFsY0dsa1pXMXBZeTEwZDJWc1puUm9MWFJoYldGc1pRPT0=
  jwt.key: TFMwdExTMUNSVWRKVGlCRlF5QlFVa2xXUVZSRklFdEZXUzB0TFMwdENrMUpTR05CWjBWQ1FrVkpRa052YnpkbFlXdENTekI1Wlhoek1EQnFlV1JRWlM4MmVsVktZWEpTTW1ObVJrWnBWRmN3V1RWeU5HTkJSSEpIYVdwcWNWTUtUWGhwUjA5TlJHaFJMM1YzU1U1VlFUWjJUbGxhWTBwc05IcG1iWFp3U21sa2NqWm5RbmRaUmtzMFJVVkJRMDlvWjFsclJHZFpXVUZDUVVGUVJtd3pkd3BxT0doTVowTmljVTRyVFc4eGNYRjNSRVphTDBkSVFqUXpiMnBVZWxkTmRVTnljVVpOZGpaeFZrWTFhR1F6Y21GUlptVXZOWGxGUW1FeWNGbHZaM1pRQ2xWSmVqWjBOVFpJYlVkV2JtVnhkMDR2WjBaeVQzSkJPSEp1ZFVwQlVrUlFaRU4xZVVaalNHMWxkU3RGUTAxd0swbFNTMm8zTjAxWFlWSnNVVU54UWs4S1QzVnFTRmxSYkZOUE1HTllTR3BTYUhOV04xWlhkRGd6Y2pJMWVqbFNjVFEzZG1jNGNHaGFSbHBSUFQwS0xTMHRMUzFGVGtRZ1JVTWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRPT0=
  jwt.pub: TFMwdExTMUNSVWRKVGlCUVZVSk1TVU1nUzBWWkxTMHRMUzBLVFVsSFlrMUNRVWRDZVhGSFUwMDBPVUZuUlVkQ1UzVkNRa0ZCYWtFMFIwZEJRVkZCUkhoYVpEaEpMMGxUTkVGdE5tcG1ha3RPWVhGelFYaFhabmhvZHdwbFRqWkpNRGd4YWt4bmNUWm9WRXdyY1d4U1pWbFlaRFl5YTBnemRpdGphRUZYZEhGWFMwbE1lakZEVFN0eVpXVm9OV2hzV2pOeGMwUm1ORUpoZW5GM0NsQkxOVGRwVVVWUmVqTlJjbk5vV0VJMWJuSjJhRUZxUzJacFJWTnZLeXQ2Um0xcldsVkJjV2RVYW5KdmVESkZTbFZxZEVoR2VEUXdXV0pHWlRGV2NtWUtUalk1ZFdNdlZXRjFUemMwVUV0WlYxSlhWVDBLTFMwdExTMUZUa1FnVUZWQ1RFbERJRXRGV1MwdExTMHQ=
---
# Source: greymatter/charts/jwt/templates/jwt-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: jwt-certs
  labels:
    chart: "jwt-2.0.1"
    release: "gm"
type: Opaque
data:
  jwt.cert.pem: TFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVZHhSRU5EUWtwRFowRjNTVUpCWjBsRFJVRkJkMFJSV1VwTGIxcEphSFpqVGtGUlJVeENVVUYzWjJOQmVFTjZRVXBDWjA1V1FrRlpWRUZzVmxRS1RWSkZkMFIzV1VSV1VWRkpSRUZvVjJGWVNtNWhWelZ3V1ZSRmEwMURTVWRCTVZWRlEyZDNZbEpIVm1waFdFSnZXbGhKWjFaSFZtcGhSelYyWWtjNWJncGxVMEpVWkVoV2EyRlhPWHBOVWxGM1JXZFpSRlpSVVV4RVFYUkdZbTFrY0dKdFZteGpiV3gxV25wRk1rMUVVVWRCTVZWRlFYZDNkRkpIVm1waFdFSnZDbHBZU1dkUk1sWjVaRWRzYldGWFRtaGtSMVZuVVZoV01HRkhPWGxoV0ZJMVNVTm9TbUp1VW14amJURnNXa2RzYUdSSFZYQk5VMjkzUzBGWlNrdHZXa2tLYUhaalRrRlJhMEpHYUhSc1ltMWtjR0p0Vm14amJXeDFXakJDYTFwWFRuQmpSMmhzWTIwMWRtUjVOV3BpTWpCM1NHaGpUazFVYTNkTmFrbDZUVlJaTUFwTlJFRXhWMmhqVGsxcWEzZE5ha2wzVFZSWk1FMUVRVEZYYWtOQ2JXcEZiazFEVlVkQk1WVkZRWGQzWlV0cE5XNWpiVlkxWWxkR01HUkhWbmxNYms0eUNsbDVOV3BpU0ZaNlpFZFdlVXh0ZUhaWk1rWnpUVkpSZDBWbldVUldVVkZNUkVGMFJtSnRaSEJpYlZac1kyMXNkVnA2Uld0TlEwbEhRVEZWUlVObmQySUtVa2RXYW1GWVFtOWFXRWxuVmtkV2FtRkhOWFppUnpsdVpWTkNWR1JJVm10aFZ6bDZUVkpOZDBWUldVUldVVkZJUkVGd1FtSkhWalJaVnpWclkyMXNhQXBOVWtWM1JIZFpSRlpSVVVsRVFXaFhZVmhLYm1GWE5YQlpWRVZNVFVGclIwRXhWVVZDYUUxRFZsWk5kMmRuUldsTlFUQkhRMU54UjFOSllqTkVVVVZDQ2tGUlZVRkJORWxDUkhkQmQyZG5SVXRCYjBsQ1FWRkVXVlk0ZDBobUwwTnNWRzV3ZVVKM1ZXeEtiSFJZUVV3MmJ6UkpMM1JwYlRsTGJVWlZkVU50TWpRS2JEQnRhbWh0ZVc0dlltTlFSVFppUkRkVk1YVTNWMjQ0YVVack9YQnRSakp2TDJnMlFsZGliMUJtS3pjeVUxWXpiMU42U1daeVVHWlBTRzQwVGtaV1RRcDFSamxsUjNGc2RVbDVXVmNySzA1cVoyNDBWMEpMY2tacUx6VnhLMDFHVTBNdlFuQk5SVGg2T1ZwbGRFMVNlSHB6Ym1ZMlVsTkhhWEJVTXpoNGJucE1DbEpPTlhwNFJIbFNNSHBqTkVSeE9ITlZLMjlOUVhWUFMxUlBNMlpPUTFKTFVHVkthVWN6V0RkUmFFc3hhM0JUUVhCYVlYazRka1ZYY25kVWJIcE9ORUlLWkhnMmFsSlNUV3R4TVd4M0x6TXpSSEpUZEVaVU0yUjZUMUZoWWpGYVEzQkRMMHR4VkVsWVpqZEpUM1kyWnl0R1JGRlJjazVoVlRRekwwSnFlSFpaU3dwU1F5dHZWRTB6Um5aNGIzRkZlVnBWUldRdmVHUlBNVkZvUVd0RmIwbzVVRlJZWWpWaFJXSjNXakZMVGtGblRVSkJRVWRxWjJkSVQwMUpTVUo1YWtGS0NrSm5UbFpJVWsxRlFXcEJRVTFDUlVkRFYwTkhVMEZIUnl0RlNVSkJVVkZGUVhkSlIzZEVRWHBDWjJ4bmFHdG5RbWgyYUVOQlVUQkZTbWhaYTFRelFtd0tZbXhPVkZSRFFraGFWelZzWTIxR01GcFhVV2RWTWxaNVpHMVdlVWxGVG14amJsSndXbTFzYWxsWVVteE5RakJIUVRGVlpFUm5VVmRDUWxKMlZUa3JkQW8yVlhWM1VYZzRSbXh4VHk5SlpsTTNaR0ZOTmpGNlEwSXJkMWxFVmxJd2FrSkpTSHBOU1VoM1owSlNjMFJaYWpKc2JGRnVkRzV3WWtaa09VNUdOWGxuQ2t0NWNDdGtZVWRDTURaVFFqQkVRMEo2VkVWTVRVRnJSMEV4VlVWQ2FFMURWbFpOZUVWVVFWQkNaMDVXUWtGblRVTkdXbkJqYldSd1ltMXNhRTFTVFhjS1JWRlpSRlpSVVVoRVFYQkNZa2RXTkZsWE5XdGpiV3hvVFZOUmQwbG5XVVJXVVZGTFJFSjBSVnBYVG5CalIyaHNZMmxDVlZwWFRtOWliVGx6WWpKa05RcEpSazR3WkZkU2NHSXpUWGhHUkVGVFFtZE9Wa0pCYzAxRE1GWjFXakpzZFZwWFZubGhWelZ1VFZNMGQweEJXVVJXVVZGRVJFTldSVnBYVG5CalIyaHNDbU5wUWtSYVdFb3dZVmRhY0ZreVJqQmFVMEpDWkZoU2IySXpTbkJrU0d0blMwWktkbUl6VVhCTlUyOTNTMEZaU2t0dldrbG9kbU5PUVZGclFrWm9kR3dLWW0xa2NHSnRWbXhqYld4MVdqQkNhMXBYVG5CalIyaHNZMjAxZG1SNU5XcGlNakpEUVdoQlFVMUJORWRCTVZWa1JIZEZRaTkzVVVWQmQwbEdiMFJCWkFwQ1owNVdTRk5WUlVacVFWVkNaMmR5UW1kRlJrSlJZMFJCWjFsSlMzZFpRa0pSVlVoQmQwVjNTMUZaUkZaU01GSkNRMGwzU1VsSlpVdHBOVzVqYlZZMUNtSlhSakJrUjFaNVRHNU9NbGw1TldwaVNGWjZaRWRXZVV4dGVIWlpNa1p6VFVFd1IwTlRjVWRUU1dJelJGRkZRa04zVlVGQk5FbERRVkZFUjB4VFkwc0taRUZzTkd0dlJHZEtNRlZwVVdOSFREaHNTa2x6Y1RseFVtYzBlWGc0Y1dGalZVWk1lQ3QzZW1SWk5rTktTMUYxTVc1TlJHZGhTemRqYzBoWWJXeEpXQXA2YTBsTlQzUndObkIyTDNBeVZWRkNjWFZpYzJKWWJrdHNSM0ZaZERsRVUwSlFUM0FyTHpCMEwwTmthbFZYTTBwbk1FMU5ValU1VG1oTFZFZDZRV3MzQ2xwMU9TdGthMWxvVmxJeWJrMTJTVEV5V0RKSk5GUlpNM015VEVsRFJ6ZHBWMWhUVW1GdlZHSnhZVkJRWWpOUFZVSTVNVzQzY1dGWE0zSmxNVkF4WXpBS09FSnNZVnBLVGs1eE0wZGpiRVJhVGtsNFFsa3lWbWdyYmpOaGRXSjZlVlpFVW04M1MxcEZMeXRZUW1Sa1ZqTmlVamh3YVV4VmFEWTRkVzV1TURCc2VBcEpTR3d3ZEdOelkyNHZlbFU0ZUhscmNHRkpOa2hWUVVoaWVFMTBiMUJYY1dKaFNVSnlLMk5MU1VZMGFYZFRUMFZuVkROcWVrSklhemhxYVd0MGRVTnJDbVZVY1RKRmNra3daR3hzY1hSbE1tczJUMWRSWm1FMWN6QkRXRXB1U1N0WVppOXFlbFY0TDB4dVFUVjZkamh1VjJoT2JERTRibEpUTjNKTFoxWk9abllLWTNsNGRGTkpXR1Y0TVd4SmIzbFVlbXQ0Y0U5MmVFaDNhV1pRV2pGM05FeGljRlJTYzJOV1FYSkRLekp1ZEV0a01Gb3JNVlpzWVRoQ1NVVjZaMWc1U0FwM1lXdFZhMmhTZW5wc1dFUnVSV1pwUlVSdU9HcEdkRzlvVGtkS1ZFdzBVMXB4VmtZd2NsSTVSbVZIZGxscVZsVnVWRFZEVFRObVZtZE9aWFk0TnpOa0NtUlZVMEp4WTB0NlpYSk5OMmxzWldWTU5ETmpaVkprZVVVMmVXeHlUVlZJTW5KRGVEUmtlSGhzV1RaRVlubzVhM3BFZG5ac05EazBka0k0VkRKeWJEY0tXSFZ1UTNocUt6QXhWbE5hUWxkNlNFYzBRelpGVG1KTWRHczVRalZOUzNJM09FMUJlWFZOZUVSVFJHWTVlVzU0YkZSRVRFRlBhbUZuU1c1bEwyNVVVQXBtUnpGS0t6TlVXWGs0VFRaa1NUbG5WWGRxUlRKMk9EZDRkRGxxU2xreWJFUnZaa3hvVVQwOUNpMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwPQ==
  jwt.key.pem: TFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGY0ZGSlFrRkJTME5CVVVWQk1rWm1UVUl6TDNkd1ZUVTJZMmRqUmtwVFdtSldkME1yY1U5RFVEZFpjSFpUY0doV1RHZHdkSFZLWkVwdk5GcHpDbkF2TWpORWVFOXRkeXN4VG1KMU1YQXZTV2hhVUdGYWFHUnhVRFJsWjFadE5rUXpMM1U1YTJ4a05rVnplVWcyZWpONmFEVXJSRkpXVkV4b1psaG9jWEFLWW1sTmJVWjJkbXBaTkVvclJtZFRjWGhaTHl0aGRtcENWV2QyZDJGVVFsQk5MMWRZY2xSRlkyTTNTak1yYTFWb2IzRlZPUzlOV2poNU1GUmxZemhST0FwclpFMHpUMEUyZGt4R1VIRkVRVXhxYVd0NmRETjZVV3RUYWpOcFdXaDBNU3N3U1ZOMFdrdFZaMHRYVjNOMlRIaEdjVGhGTldONlpVRllZMlZ2TUZWVUNrcExkRnBqVURrNWR6WXdjbEpWT1ROamVtdEhiVGxYVVhGUmRubHhhM2xHTXl0NVJISXJiMUJvVVRCRlMzcFhiRTlPTDNkWk9HSXlRMnRSZG5GRmVrNEtlR0k0WVV0b1RXMVdRa2htT0ZoVWRGVkpVVXBDUzBObVZEQXhNaXRYYUVjNFIyUlRhbEZKUkVGUlFVSkJiMGxDUVVNeVJYYzBVSE5qYkdsR2JUVlBNQXBWUjNaU2JIcFNSMFIwWkM5alEybzVhMGszTUZsREszZDFRV016Y0dGSVNGaGpUVEo1WWxwa1dIbEJiMHBNZFhKTWFuRmFRVnBZVFVaUlQyVlhiVUp4Q2taSk0xZDRZVVJxWm14UFpWVk5jbUZvWTFBMGIxRnJUa1ZqYkhwdVdGVjVWRTlZUldSWVdYVm9NV2htYXpKSVZXdzBNamQ2ZWpjMGJXTjRSMmROTTFJS1FWVnJaMkZyY0doWksyZG1OamhvTTJ4VE1HZGpWblJ0T0RocVkydEtlSFF5TmpOaUwxb3hlbkkwU0hoM2VEVTNXRll6TlRKekswNVpMM1ZXYTNkYWFBcHBhRkp2TmtkNU9FRlBUekZHYW5ndk1WbDFZM00yU2pOSFJqQkVWR1pxUTBZeVpqVm9MMjVRWWxSWlUxZHBkR1k1VDFoS1VqSTRkMFlyVG1abmQzVlhDbkJGYjJJeWFETjVSRFJqSzJoWFNVVkxjbXQzVG1WU1JuQTNWa3hFU25oVU5VbHBkV0pWY1ZaelZVSmtaRmxYV2pCQlQzQnpRMVkxV0haVlUyNWpkRlFLYkhoS2RUUnRNRU5uV1VWQk4xWlFiMXBMTDNWMWQyc3dia2R4UW5ZMk5VWnVRVGRuZFd0blVVZDBSRkpYTVV3eWVXODJVSEptZWtOQldIbEpNV1lyU3dwbWExRTVlVU42V1VGU1MzTXJja1JSUTJSeldIbFVTRmx5YVV4elVDOWpSbFF5ZDFwa1ltcGFlbTVPTDFOd01Wb3JSblpPTUVrclRFUmhibGxPVUhveENscDFLMU5sZW5Bdk0zSlRlbVJMVjAxa2JsZzJNa3REVW14M2VWSkpaa2RJV0hsNGFqWk1jR3N6U2tGMFluQlBTRTB2TUV4Wk1qaERaMWxGUVRaV01EWUtVMHh4V1dKd1JETkVaMlZtVlVSa09GRXZlRWxLY21WSmNUZG5TUzlKY205MU1HWlBjMHg0WmtWc1owTndjRVkwUTNaRFRrUXZWVFZ3YzFwMlRVTTBPQXB4ZUZkMk1qZFhUMFo2VlZVMU4xZE5aa2RVZWxCMlpVZHJiR0YxWkU0d1UyOTFUeTlyVG1JeGMyUTNUMjVQTm5jMGNIQnhjRU5TUWxCck0ybFFRMVpDQ2xkMk4xaEhZblZCTWpOUVkyWnlOM2hSWTFjd04zRTBUVGszVTNWUU1HUmFjamxSZDA4NFRVTm5XVVZCYW5WTFEzVjNVVlpTYWxKbWIxbERZVkl5TlVRS05rcFpiMmhPTjFsSE1Yb3pablpWZGsxdWNYTldTVTFzZUhOR1ZXNVJjWGxPYURCa01sVlFkV1JKTjNFMlF5OUdkMUJzVVdzNGFGZ3ZWbVF6VWpObFVRcHJaVmQ1VjIxalJtTjZLMnRPY1dOUWQxQkNPSFJKUjBod1dqRktWak5YYjNobFYyUkhiVmcxUlVoMFdYY3ZWR0kwV1VwamJWVnVjUzlpWTB0T2FGb3hDbVY2TlRsc1IwOU5WVU5NV25nMFdUUXdNM05aTDFNNFEyZFpSVUUxTDFsVFRrTTJPWGs1Um5WelZsSnJVMFZGVHpGVGExVnpkRGx0UXpSS1pqbEdPVVFLU0V3d2QzUjZOVmR3WnpSNlprVjRSMkpYUmxWYWFFNVZTR1pHUzI1cVMyNW1WWFZQVWxNM0wwMVNVa1JXYkhGQllsUnRVRU12ZWxGc0t6bDJZelYzTXdwd1VrRkxNemRoTnlzdlZFUnVVSGR3WlU5VlUzTldkVlZQY0VWRFIzUlVVbFpPYWxKRFRGQXpWSEYxYnpsYVpHOXBaamg1WWt4ck0wUktWbVJUYlhKeENuWkVjVWhSZVRoRFoxbEZRVFJwYkRscVNEZDViazkzTWs5SVVXSkVLMWhqVEhoTFpucHFXblJZY1RORVEybFlUbWc1S3poTGQxYzFXSGxFWTIxb0wzSUtVREpyVTJ0MlEzWkZSR1pDTjNCQ1VHRmpMMEZ3YTBoR2FUWjBjMU5NWVdaaWVqRldWazltVjB4MmQyVlZjVVp1WlhwMU5ucFhSREJ4YkZBd01qZFZOUXA2VmpSSmFtdG9XbU5UUkRONE4zSk1TSFkyTTNoelRqQk9WU3N2UlZwcGJFODNWbFpoTTFKWGNtODFPQ3RNU2k4MVUyWlBiRXMwUFFvdExTMHRMVVZPUkNCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRPT0=
  jwt.trust.pem: 
  server.cert.pem: TFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVZHhSRU5EUWtwRFowRjNTVUpCWjBsRFJVRkJkMFJSV1VwTGIxcEphSFpqVGtGUlJVeENVVUYzWjJOQmVFTjZRVXBDWjA1V1FrRlpWRUZzVmxRS1RWSkZkMFIzV1VSV1VWRkpSRUZvVjJGWVNtNWhWelZ3V1ZSRmEwMURTVWRCTVZWRlEyZDNZbEpIVm1waFdFSnZXbGhKWjFaSFZtcGhSelYyWWtjNWJncGxVMEpVWkVoV2EyRlhPWHBOVWxGM1JXZFpSRlpSVVV4RVFYUkdZbTFrY0dKdFZteGpiV3gxV25wRk1rMUVVVWRCTVZWRlFYZDNkRkpIVm1waFdFSnZDbHBZU1dkUk1sWjVaRWRzYldGWFRtaGtSMVZuVVZoV01HRkhPWGxoV0ZJMVNVTm9TbUp1VW14amJURnNXa2RzYUdSSFZYQk5VMjkzUzBGWlNrdHZXa2tLYUhaalRrRlJhMEpHYUhSc1ltMWtjR0p0Vm14amJXeDFXakJDYTFwWFRuQmpSMmhzWTIwMWRtUjVOV3BpTWpCM1NHaGpUazFVYTNkTmFrbDZUVlJaTUFwTlJFRXhWMmhqVGsxcWEzZE5ha2wzVFZSWk1FMUVRVEZYYWtOQ2JXcEZiazFEVlVkQk1WVkZRWGQzWlV0cE5XNWpiVlkxWWxkR01HUkhWbmxNYms0eUNsbDVOV3BpU0ZaNlpFZFdlVXh0ZUhaWk1rWnpUVkpSZDBWbldVUldVVkZNUkVGMFJtSnRaSEJpYlZac1kyMXNkVnA2Uld0TlEwbEhRVEZWUlVObmQySUtVa2RXYW1GWVFtOWFXRWxuVmtkV2FtRkhOWFppUnpsdVpWTkNWR1JJVm10aFZ6bDZUVkpOZDBWUldVUldVVkZJUkVGd1FtSkhWalJaVnpWclkyMXNhQXBOVWtWM1JIZFpSRlpSVVVsRVFXaFhZVmhLYm1GWE5YQlpWRVZNVFVGclIwRXhWVVZDYUUxRFZsWk5kMmRuUldsTlFUQkhRMU54UjFOSllqTkVVVVZDQ2tGUlZVRkJORWxDUkhkQmQyZG5SVXRCYjBsQ1FWRkVXVlk0ZDBobUwwTnNWRzV3ZVVKM1ZXeEtiSFJZUVV3MmJ6UkpMM1JwYlRsTGJVWlZkVU50TWpRS2JEQnRhbWh0ZVc0dlltTlFSVFppUkRkVk1YVTNWMjQ0YVVack9YQnRSakp2TDJnMlFsZGliMUJtS3pjeVUxWXpiMU42U1daeVVHWlBTRzQwVGtaV1RRcDFSamxsUjNGc2RVbDVXVmNySzA1cVoyNDBWMEpMY2tacUx6VnhLMDFHVTBNdlFuQk5SVGg2T1ZwbGRFMVNlSHB6Ym1ZMlVsTkhhWEJVTXpoNGJucE1DbEpPTlhwNFJIbFNNSHBqTkVSeE9ITlZLMjlOUVhWUFMxUlBNMlpPUTFKTFVHVkthVWN6V0RkUmFFc3hhM0JUUVhCYVlYazRka1ZYY25kVWJIcE9ORUlLWkhnMmFsSlNUV3R4TVd4M0x6TXpSSEpUZEVaVU0yUjZUMUZoWWpGYVEzQkRMMHR4VkVsWVpqZEpUM1kyWnl0R1JGRlJjazVoVlRRekwwSnFlSFpaU3dwU1F5dHZWRTB6Um5aNGIzRkZlVnBWUldRdmVHUlBNVkZvUVd0RmIwbzVVRlJZWWpWaFJXSjNXakZMVGtGblRVSkJRVWRxWjJkSVQwMUpTVUo1YWtGS0NrSm5UbFpJVWsxRlFXcEJRVTFDUlVkRFYwTkhVMEZIUnl0RlNVSkJVVkZGUVhkSlIzZEVRWHBDWjJ4bmFHdG5RbWgyYUVOQlVUQkZTbWhaYTFRelFtd0tZbXhPVkZSRFFraGFWelZzWTIxR01GcFhVV2RWTWxaNVpHMVdlVWxGVG14amJsSndXbTFzYWxsWVVteE5RakJIUVRGVlpFUm5VVmRDUWxKMlZUa3JkQW8yVlhWM1VYZzRSbXh4VHk5SlpsTTNaR0ZOTmpGNlEwSXJkMWxFVmxJd2FrSkpTSHBOU1VoM1owSlNjMFJaYWpKc2JGRnVkRzV3WWtaa09VNUdOWGxuQ2t0NWNDdGtZVWRDTURaVFFqQkVRMEo2VkVWTVRVRnJSMEV4VlVWQ2FFMURWbFpOZUVWVVFWQkNaMDVXUWtGblRVTkdXbkJqYldSd1ltMXNhRTFTVFhjS1JWRlpSRlpSVVVoRVFYQkNZa2RXTkZsWE5XdGpiV3hvVFZOUmQwbG5XVVJXVVZGTFJFSjBSVnBYVG5CalIyaHNZMmxDVlZwWFRtOWliVGx6WWpKa05RcEpSazR3WkZkU2NHSXpUWGhHUkVGVFFtZE9Wa0pCYzAxRE1GWjFXakpzZFZwWFZubGhWelZ1VFZNMGQweEJXVVJXVVZGRVJFTldSVnBYVG5CalIyaHNDbU5wUWtSYVdFb3dZVmRhY0ZreVJqQmFVMEpDWkZoU2IySXpTbkJrU0d0blMwWktkbUl6VVhCTlUyOTNTMEZaU2t0dldrbG9kbU5PUVZGclFrWm9kR3dLWW0xa2NHSnRWbXhqYld4MVdqQkNhMXBYVG5CalIyaHNZMjAxZG1SNU5XcGlNakpEUVdoQlFVMUJORWRCTVZWa1JIZEZRaTkzVVVWQmQwbEdiMFJCWkFwQ1owNVdTRk5WUlVacVFWVkNaMmR5UW1kRlJrSlJZMFJCWjFsSlMzZFpRa0pSVlVoQmQwVjNTMUZaUkZaU01GSkNRMGwzU1VsSlpVdHBOVzVqYlZZMUNtSlhSakJrUjFaNVRHNU9NbGw1TldwaVNGWjZaRWRXZVV4dGVIWlpNa1p6VFVFd1IwTlRjVWRUU1dJelJGRkZRa04zVlVGQk5FbERRVkZFUjB4VFkwc0taRUZzTkd0dlJHZEtNRlZwVVdOSFREaHNTa2x6Y1RseFVtYzBlWGc0Y1dGalZVWk1lQ3QzZW1SWk5rTktTMUYxTVc1TlJHZGhTemRqYzBoWWJXeEpXQXA2YTBsTlQzUndObkIyTDNBeVZWRkNjWFZpYzJKWWJrdHNSM0ZaZERsRVUwSlFUM0FyTHpCMEwwTmthbFZYTTBwbk1FMU5ValU1VG1oTFZFZDZRV3MzQ2xwMU9TdGthMWxvVmxJeWJrMTJTVEV5V0RKSk5GUlpNM015VEVsRFJ6ZHBWMWhUVW1GdlZHSnhZVkJRWWpOUFZVSTVNVzQzY1dGWE0zSmxNVkF4WXpBS09FSnNZVnBLVGs1eE0wZGpiRVJhVGtsNFFsa3lWbWdyYmpOaGRXSjZlVlpFVW04M1MxcEZMeXRZUW1Sa1ZqTmlVamh3YVV4VmFEWTRkVzV1TURCc2VBcEpTR3d3ZEdOelkyNHZlbFU0ZUhscmNHRkpOa2hWUVVoaWVFMTBiMUJYY1dKaFNVSnlLMk5MU1VZMGFYZFRUMFZuVkROcWVrSklhemhxYVd0MGRVTnJDbVZVY1RKRmNra3daR3hzY1hSbE1tczJUMWRSWm1FMWN6QkRXRXB1U1N0WVppOXFlbFY0TDB4dVFUVjZkamh1VjJoT2JERTRibEpUTjNKTFoxWk9abllLWTNsNGRGTkpXR1Y0TVd4SmIzbFVlbXQ0Y0U5MmVFaDNhV1pRV2pGM05FeGljRlJTYzJOV1FYSkRLekp1ZEV0a01Gb3JNVlpzWVRoQ1NVVjZaMWc1U0FwM1lXdFZhMmhTZW5wc1dFUnVSV1pwUlVSdU9HcEdkRzlvVGtkS1ZFdzBVMXB4VmtZd2NsSTVSbVZIZGxscVZsVnVWRFZEVFRObVZtZE9aWFk0TnpOa0NtUlZVMEp4WTB0NlpYSk5OMmxzWldWTU5ETmpaVkprZVVVMmVXeHlUVlZJTW5KRGVEUmtlSGhzV1RaRVlubzVhM3BFZG5ac05EazBka0k0VkRKeWJEY0tXSFZ1UTNocUt6QXhWbE5hUWxkNlNFYzBRelpGVG1KTWRHczVRalZOUzNJM09FMUJlWFZOZUVSVFJHWTVlVzU0YkZSRVRFRlBhbUZuU1c1bEwyNVVVQXBtUnpGS0t6TlVXWGs0VFRaa1NUbG5WWGRxUlRKMk9EZDRkRGxxU2xreWJFUnZaa3hvVVQwOUNpMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwPQ==
  server.key.pem: TFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGY0ZGSlFrRkJTME5CVVVWQk1rWm1UVUl6TDNkd1ZUVTJZMmRqUmtwVFdtSldkME1yY1U5RFVEZFpjSFpUY0doV1RHZHdkSFZLWkVwdk5GcHpDbkF2TWpORWVFOXRkeXN4VG1KMU1YQXZTV2hhVUdGYWFHUnhVRFJsWjFadE5rUXpMM1U1YTJ4a05rVnplVWcyZWpONmFEVXJSRkpXVkV4b1psaG9jWEFLWW1sTmJVWjJkbXBaTkVvclJtZFRjWGhaTHl0aGRtcENWV2QyZDJGVVFsQk5MMWRZY2xSRlkyTTNTak1yYTFWb2IzRlZPUzlOV2poNU1GUmxZemhST0FwclpFMHpUMEUyZGt4R1VIRkVRVXhxYVd0NmRETjZVV3RUYWpOcFdXaDBNU3N3U1ZOMFdrdFZaMHRYVjNOMlRIaEdjVGhGTldONlpVRllZMlZ2TUZWVUNrcExkRnBqVURrNWR6WXdjbEpWT1ROamVtdEhiVGxYVVhGUmRubHhhM2xHTXl0NVJISXJiMUJvVVRCRlMzcFhiRTlPTDNkWk9HSXlRMnRSZG5GRmVrNEtlR0k0WVV0b1RXMVdRa2htT0ZoVWRGVkpVVXBDUzBObVZEQXhNaXRYYUVjNFIyUlRhbEZKUkVGUlFVSkJiMGxDUVVNeVJYYzBVSE5qYkdsR2JUVlBNQXBWUjNaU2JIcFNSMFIwWkM5alEybzVhMGszTUZsREszZDFRV016Y0dGSVNGaGpUVEo1WWxwa1dIbEJiMHBNZFhKTWFuRmFRVnBZVFVaUlQyVlhiVUp4Q2taSk0xZDRZVVJxWm14UFpWVk5jbUZvWTFBMGIxRnJUa1ZqYkhwdVdGVjVWRTlZUldSWVdYVm9NV2htYXpKSVZXdzBNamQ2ZWpjMGJXTjRSMmROTTFJS1FWVnJaMkZyY0doWksyZG1OamhvTTJ4VE1HZGpWblJ0T0RocVkydEtlSFF5TmpOaUwxb3hlbkkwU0hoM2VEVTNXRll6TlRKekswNVpMM1ZXYTNkYWFBcHBhRkp2TmtkNU9FRlBUekZHYW5ndk1WbDFZM00yU2pOSFJqQkVWR1pxUTBZeVpqVm9MMjVRWWxSWlUxZHBkR1k1VDFoS1VqSTRkMFlyVG1abmQzVlhDbkJGYjJJeWFETjVSRFJqSzJoWFNVVkxjbXQzVG1WU1JuQTNWa3hFU25oVU5VbHBkV0pWY1ZaelZVSmtaRmxYV2pCQlQzQnpRMVkxV0haVlUyNWpkRlFLYkhoS2RUUnRNRU5uV1VWQk4xWlFiMXBMTDNWMWQyc3dia2R4UW5ZMk5VWnVRVGRuZFd0blVVZDBSRkpYTVV3eWVXODJVSEptZWtOQldIbEpNV1lyU3dwbWExRTVlVU42V1VGU1MzTXJja1JSUTJSeldIbFVTRmx5YVV4elVDOWpSbFF5ZDFwa1ltcGFlbTVPTDFOd01Wb3JSblpPTUVrclRFUmhibGxPVUhveENscDFLMU5sZW5Bdk0zSlRlbVJMVjAxa2JsZzJNa3REVW14M2VWSkpaa2RJV0hsNGFqWk1jR3N6U2tGMFluQlBTRTB2TUV4Wk1qaERaMWxGUVRaV01EWUtVMHh4V1dKd1JETkVaMlZtVlVSa09GRXZlRWxLY21WSmNUZG5TUzlKY205MU1HWlBjMHg0WmtWc1owTndjRVkwUTNaRFRrUXZWVFZ3YzFwMlRVTTBPQXB4ZUZkMk1qZFhUMFo2VlZVMU4xZE5aa2RVZWxCMlpVZHJiR0YxWkU0d1UyOTFUeTlyVG1JeGMyUTNUMjVQTm5jMGNIQnhjRU5TUWxCck0ybFFRMVpDQ2xkMk4xaEhZblZCTWpOUVkyWnlOM2hSWTFjd04zRTBUVGszVTNWUU1HUmFjamxSZDA4NFRVTm5XVVZCYW5WTFEzVjNVVlpTYWxKbWIxbERZVkl5TlVRS05rcFpiMmhPTjFsSE1Yb3pablpWZGsxdWNYTldTVTFzZUhOR1ZXNVJjWGxPYURCa01sVlFkV1JKTjNFMlF5OUdkMUJzVVdzNGFGZ3ZWbVF6VWpObFVRcHJaVmQ1VjIxalJtTjZLMnRPY1dOUWQxQkNPSFJKUjBod1dqRktWak5YYjNobFYyUkhiVmcxUlVoMFdYY3ZWR0kwV1VwamJWVnVjUzlpWTB0T2FGb3hDbVY2TlRsc1IwOU5WVU5NV25nMFdUUXdNM05aTDFNNFEyZFpSVUUxTDFsVFRrTTJPWGs1Um5WelZsSnJVMFZGVHpGVGExVnpkRGx0UXpSS1pqbEdPVVFLU0V3d2QzUjZOVmR3WnpSNlprVjRSMkpYUmxWYWFFNVZTR1pHUzI1cVMyNW1WWFZQVWxNM0wwMVNVa1JXYkhGQllsUnRVRU12ZWxGc0t6bDJZelYzTXdwd1VrRkxNemRoTnlzdlZFUnVVSGR3WlU5VlUzTldkVlZQY0VWRFIzUlVVbFpPYWxKRFRGQXpWSEYxYnpsYVpHOXBaamg1WWt4ck0wUktWbVJUYlhKeENuWkVjVWhSZVRoRFoxbEZRVFJwYkRscVNEZDViazkzTWs5SVVXSkVLMWhqVEhoTFpucHFXblJZY1RORVEybFlUbWc1S3poTGQxYzFXSGxFWTIxb0wzSUtVREpyVTJ0MlEzWkZSR1pDTjNCQ1VHRmpMMEZ3YTBoR2FUWjBjMU5NWVdaaWVqRldWazltVjB4MmQyVlZjVVp1WlhwMU5ucFhSREJ4YkZBd01qZFZOUXA2VmpSSmFtdG9XbU5UUkRONE4zSk1TSFkyTTNoelRqQk9WU3N2UlZwcGJFODNWbFpoTTFKWGNtODFPQ3RNU2k4MVUyWlBiRXMwUFFvdExTMHRMVVZPUkNCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRPT0=
  server.trust.pem: 
---
# Source: greymatter/charts/jwt/templates/redis-password.yaml
apiVersion: v1
kind: Secret
metadata:
  name: redis-password
  labels:
    chart: "jwt-2.0.1"
    release: "gm"
type: Opaque
stringData:
  password: USCISRedis42!
---
# Source: greymatter/charts/slo/templates/postgres-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgres-ssl-certs
  labels:
    chart: "slo-2.0.4"
    release: "gm"
type: Opaque
data:
  ca.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdjVENDQkZtZ0F3SUJBZ0lDRUFBd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z2MweEN6QUpCZ05WQkFZVEFsVlQKTVJFd0R3WURWUVFJREFoV2FYSm5hVzVwWVRFVE1CRUdBMVVFQnd3S1FXeGxlR0Z1WkhKcFlURWtNQ0lHQTFVRQpDZ3diUkdWamFYQm9aWElnVkdWamFHNXZiRzluZVNCVGRIVmthVzl6TVJRd0VnWURWUVFMREF0RmJtZHBibVZsCmNtbHVaekV1TUN3R0ExVUVBd3dsUkdWamFYQm9aWElnUTJWeWRHbG1hV05oZEdVZ1FYVjBhRzl5YVhSNUlDaFMKYjI5MEtURXFNQ2dHQ1NxR1NJYjNEUUVKQVJZYlpXNW5hVzVsWlhKcGJtZEFaR1ZqYVhCb1pYSnViM2N1WTI5dApNQjRYRFRFM01EZ3dPVEV4TWpNd09Gb1hEVEkzTURnd056RXhNak13T0Zvd2djQXhDekFKQmdOVkJBWVRBbFZUCk1SRXdEd1lEVlFRSURBaFdhWEpuYVc1cFlURWtNQ0lHQTFVRUNnd2JSR1ZqYVhCb1pYSWdWR1ZqYUc1dmJHOW4KZVNCVGRIVmthVzl6TVJRd0VnWURWUVFMREF0RmJtZHBibVZsY21sdVp6RTJNRFFHQTFVRUF3d3RSR1ZqYVhCbwpaWElnUTJWeWRHbG1hV05oZEdVZ1FYVjBhRzl5YVhSNUlDaEpiblJsY20xbFpHbGhkR1VwTVNvd0tBWUpLb1pJCmh2Y05BUWtCRmh0bGJtZHBibVZsY21sdVowQmtaV05wY0dobGNtNXZkeTVqYjIwd2dnSWlNQTBHQ1NxR1NJYjMKRFFFQkFRVUFBNElDRHdBd2dnSUtBb0lDQVFEUGt4YWlVRDN1cVIyQUE1andBYjlnQ2pEK0JyT3JZQm9lbG5SNgp1MjlGUFQ1Y0hlTThiZlZvNnppeHk3cUMybFh6aEs1Z0gvVExXWGVscEV3VStzdzgxb1VielpsQjdaMmx2cGo4CnQ0elhnNHpnSE5QcUFGSk02TDliNzBkTGd1a2hjVU82bm5JaVBQQXBybXRCRHZYYnRCd0RDek9QYU1jQmVFd2kKekVSYTRXeVhZam41USthOExUVExRL09GbUxIRkEyZENHNzhzNmNZUU9mRjkyTDY0MVFkT2hxWFB0cStRd3FBbQpXa1E1M1BlczZySG1qVDBrQzhoRUk1ZkNLRUEzUVhZdDZZdGdYK0tJSGdPWVdJMGcyMndoOTVvaGsrRHVSTC9PCjN6eko5dENqck1QTzJseG1nMEdkcHVxamZSNks4Q0VrNFlxMmRVd1lDN2RmZmdDcld2OXppay9wWGVvU3ZUdjMKWHByTU4yV1dLQlg5bFZDMnFLRmhOWDRkcmlCRlJPMGk1K2JHZE0xZThOaWxVRHFIaWlrd2hhVngyem5iL0UvYgpMQ0N3bGhDMG9BQXhuVloxSjE4azQ2U1RlN2hsZy9ScU0vMTh1eG1oUDlhbjJGa0R0dXlaQnVnYnBXcGdrN2xFCnRwT2Q5MmlDR1lEYzZrOEpzbitwMFVpWmppb0p2L0dtMDRUM3Q5MGRrVnU3RCttd0ZJc0VBYUpqd2VwRVo3a2kKSUJheVdySm1sK0RUNGdoeWFka21zOFVhT2ErWU9ZRVppWTVHekpoRW9kQXQwMU9hblNrelIvRllqTTRTdUdYdwpScnEycDhoVHVVQkJtMXA5aXB2OERMcVBtbFhaMkNuN0J5VFg3VE1zRys3N1I0emtrYTVYRDV0VUxwQWY1eEtvCnF4NE4vUUlEQVFBQm8yWXdaREFkQmdOVkhRNEVGZ1FVYkEySTlwWlVKN1o2V3hYZlRSZWNvQ3NxZm5Vd0h3WUQKVlIwakJCZ3dGb0FVWTVVNEpiOGhDNlNzaW5oMkx6Q0IzdGx5OGJjd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQgpBREFPQmdOVkhROEJBZjhFQkFNQ0FZWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBSE10ZW5zbG5FdXZuVDRnCkpXUjcwRlp2M3dVT09xQXN5eEpkV2o0bzh5TTcvVjN3R0tNeGtSdjdPcWV0cDkyWFlhdWZmU1B4RTNJTm5HTXEKRGRSTVRmMk1HVm52L1c1UEpvdVp3TWhCWDRXNnJqdmw0UUNTbCtRK3dTdCtPaWJOdTJBeGRDZVFLYTY3Y3d2ZgpRZkQ0dWZlV2Z2VVB6YXp3enVKcUU1V0NqTm5NMktzV2JtemNscXVBYlVqS0gwMDE3VUdSWWU4VEhyQ1o1TWRuCkw5WCtaU2U1d1dIV0ltN0pMbjVuZXhlVzY2OGhnY2RJTnJLQlJnN3lnS1dyTy9hTUZubDNjUVhtYk50WEJ0K3kKRTV0b2Y2MTgvSFdKQmpDM2UrZXlJTXFqZ2pFWm14WWZ4d0JUazBYVkVadUEzUHlBR2lnQTE3UTBldjVaeDRpaQoyZkdJWU41eTNMNk9NcmZrY21kdGlob1Fpc3FkK3pLbGd4V0g0WjJLdFYwUkZWVHJlb29OYVNwRlp1NkVlQ1BICjBmZysrVFYvdUdPRWZOYzRzZUVmRmlhTTR1cThtcDVFMVBZT1hYNERMa3ppZ25xcWw5aDh1My8zWkM3bTROb1kKcXBvT3VyUXlZL2RDVUlKdzNLYitEbGNrMU9ac0dRTnZrcGZsSHZDeEN2VHE0OGJFZ2pPK3hrb1lCT0RoWTB3VApncmwxa0ZCWE1OTkFpRmlIbEhhTTZoK01Ldi85Y1JpNjNLWG1oaUVqVVdVVmNkVDlaUlJQSjZxZDVRQUpISitoCk5VN3MxN2FyNS80U2dKeDlCWlNFWXpRUUN6dDRSRXdCeGZyRi9HZEdOaWExd1pjcU1OeWxta0Q4ZkNXQlppVzIKc2Fyc0R6Vnp3dmR1TDFPREl5Y1h4ZS9wWlV4aQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlHZ2pDQ0JHcWdBd0lCQWdJSkFLQmRsUlVuWFhJSk1BMEdDU3FHU0liM0RRRUJDd1VBTUlITk1Rc3dDUVlEClZRUUdFd0pWVXpFUk1BOEdBMVVFQ0F3SVZtbHlaMmx1YVdFeEV6QVJCZ05WQkFjTUNrRnNaWGhoYm1SeWFXRXgKSkRBaUJnTlZCQW9NRzBSbFkybHdhR1Z5SUZSbFkyaHViMnh2WjNrZ1UzUjFaR2x2Y3pFVU1CSUdBMVVFQ3d3TApSVzVuYVc1bFpYSnBibWN4TGpBc0JnTlZCQU1NSlVSbFkybHdhR1Z5SUVObGNuUnBabWxqWVhSbElFRjFkR2h2CmNtbDBlU0FvVW05dmRDa3hLakFvQmdrcWhraUc5dzBCQ1FFV0cyVnVaMmx1WldWeWFXNW5RR1JsWTJsd2FHVnkKYm05M0xtTnZiVEFlRncweE56QTRNRGt4TVRJeU1UbGFGdzB5TnpBNE1EY3hNVEl5TVRsYU1JSE5NUXN3Q1FZRApWUVFHRXdKVlV6RVJNQThHQTFVRUNBd0lWbWx5WjJsdWFXRXhFekFSQmdOVkJBY01Da0ZzWlhoaGJtUnlhV0V4CkpEQWlCZ05WQkFvTUcwUmxZMmx3YUdWeUlGUmxZMmh1YjJ4dloza2dVM1IxWkdsdmN6RVVNQklHQTFVRUN3d0wKUlc1bmFXNWxaWEpwYm1jeExqQXNCZ05WQkFNTUpVUmxZMmx3YUdWeUlFTmxjblJwWm1sallYUmxJRUYxZEdodgpjbWwwZVNBb1VtOXZkQ2t4S2pBb0Jna3Foa2lHOXcwQkNRRVdHMlZ1WjJsdVpXVnlhVzVuUUdSbFkybHdhR1Z5CmJtOTNMbU52YlRDQ0FpSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBTERvMDh6UmJzc2kKdnJnSXlDaUUzeDV0dEhEY0VzT3MzRWFaYUUzaEhwWEs1YW41aVhUOC90bDM1QkRBV2wxSjZDSmttNGlwMENoNQpqT3FyazVwZVFKS3VONzMxR2xhZnpvYWJ3SGNxeUQ2Q3ZKWkFOcmU2NHMwSjJDVFpwb2IyZ1dNMDZDNzV1d3pLCjVXNEpmaXZTekJwSHU4QStGSkFSbVpwblFvRkRSSVBXUUZrOXEyMkNQSVd0bFVkcmt3VmRuSGxWKytoUktLQlUKcXdBeVhqNlVVbnJ2d1dORVIwQzB3a3NvSmYrNW9QL0hMeXF6VWNkNnlQbU9pQWU4UWhSOGpMZHQvSzhlMTRHSQo3WGhBeXRLeEkycUhxelVtaTJUNTdsSXp6ODNmRzRDbW81OW1JRjRqTHZIZmpDNDh6ejlkQ29PYkNLL1FjY3pYCmxpcHhtVG05SG9jRFdDQ28wTDAzNWFydld4UmtQOGVjNzVDRTIwUThScVVZOWpRbzRhNjRSeWRiQWFiQ3c4czAKYjBtU29IYlJ2cFpDeDk2S2hDRzdFa2pDb3JXcnZoOWR4WkFlbklaREFibjNzWDlRR2M2QStCNU1ZYnY3MFVLbwo4UkQySU9Ec3Z1Q1NubjFyRVFwR2IwZDZoTlNSZUROMmNZTG5TZXVvTVVseFQvU1JDTkJpekdPV3hKdUZMMUNyCjVZbk55VXYzdENFWEt4RU05T29SSHV0eWRtZWc4ZlRiVHU4aEFsR2lZaGdxZWhta0FwUzI1cUNsNHNWejNGVWoKL3kyeWZRYmVjbGl1L1lkUFZ6aVJHc0xPVEdoUWxkQlNJYVZkTUdBL211enhWdE9KZExCdUsvcUsvZ3ZXN04ycwp2WlFUSFp6K0IxMERseHM5UzJOaGY3Rlg3cE1MTTloWEFnTUJBQUdqWXpCaE1CMEdBMVVkRGdRV0JCUmpsVGdsCnZ5RUxwS3lLZUhZdk1JSGUyWEx4dHpBZkJnTlZIU01FR0RBV2dCUmpsVGdsdnlFTHBLeUtlSFl2TUlIZTJYTHgKdHpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUE0R0ExVWREd0VCL3dRRUF3SUJoakFOQmdrcWhraUc5dzBCQVFzRgpBQU9DQWdFQWNCNHo0QUxSWCtzMUZiMWoyc1dMbzY1akl5eG0wT0IyUlRsaHN0ZDQremQrekZqTGc3WEUwTzVqCklsbTNiYXNWbExNMm1UbWk1Q0M0bXZPQmliU2I2TmxKcjM0R21LYmZ3WVZMajN0cG5sbkEvSEdHekhZM3VvWDYKekJVU0lZUkgxMGsyYm1wTTQzOGZYdHo5UCtrSEFrbXNWajJZazh1TGcrdFpEWkVkTThxaVdiYUlaYSthd0h3TApEQmhkMWRRN1p5ZWpWSkxLR3lZd2Q3ZE1ZTHEwNEY0QXFhd1BwMmtzbWNVdGt0VTJRK3VHbUpCa3FnQnpVVEMrCjY0eVBLQmJQYTJXRkZEVnRxdDByNnFEMk43RkQ2djBiMFBpQmVydXZocFN2YTF5dkUwdk1OZmE5a2M4RXhyS3oKN0dNTUdzdjNUSU9xSzB0WVhKYXlvTSs4VkFFTHdCY0Z2a0Nrb2JzNFR0a0YzVm9QaU85MWhsbTdLKzd3b05RSApPVmh4cURxSDNFQ0E3dk5MZUEwOXhUN0VBcFh6UEd3azE2M080cW9aZFQ3VlVJMkZ1OUcwK0l6elM0MlRWWE9tCk1VcDFzRWlkVVVFbHd1dXFEdkt4c0JQNmRvOXhUOGRIZzJuOVkwNE1FMkZ5UTFvbXVMelJyY3lqVTZRbzZQTHIKSC9kaTZLVDNpaVovbGVGa0RNZjUvUGVzeTdiRXhQWk4yc0hSM1NwUjVSd1FoNTBUNEtaeDdGT3F2Q0pwaTZQcApIMWN6MDkyMXFHdEcwaWhlT3pXZm9ubXZZS25oeGNUVHBnK2Z1aVZkUFd3ZHV0alZsK0hQYzJ5ancxR2RxdzRoCm40b0ZqRzRLUU82enZaekdERmF5OUhhelp5VUtwZ2FteTI0dThYWTcvQlNXYzFjOTVHZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  postgres.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdxRENDQkpDZ0F3SUJBZ0lDRUFBd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z2NBeEN6QUpCZ05WQkFZVEFsVlQKTVJFd0R3WURWUVFJREFoV2FYSm5hVzVwWVRFa01DSUdBMVVFQ2d3YlJHVmphWEJvWlhJZ1ZHVmphRzV2Ykc5bgplU0JUZEhWa2FXOXpNUlF3RWdZRFZRUUxEQXRGYm1kcGJtVmxjbWx1WnpFMk1EUUdBMVVFQXd3dFJHVmphWEJvClpYSWdRMlZ5ZEdsbWFXTmhkR1VnUVhWMGFHOXlhWFI1SUNoSmJuUmxjbTFsWkdsaGRHVXBNU293S0FZSktvWkkKaHZjTkFRa0JGaHRsYm1kcGJtVmxjbWx1WjBCa1pXTnBjR2hsY201dmR5NWpiMjB3SGhjTk1Ua3dNakl6TVRZMApNREExV2hjTk1qa3dNakl3TVRZME1EQTFXakNCbWpFbk1DVUdBMVVFQXd3ZUtpNW5jbVY1YldGMGRHVnlMbk4yCll5NWpiSFZ6ZEdWeUxteHZZMkZzTVJRd0VnWURWUVFMREF0RmJtZHBibVZsY21sdVp6RWtNQ0lHQTFVRUNnd2IKUkdWamFYQm9aWElnVkdWamFHNXZiRzluZVNCVGRIVmthVzl6TVJNd0VRWURWUVFIREFwQmJHVjRZVzVrY21saApNUkV3RHdZRFZRUUlEQWhXYVhKbmFXNXBZVEVMTUFrR0ExVUVCaE1DVlZNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCCkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEWVY4d0hmL0NsVG5weUJ3VWxKbHRYQUw2bzRJL3RpbTlLbUZVdUNtMjQKbDBtamhteW4vYmNQRTZiRDdVMXU3V244aUZrOXBtRjJvL2g2Qldib1BmKzcyU1Yzb1N6SWZyUGZPSG40TkZWTQp1RjllR3FsdUl5WVcrK05qZ240V0JLckZqLzVxK01GU0MvQnBNRTh6OVpldE1SeHpzbmY2UlNHaXBUMzh4bnpMClJONXp4RHlSMHpjNERxOHNVK29NQXVPS1RPM2ZOQ1JLUGVKaUczWDdRaEsxa3BTQXBaYXk4dkVXcndUbHpONEIKZHg2alJSTWtxMWx3LzMzRHJTdEZUM2R6T1FhYjFaQ3BDL0txVElYZjdJT3Y2ZytGRFFRck5hVTQzL0JqeHZZSwpSQytvVE0zRnZ4b3FFeVpVRWQveGRPMVFoQWtFb0o5UFRYYjVhRWJ3WjFLTkFnTUJBQUdqZ2dIT01JSUJ5akFKCkJnTlZIUk1FQWpBQU1CRUdDV0NHU0FHRytFSUJBUVFFQXdJR3dEQXpCZ2xnaGtnQmh2aENBUTBFSmhZa1QzQmwKYmxOVFRDQkhaVzVsY21GMFpXUWdVMlZ5ZG1WeUlFTmxjblJwWm1sallYUmxNQjBHQTFVZERnUVdCQlJ2VTkrdAo2VXV3UXg4RmxxTy9JZlM3ZGFNNjF6Q0Ird1lEVlIwakJJSHpNSUh3Z0JSc0RZajJsbFFudG5wYkZkOU5GNXlnCkt5cCtkYUdCMDZTQjBEQ0J6VEVMTUFrR0ExVUVCaE1DVlZNeEVUQVBCZ05WQkFnTUNGWnBjbWRwYm1saE1STXcKRVFZRFZRUUhEQXBCYkdWNFlXNWtjbWxoTVNRd0lnWURWUVFLREJ0RVpXTnBjR2hsY2lCVVpXTm9ibTlzYjJkNQpJRk4wZFdScGIzTXhGREFTQmdOVkJBc01DMFZ1WjJsdVpXVnlhVzVuTVM0d0xBWURWUVFERENWRVpXTnBjR2hsCmNpQkRaWEowYVdacFkyRjBaU0JCZFhSb2IzSnBkSGtnS0ZKdmIzUXBNU293S0FZSktvWklodmNOQVFrQkZodGwKYm1kcGJtVmxjbWx1WjBCa1pXTnBjR2hsY201dmR5NWpiMjJDQWhBQU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZApCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBZ1lJS3dZQkJRVUhBd0V3S1FZRFZSMFJCQ0l3SUlJZUtpNW5jbVY1CmJXRjBkR1Z5TG5OMll5NWpiSFZ6ZEdWeUxteHZZMkZzTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFER0xTY0sKZEFsNGtvRGdKMFVpUWNHTDhsSklzcTlxUmc0eXg4cWFjVUZMeCt3emRZNkNKS1F1MW5NRGdhSzdjc0hYbWxJWAp6a0lNT3RwNnB2L3AyVVFCcXVic2JYbktsR3FZdDlEU0JQT3ArLzB0L0NkalVXM0pnME1NUjU5TmhLVEd6QWs3Clp1OStka1loVlIybk12STEyWDJJNFRZM3MyTElDRzdpV1hTUmFvVGJxYVBQYjNPVUI5MW43cWFXM3JlMVAxYzAKOEJsYVpKTk5xM0djbERaTkl4QlkyVmgrbjNhdWJ6eVZEUm83S1pFLytYQmRkVjNiUjhwaUxVaDY4dW5uMDBseApJSGwwdGNzY24velU4eHlrcGFJNkhVQUhieE10b1BXcWJhSUJyK2NLSUY0aXdTT0VnVDNqekJIazhqaWt0dUNrCmVUcTJFckkwZGxscXRlMms2T1dRZmE1czBDWEpuSStYZi9qelV4L0xuQTV6djhuV2hObDE4blJTN3JLZ1ZOZnYKY3l4dFNJWGV4MWxJb3lUemt4cE92eEh3aWZQWjF3NExicFRSc2NWQXJDKzJudEtkMForMVZsYThCSUV6Z1g5SAp3YWtVa2hSenpsWERuRWZpRURuOGpGdG9oTkdKVEw0U1pxVkYwclI5RmVHdllqVlVuVDVDTTNmVmdOZXY4NzNkCmRVU0JxY0t6ZXJNN2lsZWVMNDNjZVJkeUU2eWxyTVVIMnJDeDRkeHhsWTZEYno5a3pEdnZsNDk0dkI4VDJybDcKWHVuQ3hqKzAxVlNaQld6SEc0QzZFTmJMdGs5QjVNS3I3OE1BeXVNeERTRGY5eW54bFRETEFPamFnSW5lL25UUApmRzFKKzNUWXk4TTZkSTlnVXdqRTJ2ODd4dDlqSlkybERvZkxoUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  postgres.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMkZmTUIzL3dwVTU2Y2djRkpTWmJWd0MrcU9DUDdZcHZTcGhWTGdwdHVKZEpvNFpzCnAvMjNEeE9tdysxTmJ1MXAvSWhaUGFaaGRxUDRlZ1ZtNkQzL3U5a2xkNkVzeUg2ejN6aDUrRFJWVExoZlhocXAKYmlNbUZ2dmpZNEorRmdTcXhZLythdmpCVWd2d2FUQlBNL1dYclRFY2M3SjMra1Vob3FVOS9NWjh5MFRlYzhROAprZE0zT0E2dkxGUHFEQUxqaWt6dDN6UWtTajNpWWh0MSswSVN0WktVZ0tXV3N2THhGcThFNWN6ZUFYY2VvMFVUCkpLdFpjUDk5dzYwclJVOTNjemtHbTlXUXFRdnlxa3lGMyt5RHIrb1BoUTBFS3pXbE9OL3dZOGIyQ2tRdnFFek4KeGI4YUtoTW1WQkhmOFhUdFVJUUpCS0NmVDAxMitXaEc4R2RTalFJREFRQUJBb0lCQUMyRXc0UHNjbGlGbTVPMApVR3ZSbHpSR0R0ZC9jQ2o5a0k3MFlDK3d1QWMzcGFISFhjTTJ5YlpkWHlBb0pMdXJManFaQVpYTUZRT2VXbUJxCkZJM1d4YURqZmxPZVVNcmFoY1A0b1FrTkVjbHpuWFV5VE9YRWRYWXVoMWhmazJIVWw0Mjd6ejc0bWN4R2dNM1IKQVVrZ2FrcGhZK2dmNjhoM2xTMGdjVnRtODhqY2tKeHQyNjNiL1oxenI0SHh3eDU3WFYzNTJzK05ZL3VWa3daaAppaFJvNkd5OEFPTzFGangvMVl1Y3M2SjNHRjBEVGZqQ0YyZjVoL25QYlRZU1dpdGY5T1hKUjI4d0YrTmZnd3VXCnBFb2IyaDN5RDRjK2hXSUVLcmt3TmVSRnA3VkxESnhUNUlpdWJVcVZzVUJkZFlXWjBBT3BzQ1Y1WHZVU25jdFQKbHhKdTRtMENnWUVBN1ZQb1pLL3V1d2swbkdxQnY2NUZuQTdndWtnUUd0RFJXMUwyeW82UHJmekNBWHlJMWYrSwpma1E5eUN6WUFSS3MrckRRQ2RzWHlUSFlyaUxzUC9jRlQyd1pkYmpaem5OL1NwMVorRnZOMEkrTERhbllOUHoxClp1K1NlenAvM3JTemRLV01kblg2MktDUmx3eVJJZkdIWHl4ajZMcGszSkF0YnBPSE0vMExZMjhDZ1lFQTZWMDYKU0xxWWJwRDNEZ2VmVURkOFEveElKcmVJcTdnSS9Jcm91MGZPc0x4ZkVsZ0NwcEY0Q3ZDTkQvVTVwc1p2TUM0OApxeFd2MjdXT0Z6VVU1N1dNZkdUelB2ZUdrbGF1ZE4wU291Ty9rTmIxc2Q3T25PNnc0cHBxcENSQlBrM2lQQ1ZCCld2N1hHYnVBMjNQY2ZyN3hRY1cwN3E0TTk3U3VQMGRacjlRd084TUNnWUVBanVLQ3V3UVZSalJmb1lDYVIyNUQKNkpZb2hON1lHMXozZnZVdk1ucXNWSU1seHNGVW5RcXlOaDBkMlVQdWRJN3E2Qy9Gd1BsUWs4aFgvVmQzUjNlUQprZVd5V21jRmN6K2tOcWNQd1BCOHRJR0hwWjFKVjNXb3hlV2RHbVg1RUh0WXcvVGI0WUpjbVVucS9iY0tOaFoxCmV6NTlsR09NVUNMWng0WTQwM3NZL1M4Q2dZRUE1L1lTTkM2OXk5RnVzVlJrU0VFTzFTa1VzdDltQzRKZjlGOUQKSEwwd3R6NVdwZzR6ZkV4R2JXRlVaaE5VSGZGS25qS25mVXVPUlM3L01SUkRWbHFBYlRtUEMvelFsKzl2YzV3MwpwUkFLMzdhNysvVERuUHdwZU9VU3NWdVVPcEVDR3RUUlZOalJDTFAzVHF1bzlaZG9pZjh5YkxrM0RKVmRTbXJxCnZEcUhReThDZ1lFQTRpbDlqSDd5bk93Mk9IUWJEK1hjTHhLZnpqWnRYcTNEQ2lYTmg5KzhLd1c1WHlEY21oL3IKUDJrU2t2Q3ZFRGZCN3BCUGFjL0Fwa0hGaTZ0c1NMYWZiejFWVk9mV0x2d2VVcUZuZXp1NnpXRDBxbFAwMjdVNQp6VjRJamtoWmNTRDN4N3JMSHY2M3hzTjBOVSsvRVppbE83VlZhM1JXcm81OCtMSi81U2ZPbEs0PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
# Source: greymatter/charts/slo/templates/postgres-passwords.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  labels:
    chart: "slo-2.0.4"
    release: "gm"
type: Opaque
stringData:
  username: "posgresgm"
  password: "USCISpg96"
  database: "greymatter"
---
# Source: greymatter/templates/docker-secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: docker.secret
  namespace: dhs
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: REMOVED
---
# Source: greymatter/templates/sidecar-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sidecar-certs
  labels:
    chart: "greymatter-2.0.3"
    release: "gm"
type: Opaque
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdjVENDQkZtZ0F3SUJBZ0lDRUFBd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z2MweEN6QUpCZ05WQkFZVEFsVlQKTVJFd0R3WURWUVFJREFoV2FYSm5hVzVwWVRFVE1CRUdBMVVFQnd3S1FXeGxlR0Z1WkhKcFlURWtNQ0lHQTFVRQpDZ3diUkdWamFYQm9aWElnVkdWamFHNXZiRzluZVNCVGRIVmthVzl6TVJRd0VnWURWUVFMREF0RmJtZHBibVZsCmNtbHVaekV1TUN3R0ExVUVBd3dsUkdWamFYQm9aWElnUTJWeWRHbG1hV05oZEdVZ1FYVjBhRzl5YVhSNUlDaFMKYjI5MEtURXFNQ2dHQ1NxR1NJYjNEUUVKQVJZYlpXNW5hVzVsWlhKcGJtZEFaR1ZqYVhCb1pYSnViM2N1WTI5dApNQjRYRFRFM01EZ3dPVEV4TWpNd09Gb1hEVEkzTURnd056RXhNak13T0Zvd2djQXhDekFKQmdOVkJBWVRBbFZUCk1SRXdEd1lEVlFRSURBaFdhWEpuYVc1cFlURWtNQ0lHQTFVRUNnd2JSR1ZqYVhCb1pYSWdWR1ZqYUc1dmJHOW4KZVNCVGRIVmthVzl6TVJRd0VnWURWUVFMREF0RmJtZHBibVZsY21sdVp6RTJNRFFHQTFVRUF3d3RSR1ZqYVhCbwpaWElnUTJWeWRHbG1hV05oZEdVZ1FYVjBhRzl5YVhSNUlDaEpiblJsY20xbFpHbGhkR1VwTVNvd0tBWUpLb1pJCmh2Y05BUWtCRmh0bGJtZHBibVZsY21sdVowQmtaV05wY0dobGNtNXZkeTVqYjIwd2dnSWlNQTBHQ1NxR1NJYjMKRFFFQkFRVUFBNElDRHdBd2dnSUtBb0lDQVFEUGt4YWlVRDN1cVIyQUE1andBYjlnQ2pEK0JyT3JZQm9lbG5SNgp1MjlGUFQ1Y0hlTThiZlZvNnppeHk3cUMybFh6aEs1Z0gvVExXWGVscEV3VStzdzgxb1VielpsQjdaMmx2cGo4CnQ0elhnNHpnSE5QcUFGSk02TDliNzBkTGd1a2hjVU82bm5JaVBQQXBybXRCRHZYYnRCd0RDek9QYU1jQmVFd2kKekVSYTRXeVhZam41USthOExUVExRL09GbUxIRkEyZENHNzhzNmNZUU9mRjkyTDY0MVFkT2hxWFB0cStRd3FBbQpXa1E1M1BlczZySG1qVDBrQzhoRUk1ZkNLRUEzUVhZdDZZdGdYK0tJSGdPWVdJMGcyMndoOTVvaGsrRHVSTC9PCjN6eko5dENqck1QTzJseG1nMEdkcHVxamZSNks4Q0VrNFlxMmRVd1lDN2RmZmdDcld2OXppay9wWGVvU3ZUdjMKWHByTU4yV1dLQlg5bFZDMnFLRmhOWDRkcmlCRlJPMGk1K2JHZE0xZThOaWxVRHFIaWlrd2hhVngyem5iL0UvYgpMQ0N3bGhDMG9BQXhuVloxSjE4azQ2U1RlN2hsZy9ScU0vMTh1eG1oUDlhbjJGa0R0dXlaQnVnYnBXcGdrN2xFCnRwT2Q5MmlDR1lEYzZrOEpzbitwMFVpWmppb0p2L0dtMDRUM3Q5MGRrVnU3RCttd0ZJc0VBYUpqd2VwRVo3a2kKSUJheVdySm1sK0RUNGdoeWFka21zOFVhT2ErWU9ZRVppWTVHekpoRW9kQXQwMU9hblNrelIvRllqTTRTdUdYdwpScnEycDhoVHVVQkJtMXA5aXB2OERMcVBtbFhaMkNuN0J5VFg3VE1zRys3N1I0emtrYTVYRDV0VUxwQWY1eEtvCnF4NE4vUUlEQVFBQm8yWXdaREFkQmdOVkhRNEVGZ1FVYkEySTlwWlVKN1o2V3hYZlRSZWNvQ3NxZm5Vd0h3WUQKVlIwakJCZ3dGb0FVWTVVNEpiOGhDNlNzaW5oMkx6Q0IzdGx5OGJjd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQgpBREFPQmdOVkhROEJBZjhFQkFNQ0FZWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBSE10ZW5zbG5FdXZuVDRnCkpXUjcwRlp2M3dVT09xQXN5eEpkV2o0bzh5TTcvVjN3R0tNeGtSdjdPcWV0cDkyWFlhdWZmU1B4RTNJTm5HTXEKRGRSTVRmMk1HVm52L1c1UEpvdVp3TWhCWDRXNnJqdmw0UUNTbCtRK3dTdCtPaWJOdTJBeGRDZVFLYTY3Y3d2ZgpRZkQ0dWZlV2Z2VVB6YXp3enVKcUU1V0NqTm5NMktzV2JtemNscXVBYlVqS0gwMDE3VUdSWWU4VEhyQ1o1TWRuCkw5WCtaU2U1d1dIV0ltN0pMbjVuZXhlVzY2OGhnY2RJTnJLQlJnN3lnS1dyTy9hTUZubDNjUVhtYk50WEJ0K3kKRTV0b2Y2MTgvSFdKQmpDM2UrZXlJTXFqZ2pFWm14WWZ4d0JUazBYVkVadUEzUHlBR2lnQTE3UTBldjVaeDRpaQoyZkdJWU41eTNMNk9NcmZrY21kdGlob1Fpc3FkK3pLbGd4V0g0WjJLdFYwUkZWVHJlb29OYVNwRlp1NkVlQ1BICjBmZysrVFYvdUdPRWZOYzRzZUVmRmlhTTR1cThtcDVFMVBZT1hYNERMa3ppZ25xcWw5aDh1My8zWkM3bTROb1kKcXBvT3VyUXlZL2RDVUlKdzNLYitEbGNrMU9ac0dRTnZrcGZsSHZDeEN2VHE0OGJFZ2pPK3hrb1lCT0RoWTB3VApncmwxa0ZCWE1OTkFpRmlIbEhhTTZoK01Ldi85Y1JpNjNLWG1oaUVqVVdVVmNkVDlaUlJQSjZxZDVRQUpISitoCk5VN3MxN2FyNS80U2dKeDlCWlNFWXpRUUN6dDRSRXdCeGZyRi9HZEdOaWExd1pjcU1OeWxta0Q4ZkNXQlppVzIKc2Fyc0R6Vnp3dmR1TDFPREl5Y1h4ZS9wWlV4aQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlHZ2pDQ0JHcWdBd0lCQWdJSkFLQmRsUlVuWFhJSk1BMEdDU3FHU0liM0RRRUJDd1VBTUlITk1Rc3dDUVlEClZRUUdFd0pWVXpFUk1BOEdBMVVFQ0F3SVZtbHlaMmx1YVdFeEV6QVJCZ05WQkFjTUNrRnNaWGhoYm1SeWFXRXgKSkRBaUJnTlZCQW9NRzBSbFkybHdhR1Z5SUZSbFkyaHViMnh2WjNrZ1UzUjFaR2x2Y3pFVU1CSUdBMVVFQ3d3TApSVzVuYVc1bFpYSnBibWN4TGpBc0JnTlZCQU1NSlVSbFkybHdhR1Z5SUVObGNuUnBabWxqWVhSbElFRjFkR2h2CmNtbDBlU0FvVW05dmRDa3hLakFvQmdrcWhraUc5dzBCQ1FFV0cyVnVaMmx1WldWeWFXNW5RR1JsWTJsd2FHVnkKYm05M0xtTnZiVEFlRncweE56QTRNRGt4TVRJeU1UbGFGdzB5TnpBNE1EY3hNVEl5TVRsYU1JSE5NUXN3Q1FZRApWUVFHRXdKVlV6RVJNQThHQTFVRUNBd0lWbWx5WjJsdWFXRXhFekFSQmdOVkJBY01Da0ZzWlhoaGJtUnlhV0V4CkpEQWlCZ05WQkFvTUcwUmxZMmx3YUdWeUlGUmxZMmh1YjJ4dloza2dVM1IxWkdsdmN6RVVNQklHQTFVRUN3d0wKUlc1bmFXNWxaWEpwYm1jeExqQXNCZ05WQkFNTUpVUmxZMmx3YUdWeUlFTmxjblJwWm1sallYUmxJRUYxZEdodgpjbWwwZVNBb1VtOXZkQ2t4S2pBb0Jna3Foa2lHOXcwQkNRRVdHMlZ1WjJsdVpXVnlhVzVuUUdSbFkybHdhR1Z5CmJtOTNMbU52YlRDQ0FpSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBTERvMDh6UmJzc2kKdnJnSXlDaUUzeDV0dEhEY0VzT3MzRWFaYUUzaEhwWEs1YW41aVhUOC90bDM1QkRBV2wxSjZDSmttNGlwMENoNQpqT3FyazVwZVFKS3VONzMxR2xhZnpvYWJ3SGNxeUQ2Q3ZKWkFOcmU2NHMwSjJDVFpwb2IyZ1dNMDZDNzV1d3pLCjVXNEpmaXZTekJwSHU4QStGSkFSbVpwblFvRkRSSVBXUUZrOXEyMkNQSVd0bFVkcmt3VmRuSGxWKytoUktLQlUKcXdBeVhqNlVVbnJ2d1dORVIwQzB3a3NvSmYrNW9QL0hMeXF6VWNkNnlQbU9pQWU4UWhSOGpMZHQvSzhlMTRHSQo3WGhBeXRLeEkycUhxelVtaTJUNTdsSXp6ODNmRzRDbW81OW1JRjRqTHZIZmpDNDh6ejlkQ29PYkNLL1FjY3pYCmxpcHhtVG05SG9jRFdDQ28wTDAzNWFydld4UmtQOGVjNzVDRTIwUThScVVZOWpRbzRhNjRSeWRiQWFiQ3c4czAKYjBtU29IYlJ2cFpDeDk2S2hDRzdFa2pDb3JXcnZoOWR4WkFlbklaREFibjNzWDlRR2M2QStCNU1ZYnY3MFVLbwo4UkQySU9Ec3Z1Q1NubjFyRVFwR2IwZDZoTlNSZUROMmNZTG5TZXVvTVVseFQvU1JDTkJpekdPV3hKdUZMMUNyCjVZbk55VXYzdENFWEt4RU05T29SSHV0eWRtZWc4ZlRiVHU4aEFsR2lZaGdxZWhta0FwUzI1cUNsNHNWejNGVWoKL3kyeWZRYmVjbGl1L1lkUFZ6aVJHc0xPVEdoUWxkQlNJYVZkTUdBL211enhWdE9KZExCdUsvcUsvZ3ZXN04ycwp2WlFUSFp6K0IxMERseHM5UzJOaGY3Rlg3cE1MTTloWEFnTUJBQUdqWXpCaE1CMEdBMVVkRGdRV0JCUmpsVGdsCnZ5RUxwS3lLZUhZdk1JSGUyWEx4dHpBZkJnTlZIU01FR0RBV2dCUmpsVGdsdnlFTHBLeUtlSFl2TUlIZTJYTHgKdHpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUE0R0ExVWREd0VCL3dRRUF3SUJoakFOQmdrcWhraUc5dzBCQVFzRgpBQU9DQWdFQWNCNHo0QUxSWCtzMUZiMWoyc1dMbzY1akl5eG0wT0IyUlRsaHN0ZDQremQrekZqTGc3WEUwTzVqCklsbTNiYXNWbExNMm1UbWk1Q0M0bXZPQmliU2I2TmxKcjM0R21LYmZ3WVZMajN0cG5sbkEvSEdHekhZM3VvWDYKekJVU0lZUkgxMGsyYm1wTTQzOGZYdHo5UCtrSEFrbXNWajJZazh1TGcrdFpEWkVkTThxaVdiYUlaYSthd0h3TApEQmhkMWRRN1p5ZWpWSkxLR3lZd2Q3ZE1ZTHEwNEY0QXFhd1BwMmtzbWNVdGt0VTJRK3VHbUpCa3FnQnpVVEMrCjY0eVBLQmJQYTJXRkZEVnRxdDByNnFEMk43RkQ2djBiMFBpQmVydXZocFN2YTF5dkUwdk1OZmE5a2M4RXhyS3oKN0dNTUdzdjNUSU9xSzB0WVhKYXlvTSs4VkFFTHdCY0Z2a0Nrb2JzNFR0a0YzVm9QaU85MWhsbTdLKzd3b05RSApPVmh4cURxSDNFQ0E3dk5MZUEwOXhUN0VBcFh6UEd3azE2M080cW9aZFQ3VlVJMkZ1OUcwK0l6elM0MlRWWE9tCk1VcDFzRWlkVVVFbHd1dXFEdkt4c0JQNmRvOXhUOGRIZzJuOVkwNE1FMkZ5UTFvbXVMelJyY3lqVTZRbzZQTHIKSC9kaTZLVDNpaVovbGVGa0RNZjUvUGVzeTdiRXhQWk4yc0hSM1NwUjVSd1FoNTBUNEtaeDdGT3F2Q0pwaTZQcApIMWN6MDkyMXFHdEcwaWhlT3pXZm9ubXZZS25oeGNUVHBnK2Z1aVZkUFd3ZHV0alZsK0hQYzJ5ancxR2RxdzRoCm40b0ZqRzRLUU82enZaekdERmF5OUhhelp5VUtwZ2FteTI0dThYWTcvQlNXYzFjOTVHZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  ca_b64: 
  server.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdxRENDQkpDZ0F3SUJBZ0lDRUFBd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z2NBeEN6QUpCZ05WQkFZVEFsVlQKTVJFd0R3WURWUVFJREFoV2FYSm5hVzVwWVRFa01DSUdBMVVFQ2d3YlJHVmphWEJvWlhJZ1ZHVmphRzV2Ykc5bgplU0JUZEhWa2FXOXpNUlF3RWdZRFZRUUxEQXRGYm1kcGJtVmxjbWx1WnpFMk1EUUdBMVVFQXd3dFJHVmphWEJvClpYSWdRMlZ5ZEdsbWFXTmhkR1VnUVhWMGFHOXlhWFI1SUNoSmJuUmxjbTFsWkdsaGRHVXBNU293S0FZSktvWkkKaHZjTkFRa0JGaHRsYm1kcGJtVmxjbWx1WjBCa1pXTnBjR2hsY201dmR5NWpiMjB3SGhjTk1Ua3dNakl6TVRZMApNREExV2hjTk1qa3dNakl3TVRZME1EQTFXakNCbWpFbk1DVUdBMVVFQXd3ZUtpNW5jbVY1YldGMGRHVnlMbk4yCll5NWpiSFZ6ZEdWeUxteHZZMkZzTVJRd0VnWURWUVFMREF0RmJtZHBibVZsY21sdVp6RWtNQ0lHQTFVRUNnd2IKUkdWamFYQm9aWElnVkdWamFHNXZiRzluZVNCVGRIVmthVzl6TVJNd0VRWURWUVFIREFwQmJHVjRZVzVrY21saApNUkV3RHdZRFZRUUlEQWhXYVhKbmFXNXBZVEVMTUFrR0ExVUVCaE1DVlZNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCCkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEWVY4d0hmL0NsVG5weUJ3VWxKbHRYQUw2bzRJL3RpbTlLbUZVdUNtMjQKbDBtamhteW4vYmNQRTZiRDdVMXU3V244aUZrOXBtRjJvL2g2Qldib1BmKzcyU1Yzb1N6SWZyUGZPSG40TkZWTQp1RjllR3FsdUl5WVcrK05qZ240V0JLckZqLzVxK01GU0MvQnBNRTh6OVpldE1SeHpzbmY2UlNHaXBUMzh4bnpMClJONXp4RHlSMHpjNERxOHNVK29NQXVPS1RPM2ZOQ1JLUGVKaUczWDdRaEsxa3BTQXBaYXk4dkVXcndUbHpONEIKZHg2alJSTWtxMWx3LzMzRHJTdEZUM2R6T1FhYjFaQ3BDL0txVElYZjdJT3Y2ZytGRFFRck5hVTQzL0JqeHZZSwpSQytvVE0zRnZ4b3FFeVpVRWQveGRPMVFoQWtFb0o5UFRYYjVhRWJ3WjFLTkFnTUJBQUdqZ2dIT01JSUJ5akFKCkJnTlZIUk1FQWpBQU1CRUdDV0NHU0FHRytFSUJBUVFFQXdJR3dEQXpCZ2xnaGtnQmh2aENBUTBFSmhZa1QzQmwKYmxOVFRDQkhaVzVsY21GMFpXUWdVMlZ5ZG1WeUlFTmxjblJwWm1sallYUmxNQjBHQTFVZERnUVdCQlJ2VTkrdAo2VXV3UXg4RmxxTy9JZlM3ZGFNNjF6Q0Ird1lEVlIwakJJSHpNSUh3Z0JSc0RZajJsbFFudG5wYkZkOU5GNXlnCkt5cCtkYUdCMDZTQjBEQ0J6VEVMTUFrR0ExVUVCaE1DVlZNeEVUQVBCZ05WQkFnTUNGWnBjbWRwYm1saE1STXcKRVFZRFZRUUhEQXBCYkdWNFlXNWtjbWxoTVNRd0lnWURWUVFLREJ0RVpXTnBjR2hsY2lCVVpXTm9ibTlzYjJkNQpJRk4wZFdScGIzTXhGREFTQmdOVkJBc01DMFZ1WjJsdVpXVnlhVzVuTVM0d0xBWURWUVFERENWRVpXTnBjR2hsCmNpQkRaWEowYVdacFkyRjBaU0JCZFhSb2IzSnBkSGtnS0ZKdmIzUXBNU293S0FZSktvWklodmNOQVFrQkZodGwKYm1kcGJtVmxjbWx1WjBCa1pXTnBjR2hsY201dmR5NWpiMjJDQWhBQU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZApCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBZ1lJS3dZQkJRVUhBd0V3S1FZRFZSMFJCQ0l3SUlJZUtpNW5jbVY1CmJXRjBkR1Z5TG5OMll5NWpiSFZ6ZEdWeUxteHZZMkZzTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFER0xTY0sKZEFsNGtvRGdKMFVpUWNHTDhsSklzcTlxUmc0eXg4cWFjVUZMeCt3emRZNkNKS1F1MW5NRGdhSzdjc0hYbWxJWAp6a0lNT3RwNnB2L3AyVVFCcXVic2JYbktsR3FZdDlEU0JQT3ArLzB0L0NkalVXM0pnME1NUjU5TmhLVEd6QWs3Clp1OStka1loVlIybk12STEyWDJJNFRZM3MyTElDRzdpV1hTUmFvVGJxYVBQYjNPVUI5MW43cWFXM3JlMVAxYzAKOEJsYVpKTk5xM0djbERaTkl4QlkyVmgrbjNhdWJ6eVZEUm83S1pFLytYQmRkVjNiUjhwaUxVaDY4dW5uMDBseApJSGwwdGNzY24velU4eHlrcGFJNkhVQUhieE10b1BXcWJhSUJyK2NLSUY0aXdTT0VnVDNqekJIazhqaWt0dUNrCmVUcTJFckkwZGxscXRlMms2T1dRZmE1czBDWEpuSStYZi9qelV4L0xuQTV6djhuV2hObDE4blJTN3JLZ1ZOZnYKY3l4dFNJWGV4MWxJb3lUemt4cE92eEh3aWZQWjF3NExicFRSc2NWQXJDKzJudEtkMForMVZsYThCSUV6Z1g5SAp3YWtVa2hSenpsWERuRWZpRURuOGpGdG9oTkdKVEw0U1pxVkYwclI5RmVHdllqVlVuVDVDTTNmVmdOZXY4NzNkCmRVU0JxY0t6ZXJNN2lsZWVMNDNjZVJkeUU2eWxyTVVIMnJDeDRkeHhsWTZEYno5a3pEdnZsNDk0dkI4VDJybDcKWHVuQ3hqKzAxVlNaQld6SEc0QzZFTmJMdGs5QjVNS3I3OE1BeXVNeERTRGY5eW54bFRETEFPamFnSW5lL25UUApmRzFKKzNUWXk4TTZkSTlnVXdqRTJ2ODd4dDlqSlkybERvZkxoUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  server_b64: TFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVZHhSRU5EUWtwRFowRjNTVUpCWjBsRFJVRkJkMFJSV1VwTGIxcEphSFpqVGtGUlJVeENVVUYzWjJOQmVFTjZRVXBDWjA1V1FrRlpWRUZzVmxRS1RWSkZkMFIzV1VSV1VWRkpSRUZvVjJGWVNtNWhWelZ3V1ZSRmEwMURTVWRCTVZWRlEyZDNZbEpIVm1waFdFSnZXbGhKWjFaSFZtcGhSelYyWWtjNWJncGxVMEpVWkVoV2EyRlhPWHBOVWxGM1JXZFpSRlpSVVV4RVFYUkdZbTFrY0dKdFZteGpiV3gxV25wRk1rMUVVVWRCTVZWRlFYZDNkRkpIVm1waFdFSnZDbHBZU1dkUk1sWjVaRWRzYldGWFRtaGtSMVZuVVZoV01HRkhPWGxoV0ZJMVNVTm9TbUp1VW14amJURnNXa2RzYUdSSFZYQk5VMjkzUzBGWlNrdHZXa2tLYUhaalRrRlJhMEpHYUhSc1ltMWtjR0p0Vm14amJXeDFXakJDYTFwWFRuQmpSMmhzWTIwMWRtUjVOV3BpTWpCM1NHaGpUazFVYTNkTmFrbDZUVlJaTUFwTlJFRXhWMmhqVGsxcWEzZE5ha2wzVFZSWk1FMUVRVEZYYWtOQ2JXcEZiazFEVlVkQk1WVkZRWGQzWlV0cE5XNWpiVlkxWWxkR01HUkhWbmxNYms0eUNsbDVOV3BpU0ZaNlpFZFdlVXh0ZUhaWk1rWnpUVkpSZDBWbldVUldVVkZNUkVGMFJtSnRaSEJpYlZac1kyMXNkVnA2Uld0TlEwbEhRVEZWUlVObmQySUtVa2RXYW1GWVFtOWFXRWxuVmtkV2FtRkhOWFppUnpsdVpWTkNWR1JJVm10aFZ6bDZUVkpOZDBWUldVUldVVkZJUkVGd1FtSkhWalJaVnpWclkyMXNhQXBOVWtWM1JIZFpSRlpSVVVsRVFXaFhZVmhLYm1GWE5YQlpWRVZNVFVGclIwRXhWVVZDYUUxRFZsWk5kMmRuUldsTlFUQkhRMU54UjFOSllqTkVVVVZDQ2tGUlZVRkJORWxDUkhkQmQyZG5SVXRCYjBsQ1FWRkVXVlk0ZDBobUwwTnNWRzV3ZVVKM1ZXeEtiSFJZUVV3MmJ6UkpMM1JwYlRsTGJVWlZkVU50TWpRS2JEQnRhbWh0ZVc0dlltTlFSVFppUkRkVk1YVTNWMjQ0YVVack9YQnRSakp2TDJnMlFsZGliMUJtS3pjeVUxWXpiMU42U1daeVVHWlBTRzQwVGtaV1RRcDFSamxsUjNGc2RVbDVXVmNySzA1cVoyNDBWMEpMY2tacUx6VnhLMDFHVTBNdlFuQk5SVGg2T1ZwbGRFMVNlSHB6Ym1ZMlVsTkhhWEJVTXpoNGJucE1DbEpPTlhwNFJIbFNNSHBqTkVSeE9ITlZLMjlOUVhWUFMxUlBNMlpPUTFKTFVHVkthVWN6V0RkUmFFc3hhM0JUUVhCYVlYazRka1ZYY25kVWJIcE9ORUlLWkhnMmFsSlNUV3R4TVd4M0x6TXpSSEpUZEVaVU0yUjZUMUZoWWpGYVEzQkRMMHR4VkVsWVpqZEpUM1kyWnl0R1JGRlJjazVoVlRRekwwSnFlSFpaU3dwU1F5dHZWRTB6Um5aNGIzRkZlVnBWUldRdmVHUlBNVkZvUVd0RmIwbzVVRlJZWWpWaFJXSjNXakZMVGtGblRVSkJRVWRxWjJkSVQwMUpTVUo1YWtGS0NrSm5UbFpJVWsxRlFXcEJRVTFDUlVkRFYwTkhVMEZIUnl0RlNVSkJVVkZGUVhkSlIzZEVRWHBDWjJ4bmFHdG5RbWgyYUVOQlVUQkZTbWhaYTFRelFtd0tZbXhPVkZSRFFraGFWelZzWTIxR01GcFhVV2RWTWxaNVpHMVdlVWxGVG14amJsSndXbTFzYWxsWVVteE5RakJIUVRGVlpFUm5VVmRDUWxKMlZUa3JkQW8yVlhWM1VYZzRSbXh4VHk5SlpsTTNaR0ZOTmpGNlEwSXJkMWxFVmxJd2FrSkpTSHBOU1VoM1owSlNjMFJaYWpKc2JGRnVkRzV3WWtaa09VNUdOWGxuQ2t0NWNDdGtZVWRDTURaVFFqQkVRMEo2VkVWTVRVRnJSMEV4VlVWQ2FFMURWbFpOZUVWVVFWQkNaMDVXUWtGblRVTkdXbkJqYldSd1ltMXNhRTFTVFhjS1JWRlpSRlpSVVVoRVFYQkNZa2RXTkZsWE5XdGpiV3hvVFZOUmQwbG5XVVJXVVZGTFJFSjBSVnBYVG5CalIyaHNZMmxDVlZwWFRtOWliVGx6WWpKa05RcEpSazR3WkZkU2NHSXpUWGhHUkVGVFFtZE9Wa0pCYzAxRE1GWjFXakpzZFZwWFZubGhWelZ1VFZNMGQweEJXVVJXVVZGRVJFTldSVnBYVG5CalIyaHNDbU5wUWtSYVdFb3dZVmRhY0ZreVJqQmFVMEpDWkZoU2IySXpTbkJrU0d0blMwWktkbUl6VVhCTlUyOTNTMEZaU2t0dldrbG9kbU5PUVZGclFrWm9kR3dLWW0xa2NHSnRWbXhqYld4MVdqQkNhMXBYVG5CalIyaHNZMjAxZG1SNU5XcGlNakpEUVdoQlFVMUJORWRCTVZWa1JIZEZRaTkzVVVWQmQwbEdiMFJCWkFwQ1owNVdTRk5WUlVacVFWVkNaMmR5UW1kRlJrSlJZMFJCWjFsSlMzZFpRa0pSVlVoQmQwVjNTMUZaUkZaU01GSkNRMGwzU1VsSlpVdHBOVzVqYlZZMUNtSlhSakJrUjFaNVRHNU9NbGw1TldwaVNGWjZaRWRXZVV4dGVIWlpNa1p6VFVFd1IwTlRjVWRUU1dJelJGRkZRa04zVlVGQk5FbERRVkZFUjB4VFkwc0taRUZzTkd0dlJHZEtNRlZwVVdOSFREaHNTa2x6Y1RseFVtYzBlWGc0Y1dGalZVWk1lQ3QzZW1SWk5rTktTMUYxTVc1TlJHZGhTemRqYzBoWWJXeEpXQXA2YTBsTlQzUndObkIyTDNBeVZWRkNjWFZpYzJKWWJrdHNSM0ZaZERsRVUwSlFUM0FyTHpCMEwwTmthbFZYTTBwbk1FMU5ValU1VG1oTFZFZDZRV3MzQ2xwMU9TdGthMWxvVmxJeWJrMTJTVEV5V0RKSk5GUlpNM015VEVsRFJ6ZHBWMWhUVW1GdlZHSnhZVkJRWWpOUFZVSTVNVzQzY1dGWE0zSmxNVkF4WXpBS09FSnNZVnBLVGs1eE0wZGpiRVJhVGtsNFFsa3lWbWdyYmpOaGRXSjZlVlpFVW04M1MxcEZMeXRZUW1Sa1ZqTmlVamh3YVV4VmFEWTRkVzV1TURCc2VBcEpTR3d3ZEdOelkyNHZlbFU0ZUhscmNHRkpOa2hWUVVoaWVFMTBiMUJYY1dKaFNVSnlLMk5MU1VZMGFYZFRUMFZuVkROcWVrSklhemhxYVd0MGRVTnJDbVZVY1RKRmNra3daR3hzY1hSbE1tczJUMWRSWm1FMWN6QkRXRXB1U1N0WVppOXFlbFY0TDB4dVFUVjZkamh1VjJoT2JERTRibEpUTjNKTFoxWk9abllLWTNsNGRGTkpXR1Y0TVd4SmIzbFVlbXQ0Y0U5MmVFaDNhV1pRV2pGM05FeGljRlJTYzJOV1FYSkRLekp1ZEV0a01Gb3JNVlpzWVRoQ1NVVjZaMWc1U0FwM1lXdFZhMmhTZW5wc1dFUnVSV1pwUlVSdU9HcEdkRzlvVGtkS1ZFdzBVMXB4VmtZd2NsSTVSbVZIZGxscVZsVnVWRFZEVFRObVZtZE9aWFk0TnpOa0NtUlZVMEp4WTB0NlpYSk5OMmxzWldWTU5ETmpaVkprZVVVMmVXeHlUVlZJTW5KRGVEUmtlSGhzV1RaRVlubzVhM3BFZG5ac05EazBka0k0VkRKeWJEY0tXSFZ1UTNocUt6QXhWbE5hUWxkNlNFYzBRelpGVG1KTWRHczVRalZOUzNJM09FMUJlWFZOZUVSVFJHWTVlVzU0YkZSRVRFRlBhbUZuU1c1bEwyNVVVQXBtUnpGS0t6TlVXWGs0VFRaa1NUbG5WWGRxUlRKMk9EZDRkRGxxU2xreWJFUnZaa3hvVVQwOUNpMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwPQ==
  server.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMkZmTUIzL3dwVTU2Y2djRkpTWmJWd0MrcU9DUDdZcHZTcGhWTGdwdHVKZEpvNFpzCnAvMjNEeE9tdysxTmJ1MXAvSWhaUGFaaGRxUDRlZ1ZtNkQzL3U5a2xkNkVzeUg2ejN6aDUrRFJWVExoZlhocXAKYmlNbUZ2dmpZNEorRmdTcXhZLythdmpCVWd2d2FUQlBNL1dYclRFY2M3SjMra1Vob3FVOS9NWjh5MFRlYzhROAprZE0zT0E2dkxGUHFEQUxqaWt6dDN6UWtTajNpWWh0MSswSVN0WktVZ0tXV3N2THhGcThFNWN6ZUFYY2VvMFVUCkpLdFpjUDk5dzYwclJVOTNjemtHbTlXUXFRdnlxa3lGMyt5RHIrb1BoUTBFS3pXbE9OL3dZOGIyQ2tRdnFFek4KeGI4YUtoTW1WQkhmOFhUdFVJUUpCS0NmVDAxMitXaEc4R2RTalFJREFRQUJBb0lCQUMyRXc0UHNjbGlGbTVPMApVR3ZSbHpSR0R0ZC9jQ2o5a0k3MFlDK3d1QWMzcGFISFhjTTJ5YlpkWHlBb0pMdXJManFaQVpYTUZRT2VXbUJxCkZJM1d4YURqZmxPZVVNcmFoY1A0b1FrTkVjbHpuWFV5VE9YRWRYWXVoMWhmazJIVWw0Mjd6ejc0bWN4R2dNM1IKQVVrZ2FrcGhZK2dmNjhoM2xTMGdjVnRtODhqY2tKeHQyNjNiL1oxenI0SHh3eDU3WFYzNTJzK05ZL3VWa3daaAppaFJvNkd5OEFPTzFGangvMVl1Y3M2SjNHRjBEVGZqQ0YyZjVoL25QYlRZU1dpdGY5T1hKUjI4d0YrTmZnd3VXCnBFb2IyaDN5RDRjK2hXSUVLcmt3TmVSRnA3VkxESnhUNUlpdWJVcVZzVUJkZFlXWjBBT3BzQ1Y1WHZVU25jdFQKbHhKdTRtMENnWUVBN1ZQb1pLL3V1d2swbkdxQnY2NUZuQTdndWtnUUd0RFJXMUwyeW82UHJmekNBWHlJMWYrSwpma1E5eUN6WUFSS3MrckRRQ2RzWHlUSFlyaUxzUC9jRlQyd1pkYmpaem5OL1NwMVorRnZOMEkrTERhbllOUHoxClp1K1NlenAvM3JTemRLV01kblg2MktDUmx3eVJJZkdIWHl4ajZMcGszSkF0YnBPSE0vMExZMjhDZ1lFQTZWMDYKU0xxWWJwRDNEZ2VmVURkOFEveElKcmVJcTdnSS9Jcm91MGZPc0x4ZkVsZ0NwcEY0Q3ZDTkQvVTVwc1p2TUM0OApxeFd2MjdXT0Z6VVU1N1dNZkdUelB2ZUdrbGF1ZE4wU291Ty9rTmIxc2Q3T25PNnc0cHBxcENSQlBrM2lQQ1ZCCld2N1hHYnVBMjNQY2ZyN3hRY1cwN3E0TTk3U3VQMGRacjlRd084TUNnWUVBanVLQ3V3UVZSalJmb1lDYVIyNUQKNkpZb2hON1lHMXozZnZVdk1ucXNWSU1seHNGVW5RcXlOaDBkMlVQdWRJN3E2Qy9Gd1BsUWs4aFgvVmQzUjNlUQprZVd5V21jRmN6K2tOcWNQd1BCOHRJR0hwWjFKVjNXb3hlV2RHbVg1RUh0WXcvVGI0WUpjbVVucS9iY0tOaFoxCmV6NTlsR09NVUNMWng0WTQwM3NZL1M4Q2dZRUE1L1lTTkM2OXk5RnVzVlJrU0VFTzFTa1VzdDltQzRKZjlGOUQKSEwwd3R6NVdwZzR6ZkV4R2JXRlVaaE5VSGZGS25qS25mVXVPUlM3L01SUkRWbHFBYlRtUEMvelFsKzl2YzV3MwpwUkFLMzdhNysvVERuUHdwZU9VU3NWdVVPcEVDR3RUUlZOalJDTFAzVHF1bzlaZG9pZjh5YkxrM0RKVmRTbXJxCnZEcUhReThDZ1lFQTRpbDlqSDd5bk93Mk9IUWJEK1hjTHhLZnpqWnRYcTNEQ2lYTmg5KzhLd1c1WHlEY21oL3IKUDJrU2t2Q3ZFRGZCN3BCUGFjL0Fwa0hGaTZ0c1NMYWZiejFWVk9mV0x2d2VVcUZuZXp1NnpXRDBxbFAwMjdVNQp6VjRJamtoWmNTRDN4N3JMSHY2M3hzTjBOVSsvRVppbE83VlZhM1JXcm81OCtMSi81U2ZPbEs0PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
  key_b64: TFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGY0ZGSlFrRkJTME5CVVVWQk1rWm1UVUl6TDNkd1ZUVTJZMmRqUmtwVFdtSldkME1yY1U5RFVEZFpjSFpUY0doV1RHZHdkSFZLWkVwdk5GcHpDbkF2TWpORWVFOXRkeXN4VG1KMU1YQXZTV2hhVUdGYWFHUnhVRFJsWjFadE5rUXpMM1U1YTJ4a05rVnplVWcyZWpONmFEVXJSRkpXVkV4b1psaG9jWEFLWW1sTmJVWjJkbXBaTkVvclJtZFRjWGhaTHl0aGRtcENWV2QyZDJGVVFsQk5MMWRZY2xSRlkyTTNTak1yYTFWb2IzRlZPUzlOV2poNU1GUmxZemhST0FwclpFMHpUMEUyZGt4R1VIRkVRVXhxYVd0NmRETjZVV3RUYWpOcFdXaDBNU3N3U1ZOMFdrdFZaMHRYVjNOMlRIaEdjVGhGTldONlpVRllZMlZ2TUZWVUNrcExkRnBqVURrNWR6WXdjbEpWT1ROamVtdEhiVGxYVVhGUmRubHhhM2xHTXl0NVJISXJiMUJvVVRCRlMzcFhiRTlPTDNkWk9HSXlRMnRSZG5GRmVrNEtlR0k0WVV0b1RXMVdRa2htT0ZoVWRGVkpVVXBDUzBObVZEQXhNaXRYYUVjNFIyUlRhbEZKUkVGUlFVSkJiMGxDUVVNeVJYYzBVSE5qYkdsR2JUVlBNQXBWUjNaU2JIcFNSMFIwWkM5alEybzVhMGszTUZsREszZDFRV016Y0dGSVNGaGpUVEo1WWxwa1dIbEJiMHBNZFhKTWFuRmFRVnBZVFVaUlQyVlhiVUp4Q2taSk0xZDRZVVJxWm14UFpWVk5jbUZvWTFBMGIxRnJUa1ZqYkhwdVdGVjVWRTlZUldSWVdYVm9NV2htYXpKSVZXdzBNamQ2ZWpjMGJXTjRSMmROTTFJS1FWVnJaMkZyY0doWksyZG1OamhvTTJ4VE1HZGpWblJ0T0RocVkydEtlSFF5TmpOaUwxb3hlbkkwU0hoM2VEVTNXRll6TlRKekswNVpMM1ZXYTNkYWFBcHBhRkp2TmtkNU9FRlBUekZHYW5ndk1WbDFZM00yU2pOSFJqQkVWR1pxUTBZeVpqVm9MMjVRWWxSWlUxZHBkR1k1VDFoS1VqSTRkMFlyVG1abmQzVlhDbkJGYjJJeWFETjVSRFJqSzJoWFNVVkxjbXQzVG1WU1JuQTNWa3hFU25oVU5VbHBkV0pWY1ZaelZVSmtaRmxYV2pCQlQzQnpRMVkxV0haVlUyNWpkRlFLYkhoS2RUUnRNRU5uV1VWQk4xWlFiMXBMTDNWMWQyc3dia2R4UW5ZMk5VWnVRVGRuZFd0blVVZDBSRkpYTVV3eWVXODJVSEptZWtOQldIbEpNV1lyU3dwbWExRTVlVU42V1VGU1MzTXJja1JSUTJSeldIbFVTRmx5YVV4elVDOWpSbFF5ZDFwa1ltcGFlbTVPTDFOd01Wb3JSblpPTUVrclRFUmhibGxPVUhveENscDFLMU5sZW5Bdk0zSlRlbVJMVjAxa2JsZzJNa3REVW14M2VWSkpaa2RJV0hsNGFqWk1jR3N6U2tGMFluQlBTRTB2TUV4Wk1qaERaMWxGUVRaV01EWUtVMHh4V1dKd1JETkVaMlZtVlVSa09GRXZlRWxLY21WSmNUZG5TUzlKY205MU1HWlBjMHg0WmtWc1owTndjRVkwUTNaRFRrUXZWVFZ3YzFwMlRVTTBPQXB4ZUZkMk1qZFhUMFo2VlZVMU4xZE5aa2RVZWxCMlpVZHJiR0YxWkU0d1UyOTFUeTlyVG1JeGMyUTNUMjVQTm5jMGNIQnhjRU5TUWxCck0ybFFRMVpDQ2xkMk4xaEhZblZCTWpOUVkyWnlOM2hSWTFjd04zRTBUVGszVTNWUU1HUmFjamxSZDA4NFRVTm5XVVZCYW5WTFEzVjNVVlpTYWxKbWIxbERZVkl5TlVRS05rcFpiMmhPTjFsSE1Yb3pablpWZGsxdWNYTldTVTFzZUhOR1ZXNVJjWGxPYURCa01sVlFkV1JKTjNFMlF5OUdkMUJzVVdzNGFGZ3ZWbVF6VWpObFVRcHJaVmQ1VjIxalJtTjZLMnRPY1dOUWQxQkNPSFJKUjBod1dqRktWak5YYjNobFYyUkhiVmcxUlVoMFdYY3ZWR0kwV1VwamJWVnVjUzlpWTB0T2FGb3hDbVY2TlRsc1IwOU5WVU5NV25nMFdUUXdNM05aTDFNNFEyZFpSVUUxTDFsVFRrTTJPWGs1Um5WelZsSnJVMFZGVHpGVGExVnpkRGx0UXpSS1pqbEdPVVFLU0V3d2QzUjZOVmR3WnpSNlprVjRSMkpYUmxWYWFFNVZTR1pHUzI1cVMyNW1WWFZQVWxNM0wwMVNVa1JXYkhGQllsUnRVRU12ZWxGc0t6bDJZelYzTXdwd1VrRkxNemRoTnlzdlZFUnVVSGR3WlU5VlUzTldkVlZQY0VWRFIzUlVVbFpPYWxKRFRGQXpWSEYxYnpsYVpHOXBaamg1WWt4ck0wUktWbVJUYlhKeENuWkVjVWhSZVRoRFoxbEZRVFJwYkRscVNEZDViazkzTWs5SVVXSkVLMWhqVEhoTFpucHFXblJZY1RORVEybFlUbWc1S3poTGQxYzFXSGxFWTIxb0wzSUtVREpyVTJ0MlEzWkZSR1pDTjNCQ1VHRmpMMEZ3YTBoR2FUWjBjMU5NWVdaaWVqRldWazltVjB4MmQyVlZjVVp1WlhwMU5ucFhSREJ4YkZBd01qZFZOUXA2VmpSSmFtdG9XbU5UUkRONE4zSk1TSFkyTTNoelRqQk9WU3N2UlZwcGJFODNWbFpoTTFKWGNtODFPQ3RNU2k4MVUyWlBiRXMwUFFvdExTMHRMVVZPUkNCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRPT0=
---
# Source: greymatter/charts/catalog/templates/bootstrap-configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: catalog-bootstrap-script
  namespace: dhs
data:
  bootstrap.sh: |-
    #!/usr/bin/env sh
    
    set -eo pipefail
    
    MESH_CONFIG_DIR="/etc/config/mesh/"
    CURL_COMMAND='curl -s -o /dev/null -w "%{http_code}"'
    HTTP="http"
    
    echo "Configuring mesh from config directory: $MESH_CONFIG_DIR"
    
    echo "Debug set to: $DEBUG"
    if [ "$DEBUG" == "true" ]; then
        set -x
        echo "DEBUG: Catalog API Host: $CATALOG_API_HOST"
        echo "DEBUG: Catalog API USE_TLS: $USE_TLS "
    fi
    
    cd $MESH_CONFIG_DIR
    
    if [ "$USE_TLS" == "true" ]; then
        CURL_COMMAND='curl -s -o /dev/null -w "%{http_code}" -k --cacert /etc/pki/ca.crt --cert /etc/pki/server.crt --key /etc/pki/server.key'
        HTTP="https"
    fi
    
    echo "Config dir contains:"
    ls
    
    # This script expects the gm catalog api to be up and available to serve requests
    # Currently, this is handled in a fairly good idiomatic way using Readiness Probes and `k8s-waiter`
    
    echo "Starting catalog configuration ..."
    
    delay=0.01
    
    sendCommand() {
        if [ "$DEBUG" == "true" ]; then
            echo "Contents of $2..."
            echo
            cat $2
            echo
        fi
    
        echo "Uploading $file..."
        http_response=$($CURL_COMMAND -X POST -d @$2 $HTTP://$CATALOG_API_HOST/$1)
        if [ "$DEBUG" == "true" ]; then
            echo $http_response
        fi 
    
        http_response="${http_response%\"}"
        http_response="${http_response#\"}"
    
        if [ $http_response != "200" ]; then
            echo "There was an error uploading a file to catalog.  Exiting"
            exit 1
        fi
        
    }
    
    cd $MESH_CONFIG_DIR/zones
    echo "Loading the zones to catalog ..."
    for file in $(ls); do
        sendCommand zones $file
    done
    
    cd $MESH_CONFIG_DIR/services
    for d in */; do
        echo
        echo "Found service: $d"
        cd $d
    
        for file in $(ls); do
            echo "Creating catalog item $file"
            sendCommand clusters $file
        done
    
        cd $MESH_CONFIG_DIR/services
    done
    
    echo "Catalog configuration complete"
---
# Source: greymatter/charts/catalog/templates/bootstrap-zone-configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: catalog-zone-bootstrap
  namespace: dhs
data:
  zone.json: |-
    {
      "serverAddress": "control.dhs.svc.cluster.local:50000",
      "zoneName": "zone-default-zone",
      "requestCluster": "edge"
    }
---
# Source: greymatter/charts/catalog/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-intake-catalog-api-config
  namespace: dhs
data:
  service.json: |-
    {
      "clusterName": "intake",
      "zoneName": "zone-default-zone",
      "name": "USCIS Intake Service",
      "version": "1.0.0",
      "owner": "USCIS",
      "capability": "Payments",
      "runtime": "GO",
      "documentation": "",
      "prometheusJob": "",
      "minInstances": 1,
      "maxInstances": 1,
      "authorized": true,
      "clusterID": "",
      "meshID": "",
      "enableInstanceMetrics": true,
      "enableHistoricalMetrics": true,
      "metricsTemplate": "",
      "metricsPort": 8081
    }
    
...
---
# Source: greymatter/charts/catalog/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-jwt-security-catalog-api-config
  namespace: dhs
data:
  service.json: |-
    {
      "clusterName": "jwt-security",
      "zoneName": "zone-default-zone",
      "name": "Grey Matter JWT Security",
      "version": "0.2.0",
      "owner": "Decipher",
      "capability": "Grey Matter",
      "runtime": "GO",
      "documentation": "",
      "prometheusJob": "",
      "minInstances": 1,
      "maxInstances": 1,
      "authorized": true,
      "clusterID": "",
      "meshID": "",
      "enableInstanceMetrics": true,
      "enableHistoricalMetrics": true,
      "metricsTemplate": "",
      "metricsPort": 8081
    }
    
...
---
# Source: greymatter/charts/catalog/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-payment-catalog-api-config
  namespace: dhs
data:
  service.json: |-
    {
      "clusterName": "payment",
      "zoneName": "zone-default-zone",
      "name": "USCIS Payment Service",
      "version": "1.0.0",
      "owner": "USCIS",
      "capability": "Payments",
      "runtime": "GO",
      "documentation": "",
      "prometheusJob": "",
      "minInstances": 1,
      "maxInstances": 1,
      "authorized": true,
      "clusterID": "",
      "meshID": "",
      "enableInstanceMetrics": true,
      "enableHistoricalMetrics": true,
      "metricsTemplate": "",
      "metricsPort": 8081
    }
    
...
---
# Source: greymatter/charts/catalog/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-edge-catalog-api-config
  namespace: dhs
data:
  service.json: |-
    {
      "clusterName": "edge",
      "zoneName": "zone-default-zone",
      "name": "Grey Matter Edge",
      "version": "1.1.0",
      "owner": "Decipher",
      "capability": "Grey Matter",
      "runtime": "GO",
      "documentation": "",
      "prometheusJob": "",
      "minInstances": 1,
      "maxInstances": 1,
      "authorized": true,
      "clusterID": "",
      "meshID": "",
      "enableInstanceMetrics": true,
      "enableHistoricalMetrics": true,
      "metricsTemplate": "",
      "metricsPort": 8081
    }
    
...
---
# Source: greymatter/charts/catalog/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-dashboard-catalog-api-config
  namespace: dhs
data:
  service.json: |-
    {
      "clusterName": "dashboard",
      "zoneName": "zone-default-zone",
      "name": "Grey Matter Dashboard",
      "version": "3.1.0",
      "owner": "Decipher",
      "capability": "Grey Matter",
      "runtime": "GO",
      "documentation": "",
      "prometheusJob": "",
      "minInstances": 1,
      "maxInstances": 1,
      "authorized": true,
      "clusterID": "",
      "meshID": "",
      "enableInstanceMetrics": true,
      "enableHistoricalMetrics": true,
      "metricsTemplate": "",
      "metricsPort": 8081
    }
    
...
---
# Source: greymatter/charts/catalog/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-data-catalog-api-config
  namespace: dhs
data:
  service.json: |-
    {
      "clusterName": "data",
      "zoneName": "zone-default-zone",
      "name": "Grey Matter Data",
      "version": "0.2.7",
      "owner": "Decipher",
      "capability": "Grey Matter",
      "runtime": "GO",
      "documentation": "/services/data/latest/static/ui/index.html",
      "prometheusJob": "",
      "minInstances": 1,
      "maxInstances": 1,
      "authorized": true,
      "clusterID": "",
      "meshID": "",
      "enableInstanceMetrics": true,
      "enableHistoricalMetrics": true,
      "metricsTemplate": "",
      "metricsPort": 8081
    }
    
...
---
# Source: greymatter/charts/catalog/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-catalog-catalog-api-config
  namespace: dhs
data:
  service.json: |-
    {
      "clusterName": "catalog",
      "zoneName": "zone-default-zone",
      "name": "Grey Matter Catalog",
      "version": "1.0.1",
      "owner": "Decipher",
      "capability": "Grey Matter",
      "runtime": "GO",
      "documentation": "/services/catalog/latest/",
      "prometheusJob": "",
      "minInstances": 1,
      "maxInstances": 1,
      "authorized": true,
      "clusterID": "",
      "meshID": "",
      "enableInstanceMetrics": true,
      "enableHistoricalMetrics": true,
      "metricsTemplate": "",
      "metricsPort": 8081
    }
    
...
---
# Source: greymatter/charts/catalog/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-gm-control-api-catalog-api-config
  namespace: dhs
data:
  service.json: |-
    {
      "clusterName": "gm-control-api",
      "zoneName": "zone-default-zone",
      "name": "Grey Matter Control API",
      "version": "0.8.1",
      "owner": "Decipher",
      "capability": "Grey Matter",
      "runtime": "GO",
      "documentation": "",
      "prometheusJob": "",
      "minInstances": 1,
      "maxInstances": 1,
      "authorized": true,
      "clusterID": "",
      "meshID": "",
      "enableInstanceMetrics": true,
      "enableHistoricalMetrics": true,
      "metricsTemplate": "",
      "metricsPort": 8081
    }
    
...
---
# Source: greymatter/charts/catalog/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-slo-catalog-api-config
  namespace: dhs
data:
  service.json: |-
    {
      "clusterName": "slo",
      "zoneName": "zone-default-zone",
      "name": "Grey Matter Service Level Objectives",
      "version": "0.5.0",
      "owner": "Decipher",
      "capability": "Grey Matter",
      "runtime": "GO",
      "documentation": "",
      "prometheusJob": "",
      "minInstances": 1,
      "maxInstances": 1,
      "authorized": true,
      "clusterID": "",
      "meshID": "",
      "enableInstanceMetrics": true,
      "enableHistoricalMetrics": true,
      "metricsTemplate": "",
      "metricsPort": 8081
    }
    
...
---
# Source: greymatter/charts/dashboard/templates/prometheus-configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus
  namespace: dhs
data:
  prometheus.yaml: |-
    global:
      scrape_interval:     5s
      evaluation_interval: 2m

    # References the recording rules YAML file below
    rule_files:
      - "/etc/prometheus/recording_rules.yaml"

    scrape_configs:

      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      - job_name: kubernetes
        metrics_path: /prometheus
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - "dhs"
        relabel_configs:
        # Drop all named ports that are not "metrics"
        - source_labels: ['__meta_kubernetes_pod_container_port_name']
          regex: 'metrics'
          action: 'keep'
        # Relabel Jobs to the service name and version of the zk path
        - source_labels: ['__meta_kubernetes_pod_label_app']
          regex: '(.*)'
          target_label:  'job'
          #replacement:   '${1}'
          replacement:   '${1}'

  # Copied from https://github.com/DecipherNow/gm-dashboard/blob/master/docker/prometheus/recording_rules.yml
  recording_rules.yaml: |-
    # Dashboard version: 3.1.0
    # time intervals:
    # ["1h", "4h", "12h"]

    groups:
      # queries for overall services
      - name: overviewQueries
        rules:
          - record: overviewQueries:avgUpPercent:avg
            expr: avg by (job) (up)
          # avgResponseTimeByRoute
          - record: overviewQueries:avgResponseTimeByRoute_1h:avg
            expr: avg(rate(http_request_duration_seconds_sum{key!="all"}[1h]) / rate(http_request_duration_seconds_count{key!="all"}[1h]) * 1000 > 0) by (job, key)
          - record: overviewQueries:avgResponseTimeByRoute_4h:avg
            expr: avg(rate(http_request_duration_seconds_sum{key!="all"}[4h]) / rate(http_request_duration_seconds_count{key!="all"}[4h]) * 1000 > 0) by (job, key)
          - record: overviewQueries:avgResponseTimeByRoute_12h:avg
            expr: avg(rate(http_request_duration_seconds_sum{key!="all"}[12h]) / rate(http_request_duration_seconds_count{key!="all"}[12h]) * 1000 > 0) by (job, key)
            # numberOfRequestsByRoute
          - record: overviewQueries:numberOfRequestsByRoute_1h:sum
            expr: sum(floor(increase(http_request_duration_seconds_count[1h])) >= 1) by (job, key)
          - record: overviewQueries:numberOfRequestsByRoute_4h:sum
            expr: sum(floor(increase(http_request_duration_seconds_count[4h])) >= 1) by (job, key)
          - record: overviewQueries:numberOfRequestsByRoute_12h:sum
            expr: sum(floor(increase(http_request_duration_seconds_count[12h])) >= 1) by (job, key)
            # latencyByRoute
          - record: overviewQueries:latencyByRoute_1h:sum
            expr: sum without(instance, status)(rate(http_request_duration_seconds_count{key!="all"}[1h])) > 0
          - record: overviewQueries:latencyByRoute_4h:sum
            expr: sum without(instance, status)(rate(http_request_duration_seconds_count{key!="all"}[4h])) > 0
          - record: overviewQueries:latencyByRoute_12h:sum
            expr: sum without(instance, status)(rate(http_request_duration_seconds_count{key!="all"}[12h])) > 0
            # error percent
          - record: overviewQueries:errorPercent_1h:sum
            expr: sum(floor(increase(http_request_duration_seconds_count{status!~"2..|3..", key!="all"}[1h]) )) by (job) / sum(floor(increase(http_request_duration_seconds_count{key!="all"}[1h]) )) by (job) * 100
          - record: overviewQueries:errorPercent_4h:sum
            expr: sum(floor(increase(http_request_duration_seconds_count{status!~"2..|3..", key!="all"}[4h]) )) by (job) / sum(floor(increase(http_request_duration_seconds_count{key!="all"}[4h]) )) by (job) * 100
          - record: overviewQueries:errorPercent_12h:sum
            expr: sum(floor(increase(http_request_duration_seconds_count{status!~"2..|3..", key!="all"}[12h]) )) by (job) / sum(floor(increase(http_request_duration_seconds_count{key!="all"}[12h]) )) by (job) * 100

        # queries for each route
      - name: queriesByRoute
        rules:
          # error percent
          - record: queriesByRoute:errorPercent_1h:sum
            expr: sum(floor(increase(http_request_duration_seconds_count{status!~"2..|3..", key!="all"}[1h]) )) by (job, key, method) / sum(floor(increase(http_request_duration_seconds_count{key!="all"}[1h]) )) by (job, key, method) * 100
          - record: queriesByRoute:errorPercent_4h:sum
            expr: sum(floor(increase(http_request_duration_seconds_count{status!~"2..|3..", key!="all"}[4h]) )) by (job, key, method) / sum(floor(increase(http_request_duration_seconds_count{key!="all"}[4h]) )) by (job, key, method) * 100
          - record: queriesByRoute:errorPercent_12h:sum
            expr: sum(floor(increase(http_request_duration_seconds_count{status!~"2..|3..", key!="all"}[12h]) )) by (job, key, method) / sum(floor(increase(http_request_duration_seconds_count{key!="all"}[12h]) )) by (job, key, method) * 100
            # p95Latency
          - record: queriesByRoute:p95Latency_1h:sum
            expr: round(histogram_quantile(0.95,avg without(instance, status)(rate(http_request_duration_seconds_bucket[1h]))) * 1000, 0.1)
          - record: queriesByRoute:p95Latency_4h:sum
            expr: round(histogram_quantile(0.95,avg without(instance, status)(rate(http_request_duration_seconds_bucket[4h]))) * 1000, 0.1)
          - record: queriesByRoute:p95Latency_12h:sum
            expr: round(histogram_quantile(0.95,avg without(instance, status)(rate(http_request_duration_seconds_bucket[12h]))) * 1000, 0.1)
            # p50 latency
          - record: queriesByRoute:p50Latency_1h:sum
            expr: round(histogram_quantile(0.50,avg without(instance, status)(rate(http_request_duration_seconds_bucket[1h]))) * 1000, 0.1)
          - record: queriesByRoute:p50Latency_4h:sum
            expr: round(histogram_quantile(0.50,avg without(instance, status)(rate(http_request_duration_seconds_bucket[4h]))) * 1000, 0.1)
          - record: queriesByRoute:p50Latency_12h:sum
            expr: round(histogram_quantile(0.50,avg without(instance, status)(rate(http_request_duration_seconds_bucket[12h]))) * 1000, 0.1)
            # request count for route
          - record: queriesByRoute:requestCount_1h:sum
            expr: sum(floor(increase(http_request_duration_seconds_count[1h])) >= 1) by (job, key, method)
          - record: queriesByRoute:requestCount_4h:sum
            expr: sum(floor(increase(http_request_duration_seconds_count[4h])) >= 1) by (job, key, method)
          - record: queriesByRoute:requestCount_12h:sum
            expr: sum(floor(increase(http_request_duration_seconds_count[12h])) >= 1) by (job, key, method)

        # range queries
      - name: rangeQueries
        rules:
          # pXXLatency range queries
          - record: rangeQueries:p50Latency:sum
            expr: round(histogram_quantile(0.50,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m]))) * 1000, 0.1)
          - record: rangeQueries:p90Latency:sum
            expr: round(histogram_quantile(0.90,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m]))) * 1000, 0.1)
          - record: rangeQueries:p95Latency:sum
            expr: round(histogram_quantile(0.95,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m]))) * 1000, 0.1)
          - record: rangeQueries:p99Latency:sum
            expr: round(histogram_quantile(0.99,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m]))) * 1000, 0.1)
          - record: rangeQueries:p999Latency:sum
            expr: round(histogram_quantile(0.999,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m]))) * 1000, 0.1)
          - record: rangeQueries:p9999Latency:sum
            expr: round(histogram_quantile(0.9999,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m]))) * 1000, 0.1)
            # error percent by (job, key)
          - record: rangeQueries:errorPercent:sum
            expr: sum(floor(increase(http_request_duration_seconds_count{status!~"2..|3..", key!="all"}[1m]) )) by (job, key) / sum(floor(increase(http_request_duration_seconds_count{key!="all"}[1m]) )) by (job, key) * 100
            # respones time per bucket
          - record: rangeQueries:responseTimeP50:sum
            expr: round(histogram_quantile(0.50,avg without(instance, status, key, method)(rate(http_request_duration_seconds_bucket{key!="all"}[10m]))) * 1000, 0.1)
          - record: rangeQueries:responseTimeP90:sum
            expr: round(histogram_quantile(0.90,avg without(instance, status, key, method)(rate(http_request_duration_seconds_bucket{key!="all"}[10m]))) * 1000, 0.1)
          - record: rangeQueries:responseTimeP95:sum
            expr: round(histogram_quantile(0.95,avg without(instance, status, key, method)(rate(http_request_duration_seconds_bucket{key!="all"}[10m]))) * 1000, 0.1)
          - record: rangeQueries:responseTimeP99:sum
            expr: round(histogram_quantile(0.99,avg without(instance, status, key, method)(rate(http_request_duration_seconds_bucket{key!="all"}[10m]))) * 1000, 0.1)
          - record: rangeQueries:responseTimeP999:sum
            expr: round(histogram_quantile(0.999,avg without(instance, status, key, method)(rate(http_request_duration_seconds_bucket{key!="all"}[10m]))) * 1000, 0.1)
          - record: rangeQueries:responseTimeP9999:sum
            expr: round(histogram_quantile(0.9999,avg without(instance, status, key, method)(rate(http_request_duration_seconds_bucket{key!="all"}[10m]))) * 1000, 0.1)

            # error violation
          - record: rangeQueries:errorViolation:sum
            expr: (1 - (sum without(instance, status, key, method)(rate(http_request_duration_seconds_count{key!="all",status=~"2..|3.."}[1m]))) / (sum without(instance, status, key, method)(rate(http_request_duration_seconds_count{key!="all"}[1m])))) * 100
            # requests violation
          - record: rangeQueries:requestRateViolation:sum
            expr: sum without(instance, status, key, method)(rate(http_request_duration_seconds_count{key!="all"}[1m]))
            # request violations for route violation
          - record: rangeQueries:routeRequestViolations:sum
            expr: sum without(instance, status, method)(rate(http_request_duration_seconds_count[1m]))
            # route latencies
          - record: rangeQueries:routep50LatencyViolations:sum
            expr: histogram_quantile(0.50,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m])))
          - record: rangeQueries:routep90LatencyViolations:sum
            expr: histogram_quantile(0.90,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m])))
          - record: rangeQueries:routep95LatencyViolations:sum
            expr: histogram_quantile(0.95,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m])))
          - record: rangeQueries:routep99LatencyViolations:sum
            expr: histogram_quantile(0.99,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m])))
          - record: rangeQueries:routep999LatencyViolations:sum
            expr: histogram_quantile(0.999,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m])))
          - record: rangeQueries:routep9999LatencyViolations:sum
            expr: histogram_quantile(0.9999,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m])))
---
# Source: greymatter/charts/data/templates/mongo-configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: data-mongo-init
  namespace: dhs
data:
  gmdata.js: |-
    db.auth("mongogm", "USCISMongoA32")
    db = db.getSiblingDB("gmdata")
    db.createUser({
        user: "mongogm",
        pwd: "USCISMongo64",
        roles: [
        {
            role: 'root',
            db: 'admin',
        },
        ],
    });
---
# Source: greymatter/charts/gm-control-api/templates/bootstrap-configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: bootstrap-script
  namespace: dhs
data:
  bootstrap.sh: |-
    #!/usr/bin/env sh
    
    MESH_CONFIG_DIR="/etc/config/mesh/"
    
    echo "Configuring mesh from config directory: $MESH_CONFIG_DIR"
    
    cd $MESH_CONFIG_DIR
    
    greymatter version
    
    echo "Config dir contains:"
    ls
    
    # This script expects gm-control-api to be up and available to serve requests
    # Currently, this is handled in a fairly good idiomatic way using Readiness Probes and `k8s-waiter`
    
    echo "Starting mesh configuration ..."
    
    echo "Creating service configuration objects..."
    
    delay=0.01
    
    cd $MESH_CONFIG_DIR/services
    # Each service should be able to be created all by itself. This means it needs to contain a domain
    for d in */; do
        echo "Found service: $d"
        cd $d
    
        # The ordering of creating gm-control-api resources is extremely important and precise.
        # All objects referenced by keys must be created before being referenced or will result in an error.
        # So we add a delay of 0.1 seconds between each request to hopefully streamline this
        # A better option is probably to hardcode the order of items
    
        names="domain cluster listener proxy shared_rules route"
        for name in $names; do
            echo "Creating mesh object: $name."
            greymatter create $name <$name.json
            sleep $delay
        done
    
        cd $MESH_CONFIG_DIR/services
    done
    
    # The edge service is created last as it links to the clusters of every other service.
    # The edge domain must be created before it can be referenced
    cd $MESH_CONFIG_DIR/special
    echo "Creating special configuration objects (domain, edge listener + proxy)"
    greymatter create domain <domain.json
    greymatter create listener <listener.json
    greymatter create proxy <proxy.json
    greymatter create cluster <cluster.json
    greymatter create shared_rules <shared_rules.json
    greymatter create route <route.json
    
    # for file in $(ls route*.json); do
    #     greymatter create route < $file
    # done
    
    cd $MESH_CONFIG_DIR/edge
    echo "Creating edge configuration objects"
    
    # All the following services reference the `edge` domain key
    for d in */; do
        echo "Found service: $d"
        cd $d
    
        names="cluster shared_rules"
        for name in $names; do
            echo "Creating mesh object: $name."
            greymatter create $name <$name.json
            sleep $delay
        done
    
        for file in route-*.json; do
            echo "Creating mesh object: $name."
            greymatter create route <$file
            sleep $delay
        done
    
        cd $MESH_CONFIG_DIR/edge
    done
    
    cd $MESH_CONFIG_DIR/special
    echo "Adding additional Special Routes"
    for rte in $(ls route-*.json); do
        greymatter create route <$rte
    done
    # greymatter create route < route-data-jwt-slash.json
    # greymatter create route < route-data-jwt.json
    # greymatter create route < route-dashboard-slash.json
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-slo-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-slo-cluster",
      "name": "slo",
      "instances": [],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": [],
      "require_tls": true,
      "ssl_config": {
        "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
        "protocols": [
          "SSLv3",
          "SSLv2",
          "TLSv1",
          "TLSv1.1",
          "TLSv1.2"
        ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      }
    }
    
  route-1.json: |-
    {
      "route_key": "edge-slo-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/slo/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-slo-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-slo-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/slo/latest",
      "prefix_rewrite": "/services/slo/latest/",
      "redirects": null,
      "shared_rules_key": "edge-slo-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-slo-shared-rules",
      "name": "slo",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-slo-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-data-internal-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-data-internal-cluster",
      "name": "data-internal",
      "instances": [],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": [],
      "require_tls": true,
      "ssl_config": {
        "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
        "protocols": [
          "SSLv3",
          "SSLv2",
          "TLSv1",
          "TLSv1.1",
          "TLSv1.2"
        ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      }
    }
    
  route-1.json: |-
    {
      "route_key": "edge-data-internal-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/data-internal/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-data-internal-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-data-internal-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/data-internal/latest",
      "prefix_rewrite": "/services/data-internal/latest/",
      "redirects": null,
      "shared_rules_key": "edge-data-internal-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-data-internal-shared-rules",
      "name": "data-internal",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-data-internal-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-slo-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-slo",
      "zone_key": "zone-default-zone",
      "name": "service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 1337
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain.json: |-
    {
      "domain_key": "domain-slo",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 8080,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "force_https": true
    }
    
  listener.json: |-
    {
      "listener_key": "listener-slo",
      "zone_key": "zone-default-zone",
      "name": "slo",
      "ip": "0.0.0.0",
      "port": 8080,
      "protocol": "http_auto",
      "domain_keys": ["domain-slo"],
      "tracing_config": null
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-slo",
      "zone_key": "zone-default-zone",
      "name": "slo",
      "domain_keys": [
        "domain-slo"
      ],
      "listener_keys": [
          "listener-slo"
      ],
      "listeners": null,
      "active_proxy_filters": [
        "gm.metrics" 
      ],
      "proxy_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_ring_buffer_size": 4096,
          "metrics_key_function": "depth",
          "metrics_key_depth": "1"
        }
      }
    }
  route.json: |-
    {
      "route_key": "route-slo",
      "domain_key": "domain-slo",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-slo",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-slo",
      "name": "slo",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-slo",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-intake-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-intake",
      "zone_key": "zone-default-zone",
      "name": "service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 1337
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain.json: |-
    {
      "domain_key": "domain-intake",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 8080,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "force_https": true
    }
    
  listener.json: |-
    {
      "listener_key": "listener-intake",
      "zone_key": "zone-default-zone",
      "name": "intake",
      "ip": "0.0.0.0",
      "port": 8080,
      "protocol": "http_auto",
      "domain_keys": ["domain-intake"],
      "tracing_config": null
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-intake",
      "zone_key": "zone-default-zone",
      "name": "intake",
      "domain_keys": [
        "domain-intake"
      ],
      "listener_keys": [
          "listener-intake"
      ],
      "listeners": null,
      "active_proxy_filters": [
        "gm.metrics" 
      ],
      "proxy_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_ring_buffer_size": 4096,
          "metrics_key_function": "depth",
          "metrics_key_depth": "1"
        }
      }
    }
  route.json: |-
    {
      "route_key": "route-intake",
      "domain_key": "domain-intake",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-intake",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-intake",
      "name": "intake",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-intake",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-internal-jwt-security-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-internal-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 3000
        }
      ],
      "require_tls": true,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain.json: |-
    {
      "domain_key": "domain-internal-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 8080,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "force_https": true
    }
    
  listener.json: |-
    {
      "listener_key": "listener-internal-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "internal-jwt-security",
      "ip": "0.0.0.0",
      "port": 8080,
      "protocol": "http_auto",
      "domain_keys": ["domain-internal-jwt-security"],
      "tracing_config": null
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-internal-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "internal-jwt-security",
      "domain_keys": [
        "domain-internal-jwt-security"
      ],
      "listener_keys": [
          "listener-internal-jwt-security"
      ],
      "listeners": null,
      "active_proxy_filters": [
        "gm.metrics" 
      ],
      "proxy_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_ring_buffer_size": 4096,
          "metrics_key_function": "depth",
          "metrics_key_depth": "1"
        }
      }
    }
  route.json: |-
    {
      "route_key": "route-internal-jwt-security",
      "domain_key": "domain-internal-jwt-security",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-internal-jwt-security",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-internal-jwt-security",
      "name": "internal-jwt-security",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-internal-jwt-security",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-dashboard-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-dashboard",
      "zone_key": "zone-default-zone",
      "name": "service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 1337
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain.json: |-
    {
      "domain_key": "domain-dashboard",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 8080,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "force_https": true
    }
    
  listener.json: |-
    {
      "listener_key": "listener-dashboard",
      "zone_key": "zone-default-zone",
      "name": "dashboard",
      "ip": "0.0.0.0",
      "port": 8080,
      "protocol": "http_auto",
      "domain_keys": ["domain-dashboard"],
      "tracing_config": null
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-dashboard",
      "zone_key": "zone-default-zone",
      "name": "dashboard",
      "domain_keys": [
        "domain-dashboard"
      ],
      "listener_keys": [
          "listener-dashboard"
      ],
      "listeners": null,
      "active_proxy_filters": [
        "gm.metrics" 
      ],
      "proxy_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_ring_buffer_size": 4096,
          "metrics_key_function": "depth",
          "metrics_key_depth": "1"
        }
      }
    }
  route.json: |-
    {
      "route_key": "route-dashboard",
      "domain_key": "domain-dashboard",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-dashboard",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-dashboard",
      "name": "dashboard",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-dashboard",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-internal-jwt-security-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-internal-jwt-security-cluster",
      "name": "internal-jwt-security",
      "instances": [],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": [],
      "require_tls": true,
      "ssl_config": {
        "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
        "protocols": [
          "SSLv3",
          "SSLv2",
          "TLSv1",
          "TLSv1.1",
          "TLSv1.2"
        ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      }
    }
    
  route-1.json: |-
    {
      "route_key": "edge-internal-jwt-security-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/internal-jwt-security/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-internal-jwt-security-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/internal-jwt-security/latest",
      "prefix_rewrite": "/services/internal-jwt-security/latest/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "name": "internal-jwt-security",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-internal-jwt-security-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-prometheus-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-prometheus-cluster",
      "name": "prometheus",
      "instances": [],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": [],
      "require_tls": true,
      "ssl_config": {
        "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
        "protocols": [
          "SSLv3",
          "SSLv2",
          "TLSv1",
          "TLSv1.1",
          "TLSv1.2"
        ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      }
    }
    
  route-1.json: |-
    {
      "route_key": "edge-prometheus-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/prometheus/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-prometheus-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-prometheus-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/prometheus/latest",
      "prefix_rewrite": "/services/prometheus/latest/",
      "redirects": null,
      "shared_rules_key": "edge-prometheus-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-prometheus-shared-rules",
      "name": "prometheus",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-prometheus-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-catalog-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-catalog-cluster",
      "name": "catalog",
      "instances": [],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": [],
      "require_tls": true,
      "ssl_config": {
        "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
        "protocols": [
          "SSLv3",
          "SSLv2",
          "TLSv1",
          "TLSv1.1",
          "TLSv1.2"
        ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      }
    }
    
  route-1.json: |-
    {
      "route_key": "edge-catalog-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/catalog/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-catalog-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-catalog-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/catalog/latest",
      "prefix_rewrite": "/services/catalog/latest/",
      "redirects": null,
      "shared_rules_key": "edge-catalog-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-catalog-shared-rules",
      "name": "catalog",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-catalog-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-payment-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-payment",
      "zone_key": "zone-default-zone",
      "name": "service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 1337
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain.json: |-
    {
      "domain_key": "domain-payment",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 8080,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "force_https": true
    }
    
  listener.json: |-
    {
      "listener_key": "listener-payment",
      "zone_key": "zone-default-zone",
      "name": "payment",
      "ip": "0.0.0.0",
      "port": 8080,
      "protocol": "http_auto",
      "domain_keys": ["domain-payment"],
      "tracing_config": null
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-payment",
      "zone_key": "zone-default-zone",
      "name": "payment",
      "domain_keys": [
        "domain-payment"
      ],
      "listener_keys": [
          "listener-payment"
      ],
      "listeners": null,
      "active_proxy_filters": [
        "gm.metrics" 
      ],
      "proxy_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_ring_buffer_size": 4096,
          "metrics_key_function": "depth",
          "metrics_key_depth": "1"
        }
      }
    }
  route.json: |-
    {
      "route_key": "route-payment",
      "domain_key": "domain-payment",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-payment",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-payment",
      "name": "payment",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-payment",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: special-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
        "cluster_key": "cluster-edge",
        "zone_key": "zone-default-zone",
        "name": "edge",
        "instances": [
          {
              "host": "localhost",
              "port": 8080
          }
        ],
        "circuit_breakers": null,
        "outlier_detection": null,
        "health_checks": []
      }
  domain.json: |-
    {
        "domain_key": "edge",
        "zone_key": "zone-default-zone",
        "name": "*",
        "port": 8080,
        "redirects": null,
        "gzip_enabled": false,
        "cors_config": null,
        "aliases": null,
        "force_https": true,
        "ssl_config": {
            "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
            "protocols": ["SSLv3", "SSLv2", "TLSv1", "TLSv1.1", "TLSv1.2"],
            "require_client_certs": true,
            "trust_file": "/etc/proxy/tls/edge/ca.crt",
            "cert_key_pairs": [
                {
                    "certificate_path": "/etc/proxy/tls/edge/server.crt",
                    "key_path": "/etc/proxy/tls/edge/server.key"
                }
            ]
        }
    }
  listener.json: |-
    {
        "zone_key": "zone-default-zone",
        "listener_key": "edge-listener",
        "domain_keys": ["edge"],
        "name": "edge",
        "ip": "0.0.0.0",
        "port": 8080,
        "protocol": "http_auto",
        "tracing_config": null
    }
  proxy.json: |-
    {
      "zone_key": "zone-default-zone",
      "proxy_key": "edge-proxy",
      "domain_keys": ["edge"],
      "listener_keys": ["edge-listener"],
      "name": "edge",
      "listeners": null,
      "active_proxy_filters": ["gm.metrics", "gm.inheaders"],
      "proxy_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "metrics_ring_buffer_size": 4096,
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_key_function": "none"
        }
      }
    }
    
  route-catalog-to-internal-data-slash.json: |-
    {
      "route_key": "catalog-internal-data-route-slash",
      "domain_key": "domain-catalog",
      "zone_key": "zone-default-zone",
      "path": "/data",
      "prefix_rewrite": "/data/",
      "redirects": null,
      "shared_rules_key": "edge-data-internal-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-catalog-to-internal-data.json: |-
    {
      "route_key": "catalog-internal-data-route",
      "domain_key": "domain-catalog",
      "zone_key": "zone-default-zone",
      "path": "/data/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-data-internal-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-dashboard-slash.json: |-
    {
      "route_key": "edge-dashboard-route-no-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "edge-dashboard-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-data-jwt-slash.json: |-
    {
      "route_key": "data-jwt-route-slash",
      "domain_key": "domain-data",
      "zone_key": "zone-default-zone",
      "path": "/jwt",
      "prefix_rewrite": "/jwt/",
      "redirects": null,
      "shared_rules_key": "edge-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-data-jwt.json: |-
    {
      "route_key": "data-jwt-route",
      "domain_key": "domain-data",
      "zone_key": "zone-default-zone",
      "path": "/jwt/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-internal-data-jwt-slash.json: |-
    {
      "route_key": "data-internal-jwt-route-slash",
      "domain_key": "domain-data-internal",
      "zone_key": "zone-default-zone",
      "path": "/jwt",
      "prefix_rewrite": "/jwt/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-internal-data-jwt.json: |-
    {
      "route_key": "data-internal-jwt-route",
      "domain_key": "domain-data-internal",
      "zone_key": "zone-default-zone",
      "path": "/jwt/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route.json: |-
    {
      "route_key": "route-edge",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/edge/latest/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-edge",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-edge",
      "name": "edge",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-edge",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-payment-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-payment-cluster",
      "name": "payment",
      "instances": [],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": [],
      "require_tls": true,
      "ssl_config": {
        "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
        "protocols": [
          "SSLv3",
          "SSLv2",
          "TLSv1",
          "TLSv1.1",
          "TLSv1.2"
        ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      }
    }
    
  route-1.json: |-
    {
      "route_key": "edge-payment-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/payment/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-payment-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-payment-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/payment/latest",
      "prefix_rewrite": "/services/payment/latest/",
      "redirects": null,
      "shared_rules_key": "edge-payment-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-payment-shared-rules",
      "name": "payment",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-payment-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-data-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-data-cluster",
      "name": "data",
      "instances": [],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": [],
      "require_tls": true,
      "ssl_config": {
        "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
        "protocols": [
          "SSLv3",
          "SSLv2",
          "TLSv1",
          "TLSv1.1",
          "TLSv1.2"
        ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      }
    }
    
  route-1.json: |-
    {
      "route_key": "edge-data-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/data/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-data-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-data-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/data/latest",
      "prefix_rewrite": "/services/data/latest/",
      "redirects": null,
      "shared_rules_key": "edge-data-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-data-shared-rules",
      "name": "data",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-data-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-dashboard-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-dashboard-cluster",
      "name": "dashboard",
      "instances": [],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": [],
      "require_tls": true,
      "ssl_config": {
        "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
        "protocols": [
          "SSLv3",
          "SSLv2",
          "TLSv1",
          "TLSv1.1",
          "TLSv1.2"
        ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      }
    }
    
  route-1.json: |-
    {
      "route_key": "edge-dashboard-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/dashboard/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-dashboard-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-dashboard-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/dashboard/latest",
      "prefix_rewrite": "/services/dashboard/latest/",
      "redirects": null,
      "shared_rules_key": "edge-dashboard-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-dashboard-shared-rules",
      "name": "dashboard",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-dashboard-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-gm-control-api-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-gm-control-api-cluster",
      "name": "gm-control-api",
      "instances": [],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": [],
      "require_tls": true,
      "ssl_config": {
        "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
        "protocols": [
          "SSLv3",
          "SSLv2",
          "TLSv1",
          "TLSv1.1",
          "TLSv1.2"
        ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      }
    }
    
  route-1.json: |-
    {
      "route_key": "edge-gm-control-api-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/gm-control-api/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-gm-control-api-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-gm-control-api-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/gm-control-api/latest",
      "prefix_rewrite": "/services/gm-control-api/latest/",
      "redirects": null,
      "shared_rules_key": "edge-gm-control-api-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-gm-control-api-shared-rules",
      "name": "gm-control-api",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-gm-control-api-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-intake-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-intake-cluster",
      "name": "intake",
      "instances": [],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": [],
      "require_tls": true,
      "ssl_config": {
        "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
        "protocols": [
          "SSLv3",
          "SSLv2",
          "TLSv1",
          "TLSv1.1",
          "TLSv1.2"
        ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      }
    }
    
  route-1.json: |-
    {
      "route_key": "edge-intake-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/intake/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-intake-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-intake-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/intake/latest",
      "prefix_rewrite": "/services/intake/latest/",
      "redirects": null,
      "shared_rules_key": "edge-intake-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-intake-shared-rules",
      "name": "intake",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-intake-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-jwt-security-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 3000
        }
      ],
      "require_tls": true,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain.json: |-
    {
      "domain_key": "domain-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 8080,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "force_https": true
    }
    
  listener.json: |-
    {
      "listener_key": "listener-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "jwt-security",
      "ip": "0.0.0.0",
      "port": 8080,
      "protocol": "http_auto",
      "domain_keys": ["domain-jwt-security"],
      "tracing_config": null
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "jwt-security",
      "domain_keys": [
        "domain-jwt-security"
      ],
      "listener_keys": [
          "listener-jwt-security"
      ],
      "listeners": null,
      "active_proxy_filters": [
        "gm.metrics" 
      ],
      "proxy_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_ring_buffer_size": 4096,
          "metrics_key_function": "depth",
          "metrics_key_depth": "1"
        }
      }
    }
  route.json: |-
    {
      "route_key": "route-jwt-security",
      "domain_key": "domain-jwt-security",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-jwt-security",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-jwt-security",
      "name": "jwt-security",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-jwt-security",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-data-internal-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-data-internal",
      "zone_key": "zone-default-zone",
      "name": "service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 8181
        }
      ],
      "require_tls": true,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain.json: |-
    {
      "domain_key": "domain-data-internal",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 8080,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "force_https": true
    }
    
  listener.json: |-
    {
      "listener_key": "listener-data-internal",
      "zone_key": "zone-default-zone",
      "name": "data-internal",
      "ip": "0.0.0.0",
      "port": 8080,
      "protocol": "http_auto",
      "domain_keys": ["domain-data-internal"],
      "tracing_config": null
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-data-internal",
      "zone_key": "zone-default-zone",
      "name": "data-internal",
      "domain_keys": [
        "domain-data-internal"
      ],
      "listener_keys": [
          "listener-data-internal"
      ],
      "listeners": null,
      "active_proxy_filters": [
        "gm.metrics" 
      ],
      "proxy_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_ring_buffer_size": 4096,
          "metrics_key_function": "depth",
          "metrics_key_depth": "1"
        }
      }
    }
  route.json: |-
    {
      "route_key": "route-data-internal",
      "domain_key": "domain-data-internal",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-data-internal",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-data-internal",
      "name": "data-internal",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-data-internal",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-data-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-data",
      "zone_key": "zone-default-zone",
      "name": "service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 8181
        }
      ],
      "require_tls": true,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain.json: |-
    {
      "domain_key": "domain-data",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 8080,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "force_https": true
    }
    
  listener.json: |-
    {
      "listener_key": "listener-data",
      "zone_key": "zone-default-zone",
      "name": "data",
      "ip": "0.0.0.0",
      "port": 8080,
      "protocol": "http_auto",
      "domain_keys": ["domain-data"],
      "tracing_config": null
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-data",
      "zone_key": "zone-default-zone",
      "name": "data",
      "domain_keys": [
        "domain-data"
      ],
      "listener_keys": [
          "listener-data"
      ],
      "listeners": null,
      "active_proxy_filters": [
        "gm.metrics" 
      ],
      "proxy_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_ring_buffer_size": 4096,
          "metrics_key_function": "depth",
          "metrics_key_depth": "1"
        }
      }
    }
  route.json: |-
    {
      "route_key": "route-data",
      "domain_key": "domain-data",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-data",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-data",
      "name": "data",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-data",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-gm-control-api-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-gm-control-api",
      "zone_key": "zone-default-zone",
      "name": "service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 5555
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain.json: |-
    {
      "domain_key": "domain-gm-control-api",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 8080,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "force_https": true
    }
    
  listener.json: |-
    {
      "listener_key": "listener-gm-control-api",
      "zone_key": "zone-default-zone",
      "name": "gm-control-api",
      "ip": "0.0.0.0",
      "port": 8080,
      "protocol": "http_auto",
      "domain_keys": ["domain-gm-control-api"],
      "tracing_config": null
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-gm-control-api",
      "zone_key": "zone-default-zone",
      "name": "gm-control-api",
      "domain_keys": [
        "domain-gm-control-api"
      ],
      "listener_keys": [
          "listener-gm-control-api"
      ],
      "listeners": null,
      "active_proxy_filters": [
        "gm.metrics" 
      ],
      "proxy_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_ring_buffer_size": 4096,
          "metrics_key_function": "depth",
          "metrics_key_depth": "1"
        }
      }
    }
  route.json: |-
    {
      "route_key": "route-gm-control-api",
      "domain_key": "domain-gm-control-api",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-gm-control-api",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-gm-control-api",
      "name": "gm-control-api",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-gm-control-api",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-catalog-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-catalog",
      "zone_key": "zone-default-zone",
      "name": "service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 9080
        }
      ],
      "require_tls": true,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain.json: |-
    {
      "domain_key": "domain-catalog",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 8080,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "force_https": true
    }
    
  listener.json: |-
    {
      "listener_key": "listener-catalog",
      "zone_key": "zone-default-zone",
      "name": "catalog",
      "ip": "0.0.0.0",
      "port": 8080,
      "protocol": "http_auto",
      "domain_keys": ["domain-catalog"],
      "tracing_config": null
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-catalog",
      "zone_key": "zone-default-zone",
      "name": "catalog",
      "domain_keys": [
        "domain-catalog"
      ],
      "listener_keys": [
          "listener-catalog"
      ],
      "listeners": null,
      "active_proxy_filters": [
        "gm.metrics" 
      ],
      "proxy_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_ring_buffer_size": 4096,
          "metrics_key_function": "depth",
          "metrics_key_depth": "1"
        }
      }
    }
  route.json: |-
    {
      "route_key": "route-catalog",
      "domain_key": "domain-catalog",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-catalog",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-catalog",
      "name": "catalog",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-catalog",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-prometheus-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-prometheus",
      "zone_key": "zone-default-zone",
      "name": "service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 9090
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain.json: |-
    {
      "domain_key": "domain-prometheus",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 8080,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "ssl_config": {
          "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
          "protocols": [
            "SSLv3",
            "SSLv2",
            "TLSv1",
            "TLSv1.1",
            "TLSv1.2"
          ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      },
      "force_https": true
    }
    
  listener.json: |-
    {
      "listener_key": "listener-prometheus",
      "zone_key": "zone-default-zone",
      "name": "prometheus",
      "ip": "0.0.0.0",
      "port": 8080,
      "protocol": "http_auto",
      "domain_keys": ["domain-prometheus"],
      "tracing_config": null
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-prometheus",
      "zone_key": "zone-default-zone",
      "name": "prometheus",
      "domain_keys": [
        "domain-prometheus"
      ],
      "listener_keys": [
          "listener-prometheus"
      ],
      "listeners": null,
      "active_proxy_filters": [
        "gm.metrics" 
      ],
      "proxy_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_ring_buffer_size": 4096,
          "metrics_key_function": "depth",
          "metrics_key_depth": "1"
        }
      }
    }
  route.json: |-
    {
      "route_key": "route-prometheus",
      "domain_key": "domain-prometheus",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-prometheus",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-prometheus",
      "name": "prometheus",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-prometheus",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-jwt-security-mesh-config
  namespace: dhs
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-jwt-security-cluster",
      "name": "jwt-security",
      "instances": [],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": [],
      "require_tls": true,
      "ssl_config": {
        "cipher_filter": "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH",
        "protocols": [
          "SSLv3",
          "SSLv2",
          "TLSv1",
          "TLSv1.1",
          "TLSv1.2"
        ],
        "require_client_certs": true,
        "trust_file": "/etc/proxy/tls/sidecar/ca.crt",
        "cert_key_pairs": [
          {
            "certificate_path": "/etc/proxy/tls/sidecar/server.crt",
            "key_path": "/etc/proxy/tls/sidecar/server.key"
          }
        ]
      }
    }
    
  route-1.json: |-
    {
      "route_key": "edge-jwt-security-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/jwt-security/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-jwt-security-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/jwt-security/latest",
      "prefix_rewrite": "/services/jwt-security/latest/",
      "redirects": null,
      "shared_rules_key": "edge-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-jwt-security-shared-rules",
      "name": "jwt-security",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-jwt-security-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: greymatter/charts/gm-control-api/templates/domain-cfgmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: domain-config
  namespace: dhs
data:
  domain1.json: |-
    
  domain2.json: |-
---
# Source: greymatter/charts/internal-data/templates/mongo-configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: internal-data-mongo-init
  namespace: dhs
data:
  gmdata.js: |-
    db.auth("mongogm", "USCISMongoA32")
    db = db.getSiblingDB("gmdata")
    db.createUser({
        user: "mongogm",
        pwd: "USCISMongo64",
        roles: [
        {
            role: 'root',
            db: 'admin',
        },
        ],
    });
---
# Source: greymatter/charts/internal-jwt/templates/jwt-users.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: internal-jwt-users
  namespace: dhs
data:
  users.json: |-
    {
      "users": [
      {
        "label": "CN=gm-control,OU=Engineering,O=Decipher Technology Studios,=Alexandria,=Virginia,C=US",
        "values": {
          "email": [
              "gm-control@deciphernow.com"
          ],
          "org": [
              "www.deciphernow.com"
          ],
          "privilege": [
              "root"
          ]
        }
      },
      {
        "label": "CN=gm-catalog,OU=Engineering,O=Decipher Technology Studios,=Alexandria,=Virginia,C=US",
        "values": {
          "email": [
              "engineering@deciphernow.com"
          ],
          "org": [
              "www.deciphernow.com"
          ],
          "privilege": [
              "root"
          ]
        }
      }]
    }
---
# Source: greymatter/charts/jwt/templates/jwt-users.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: jwt-users
  namespace: dhs
data:
  users.json: |-
    {
      "users": []
    }
---
# Source: greymatter/charts/slo/templates/postgres-slo-config.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: postgres-slo-config
  namespace: dhs
data:
  pg_hba.conf: |-
    # TYPE  DATABASE        USER            ADDRESS                 METHOD

    # "local" is for Unix domain socket connections only
    local all all trust

    # IPv4 local connections:
    host all all 127.0.0.1/32 trust

    # IPv4 remote connections for authenticated users
    hostssl greymatter posgresgm 0.0.0.0/0 md5
---
# Source: greymatter/charts/slo/templates/postgres-slo-overrides.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: postgres-slo-overrides
  namespace: dhs
data:
  postgresql.conf: |-
    # These override configs in OpenShift's postgres container located at /var/lib/pgsql/data/userdata/postgresql.conf
    ssl = on
    hba_file = '/conf/pg_hba.conf'
    ssl_cert_file = '/certs/postgres.crt'
    ssl_key_file = '/certs/postgres.key'
    ssl_ca_file = '/certs/ca.pem'
---
# Source: greymatter/charts/dashboard/templates/prometheus-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: prometheus
  namespace: dhs
  # annotations:
  #    volume.beta.kubernetes.io/storage-class: glusterfs-storage
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 40Gi
---
# Source: greymatter/charts/gm-control-api/templates/gm-control-api-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: gm-control-api-pvc
  namespace: dhs
  # annotations:
  #    volume.beta.kubernetes.io/storage-class: glusterfs-storage
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: greymatter/charts/internal-data/templates/data-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: data-internal-pvc
  namespace: dhs
  # annotations:
  #    volume.beta.kubernetes.io/storage-class: glusterfs-storage
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 40Gi
---
# Source: greymatter/charts/internal-data/templates/data-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: data-pvc
  namespace: dhs
  # annotations:
  #    volume.beta.kubernetes.io/storage-class: glusterfs-storage
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 40Gi
---

# Source: greymatter/charts/slo/templates/postgres-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: postgres-slo
  namespace: dhs
  # annotations:
  #    volume.beta.kubernetes.io/storage-class: glusterfs-storage
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: "8Gi"
---
# Source: greymatter/charts/control/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: control-sa
---
# Source: greymatter/templates/waiter-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: waiter-sa
  namespace: dhs
---
# Source: greymatter/charts/control/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: control-sa-role
  namespace: dhs
rules:
- apiGroups: [""]
  resources: ["pods", "endpoints"]
  verbs: ["get", "list", "watch"]
---
# Source: greymatter/charts/control/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: control-sa-rolebinding
  namespace: dhs
subjects:
- kind: ServiceAccount
  name: control-sa
  namespace: dhs
roleRef:
  kind: Role
  name: control-sa-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: greymatter/templates/waiter-role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: waiter-sa-role
  namespace: dhs
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get", "list", "watch"]
---
# Source: greymatter/templates/waiter-rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: waiter-sa-rolebinding
  namespace: dhs
subjects:
- kind: ServiceAccount
  name: waiter-sa
  namespace: dhs
roleRef:
  kind: Role
  name: waiter-sa-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: greymatter/charts/catalog/templates/catalog-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: catalog
  # annotations:
  #   # This is what defines this resource as a hook. Without this line, the
  #   # job is considered part of the release.
  #   "helm.sh/hook": post-install
  #   "helm.sh/hook-weight": "5"
  #   "helm.sh/hook-delete-policy": hook-succeeded
spec:
  selector:
    app: catalog
  ports:
    - name: catalog
      port: 9080
      targetPort: 9080
  type: ClusterIP
  sessionAffinity: None
---
# Source: greymatter/charts/control/templates/control-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    run: control
  name: control
  namespace: dhs
spec:
  ports:
  - port: 50000
    protocol: TCP
    targetPort: grpc
  selector:
    run: control
  type: ClusterIP
---
# Source: greymatter/charts/data/templates/mongo-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: data-mongo
  namespace: dhs
spec:
  clusterIP: None
  ports:
    - name: mongo
      port: 27017
      protocol: TCP
      targetPort: 27017
  selector:
    app: data-mongo
  sessionAffinity: None
  type: ClusterIP
---
# Source: greymatter/charts/edge/templates/edge-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: edge
  namespace: dhs
  labels:
    app: edge
spec:
  ports:
    - name: proxy
      port: 8080
    - name: metrics
      port: 8081
  selector:
    app: edge
---
# Source: greymatter/charts/gm-control-api/templates/gm-control-api-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gm-control-api
spec:
  selector:
    app: gm-control-api
  ports:
  - port: 5555
    targetPort: 5555
---
# Source: greymatter/charts/internal-data/templates/mongo-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: internal-data-mongo
  namespace: dhs
spec:
  clusterIP: None
  ports:
    - name: mongo
      port: 27017
      protocol: TCP
      targetPort: 27017
  selector:
    app: internal-data-mongo
  sessionAffinity: None
  type: ClusterIP
---
# Source: greymatter/charts/internal-jwt/templates/redis-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: internal-redis
  namespace: dhs
spec:
  clusterIP: None
  ports:
    - name: server
      port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    app: internal-redis
  sessionAffinity: None
  type: ClusterIP
---
# Source: greymatter/charts/jwt/templates/redis-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: redis
  namespace: dhs
spec:
  clusterIP: None
  ports:
    - name: server
      port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    app: redis
  sessionAffinity: None
  type: ClusterIP
---
# Source: greymatter/charts/slo/templates/postgres-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: postgres-slo
  namespace: dhs
  labels:
    app: postgres-slo
spec:
  clusterIP: None
  ports:
  - name: postgres
    port: 5432
  selector:
    app: postgres-slo
  type: ClusterIP
---
# Source: greymatter/charts/catalog/templates/catalog.yaml
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: catalog
  namespace: dhs
spec:
  selector:
    matchLabels:
      app: catalog
      deployment: catalog
  replicas: 1
  template:
    metadata:
      labels:
        app: catalog
        deployment: catalog
    spec:
      serviceAccountName: waiter-sa
      initContainers:
        - name: ensure-gm-control
          image: deciphernow/k8s-waiter:latest
          env:
            - name: NAMESPACE
              value: dhs
            - name: SERVICE
              value: control
            - name: POST_DELAY
              value: "10"
      containers:
        - name: catalog
          image:  'docker.production.deciphernow.com/deciphernow/gm-catalog:1.0.2'
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
            
          env:          
          - name: CA_CERT_PATH
            value: "/etc/pki/ca.crt"
          - name: CLIENT_ADDRESS
            value: "localhost"
          - name: CLIENT_CERT
            valueFrom:
              secretKeyRef:
                name: sidecar-certs
                key: server_b64
          - name: CLIENT_CN
            value: "*.greymatter.svc.cluster.local"
          - name: CLIENT_EMAIL
            value: "gm-control@deciphernow.com"
          - name: CLIENT_IDENTITY
            value: "CN=gm-control,OU=Engineering,O=Decipher Technology Studios,=Alexandria,=Virginia,C=US"
          - name: CLIENT_KEY
            valueFrom:
              secretKeyRef:
                name: sidecar-certs
                key: key_b64
          - name: CLIENT_PORT
            value: "8080"
          - name: CLIENT_PREFIX
            value: "/data"
          - name: CLIENT_TRUST
            valueFrom:
              secretKeyRef:
                name: sidecar-certs
                key: ca_b64
          - name: CLIENT_USE_TLS
            value: "true"
          - name: CONFIG_SOURCE
            value: "gmdata"
          - name: CONTROL_SERVER_0_ADDRESS
            value: "control.dhs.svc.cluster.local:50000"
          - name: CONTROL_SERVER_0_REQUEST_CLUSTER_NAME
            value: "edge"
          - name: CONTROL_SERVER_0_ZONE_NAME
            value: "zone-default-zone"
          - name: GMDATA_MAX_RETRIES
            value: "100"
          - name: GMDATA_RETRY_DELAY
            value: "5s"
          - name: GMDATA_ROOT_EVENT_NAME
            value: "world"
          - name: GMDATA_STARTUP_DELAY
            value: "10s"
          - name: INSTANCE_MAX_SILENCE
            value: "15s"
          - name: INSTANCE_POLLING_INTERVAL
            value: "5s"
          - name: METRICS_MAX_RETRIES
            value: "3"
          - name: METRICS_REQUEST_TIMEOUT
            value: "15s"
          - name: METRICS_RETRY_DELAY
            value: "10s"
          - name: PORT
            value: "9080"
          - name: SERVER_CERT_PATH
            value: "/etc/pki/server.crt"
          - name: SERVER_KEY_PATH
            value: "/etc/pki/server.key"
          - name: USE_TLS
            value: "true"
          volumeMounts:
            - name: certs
              mountPath: /etc/pki
        - name: sidecar
          image:  'docker.production.deciphernow.com/deciphernow/gm-proxy:1.1.0'
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
            
          ports:
            - name: proxy
              containerPort: 8080
            - name: metrics
              containerPort: 8081
          env:          
          - name: ENVOY_ADMIN_LOG_PATH
            value: "/dev/stdout"
          - name: PROXY_DYNAMIC
            value: "true"
          - name: XDS_CLUSTER
            value: "catalog"
          - name: XDS_HOST
            value: "control.dhs.svc.cluster.local"
          - name: XDS_NODE_ID
            value: "default"
          - name: XDS_PORT
            value: "50000"
          volumeMounts:          
          - name: sidecar-certs
            mountPath: /etc/proxy/tls/sidecar/
            readOnly: true
      volumes:      
      - name: sidecar-certs
        secret:
          secretName: sidecar-certs
      - name: certs
        secret:
          secretName: sidecar-certs
      imagePullSecrets:
        - name: docker.secret
        - name: dev.docker.secret
---
# Source: greymatter/charts/control/templates/control.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: control
  namespace: dhs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: control
      deployment: control
  template:
    metadata:
      labels:
        app: control
        deployment: control
        run: control
    spec:
      # This serviceaccount must have read access to both pods and endpoints, because gm-control uses the kubernetes API to do service discovery, and the waiter init container needs access to service endpoints to wait on gm-control-api
      serviceAccountName: control-sa
      containers:
        - name: control
          image:  'docker.production.deciphernow.com/deciphernow/gm-control:1.1.0'
          imagePullPolicy: IfNotPresent
          env:            
            - name: GM_CONTROL_API_HOST
              value: "gm-control-api:5555"
            - name: GM_CONTROL_API_KEY
              value: "xxx"
            - name: GM_CONTROL_API_SSL
              value: "false"
            - name: GM_CONTROL_API_ZONE_NAME
              value: "default-zone"
            - name: GM_CONTROL_CMD
              value: "kubernetes"
            - name: GM_CONTROL_CONSOLE_LEVEL
              value: "debug"
            - name: GM_CONTROL_KUBERNETES_CLUSTER_LABEL
              value: "app"
            - name: GM_CONTROL_KUBERNETES_NAMESPACES
              value: "dhs"
            - name: GM_CONTROL_KUBERNETES_PORT_NAME
              value: "proxy"
            - name: GM_CONTROL_XDS_ADS_ENABLED
              value: "true"
            - name: GM_CONTROL_XDS_RESOLVE_DNS
              value: "true"
          ports:
            - name: grpc
              containerPort: 50000
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: grpc
            initialDelaySeconds: 2
          resources:
            null
            
      initContainers:
        - name: ensure-gm-control-api
          image: deciphernow/k8s-waiter:latest
          env:
            - name: NAMESPACE
              value: dhs
            - name: SERVICE
              value: gm-control-api
            - name: POST_DELAY
              value: "10"
      imagePullSecrets:
        - name: docker.secret
---
# Source: greymatter/charts/dashboard/templates/dashboard.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: dashboard
  namespace: dhs
spec:
  selector:
    matchLabels:
      app: dashboard
  replicas: 1
  template:
    metadata:
      labels:
        app: dashboard
    spec:
      containers:
      - name: dashboard
        image: 'docker.production.deciphernow.com/deciphernow/gm-dashboard:3.1.0'
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 128Mi
          
        env:
        - name: FABRIC_SERVER
          value: '/services/catalog/latest/'
        - name: CONFIG_SERVER
          value: '/services/gm-control-api/latest/v1.0'
        - name: USE_PROMETHEUS
          value: 'true'
        - name: OBJECTIVES_SERVER
          value: '/services/slo/latest/'
        - name: PROMETHEUS_SERVER
          value: '/services/prometheus/latest/api/v1/'
        - name: BASE_URL
          value: '/services/dashboard/3.1.0/'
      - name: sidecar
        image: 'docker.production.deciphernow.com/deciphernow/gm-proxy:1.1.0'
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
          
        ports:
        - name: proxy
          containerPort: 8080
        - name: metrics
          containerPort: 8081
        env:        
        - name: ENVOY_ADMIN_LOG_PATH
          value: "/dev/stdout"
        - name: PROXY_DYNAMIC
          value: "true"
        - name: XDS_CLUSTER
          value: "dashboard"
        - name: XDS_HOST
          value: "control.dhs.svc.cluster.local"
        - name: XDS_NODE_ID
          value: "default"
        - name: XDS_PORT
          value: "50000"
        volumeMounts:        
        - name: sidecar-certs
          mountPath: /etc/proxy/tls/sidecar/
          readOnly: true
      volumes:      
      - name: sidecar-certs
        secret:
          secretName: sidecar-certs
      imagePullSecrets:
        - name: docker.secret
---
# Source: greymatter/charts/dashboard/templates/prometheus.yaml
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: prometheus
  namespace: dhs
spec:
  selector:
    matchLabels:
      app: prometheus
      deployment: prometheus
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
        deployment: prometheus
    spec:
      serviceAccountName: control-sa
      containers:
      - name: prometheus
        image: "prom/prometheus:v2.7.1"
        resources:
          limits:
            cpu: "2"
            memory: 12Gi
          requests:
            cpu: "1"
            memory: 8Gi
          
        ports:
        - name: http
          containerPort: 9090
        command:
        - "/bin/prometheus"
        args:
        - "--query.timeout=4m"
        - "--query.max-samples=5000000000"
        - "--storage.tsdb.path=/var/lib/prometheus/data/data"
        - "--config.file=/etc/prometheus/prometheus.yaml"
        - "--web.console.libraries=/usr/share/prometheus/console_libraries"
        - "--web.console.templates=/usr/share/prometheus/consoles"
        - "--web.enable-admin-api"
        - "--web.external-url=http://anything/services/prometheus/latest"
        - "--web.route-prefix=/"
        volumeMounts:
        - name: prometheus-configuration
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /var/lib/prometheus/data
      - name: sidecar
        image:  'docker.production.deciphernow.com/deciphernow/gm-proxy:1.1.0'
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
          
        volumeMounts:        
        - name: sidecar-certs
          mountPath: /etc/proxy/tls/sidecar/
          readOnly: true
        ports:
        - name: proxy
          containerPort: 8080
        - name: metrics
          containerPort: 8081
        env:          
          - name: ENVOY_ADMIN_LOG_PATH
            value: "/dev/stdout"
          - name: PROXY_DYNAMIC
            value: "true"
          - name: SPIRE_PATH
            value: "/run/spire/sockets/agent.sock"
          - name: XDS_CLUSTER
            value: "prometheus"
          - name: XDS_HOST
            value: "control.dhs.svc.cluster.local"
          - name: XDS_NODE_ID
            value: "default"
          - name: XDS_PORT
            value: "50000"
      imagePullSecrets:
      - name: docker.secret
      volumes:
      volumes:      
      - name: sidecar-certs
        secret:
          secretName: sidecar-certs
      - name: prometheus-configuration
        configMap:
          name: prometheus
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus
---
# Source: greymatter/charts/data/templates/data.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: data
  namespace: dhs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: data
  template:
    metadata:
      labels:
        app: data
    spec:
      serviceAccountName: waiter-sa
      initContainers:
        - name: ensure-data
          image: deciphernow/k8s-waiter:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: NAMESPACE
              value: dhs
            - name: SERVICE
              value: data-mongo
      containers:
      - name: data 
        image: 'docker.production.deciphernow.com/deciphernow/gm-data:0.2.9'
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 250m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
          
        env:        
        - name: AWS_S3_BUCKET
          value: "data"
        - name: AWS_S3_PARTITION
          value: "data"
        - name: CLIENT_JWT_ENDPOINT_ADDRESS
          value: "localhost"
        - name: CLIENT_JWT_ENDPOINT_CERT
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: jwt.cert.pem
        - name: CLIENT_JWT_ENDPOINT_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: jwt.key.pem
        - name: CLIENT_JWT_ENDPOINT_PORT
          value: "8080"
        - name: CLIENT_JWT_ENDPOINT_PREFIX
          value: "/jwt"
        - name: CLIENT_JWT_ENDPOINT_TRUST
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: jwt.trust.pem
        - name: CLIENT_JWT_ENDPOINT_USE_TLS
          value: "true"
        - name: CLIENT_JWT_PREFIX
          value: "/jwt"
        - name: CLIENT_PREFIX
          value: "/services/data/0.2.7"
        - name: GMDATA_CERT
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: server.cert.pem
        - name: GMDATA_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: server.key.pem
        - name: GMDATA_NAMESPACE
          value: "home"
        - name: GMDATA_NAMESPACE_USERFIELD
          value: "email"
        - name: GMDATA_TRUST
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: server.trust.pem
        - name: GMDATA_USE_TLS
          value: "true"
        - name: JWT_API_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-security
              key: jwt.api_key
        - name: JWT_PUB
          valueFrom:
            secretKeyRef:
              name: jwt-security
              key: jwt.pub
        - name: LESS_CHATTY_INFO
          value: "false"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: root_password
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: root_username
        - name: MONGODB
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: database
        - name: USES3
          value: "false"
        - name: MASTERKEY
          value: "__AWS_MASTER_KEY__"
        - name: MONGOHOST
          value: "data-mongo-0.data-mongo.dhs.svc.cluster.local:27017"
        volumeMounts:
          - name: data-pvc
            mountPath: /buckets/data/data
      - name: sidecar 
        image: 'docker.production.deciphernow.com/deciphernow/gm-proxy:1.1.0'
        env:        
        - name: ENVOY_ADMIN_LOG_PATH
          value: "/dev/stdout"
        - name: PROXY_DYNAMIC
          value: "true"
        - name: XDS_CLUSTER
          value: "data"
        - name: XDS_HOST
          value: "control.dhs.svc.cluster.local"
        - name: XDS_NODE_ID
          value: "default"
        - name: XDS_PORT
          value: "50000"

            # XDS_CLUSTER should be set in values.yaml for regular (non-standalone) deployments
            # The rest of the values will automatically be populated by the envvars template

        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
          
        ports:
        - containerPort: 8080
          name: proxy
          protocol: TCP
        - containerPort: 8081
          name: metrics
          protocol: TCP
        volumeMounts:        
        - name: sidecar-certs
          mountPath: /etc/proxy/tls/sidecar/
          readOnly: true

      imagePullSecrets:
      - name: docker.secret
      volumes:  
      - name: sidecar-certs
        secret:
          secretName: sidecar-certs
      - name: jwt-security
        secret:
          secretName: jwt-security
      - name: data-pvc
        persistentVolumeClaim:
          claimName: data-pvc
---
# Source: greymatter/charts/edge/templates/edge.yaml
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: edge
  namespace: dhs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: edge
      deployment: edge
  template:
    metadata:
      labels:
        app: edge
        deployment: edge
    spec:
      containers:
      - name: edge
        image: 'docker.production.deciphernow.com/deciphernow/gm-proxy:1.1.0'
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 1
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 128Mi
          
        env:        
        - name: ENVOY_ADMIN_LOG_PATH
          value: "/dev/stdout"
        - name: PROXY_DYNAMIC
          value: "true"
        - name: XDS_CLUSTER
          value: "edge"
        - name: XDS_HOST
          value: "control.dhs.svc.cluster.local"
        - name: XDS_NODE_ID
          value: "default"
        - name: XDS_PORT
          value: "50000"
        ports:
        - name: proxy
          containerPort: 8080
        - name: metrics
          containerPort: 8081
        volumeMounts:
        - name: edge
          mountPath: /etc/proxy/tls/edge        
        - name: sidecar-certs
          mountPath: /etc/proxy/tls/sidecar/
          readOnly: true
      imagePullSecrets:
      - name: docker.secret
      volumes:
      - name: edge
        secret:
          secretName: edge      
      - name: sidecar-certs
        secret:
          secretName: sidecar-certs
---
# Source: greymatter/charts/gm-control-api/templates/gm-control-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gm-control-api
  namespace: dhs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gm-control-api
      deployment: gm-control-api
  template:
    metadata:
      labels:
        app: gm-control-api
        deployment: gm-control-api
    spec:
      containers:
        - name: gm-control-api
          image:  'docker.production.deciphernow.com/deciphernow/gm-control-api:1.1.0'
          imagePullPolicy: IfNotPresent
          env:            
            - name: GM_CONTROL_API_ADDRESS
              value: "0.0.0.0:5555"
            - name: GM_CONTROL_API_LOG_LEVEL
              value: "debug"
            - name: GM_CONTROL_API_ORG_KEY
              value: "deciphernow"
            - name: GM_CONTROL_API_PERSISTER_PATH
              value: "/app/control-api/data/backend.json"
            - name: GM_CONTROL_API_PERSISTER_TYPE
              value: "file"
            - name: GM_CONTROL_API_ZONE_KEY
              value: "zone-default-zone"
          ports:
            - name: http
              containerPort: 5555
              protocol: TCP
          
          # We don't want to kill the container if it's taking a while to start up, we'll just remove it from the service
          readinessProbe:
            httpGet:
              path: /v1.0/cluster
              port: http
              httpHeaders:
                # For production we'll need a valid authentication credential here
                # We may want to create a separate healthcheck endpoint to remove this issue
                - name: Authorization
                  value: Bearer xxx
            # Pods are considered to be in a Failure state before the initialDelaySeconds has passed, meaning they won't be backends for a service
            initialDelaySeconds: 5
            periodSeconds: 2
          # We want to restart the container if it's failed 3 requests spaced 3 seconds apart after we've given it quite enough time to start up and be initialized
          # We give a full minute before we start health-checking for failures
          livenessProbe:
            httpGet:
              path: /v1.0/cluster
              port: http
              httpHeaders:
                - name: Authorization
                  value: Bearer xxx
            initialDelaySeconds: 60
            periodSeconds: 3
          volumeMounts:
            - name: gm-control-api-backup
              mountPath: /app/control-api/data
        - name: sidecar   
          image: 'docker.production.deciphernow.com/deciphernow/gm-proxy:1.1.0'
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
            
          ports:
            - name: proxy
              containerPort: 8080
            - name: metrics
              containerPort: 8081
          env:            
            - name: ENVOY_ADMIN_LOG_PATH
              value: "/dev/stdout"
            - name: PROXY_DYNAMIC
              value: "true"
            - name: XDS_CLUSTER
              value: "gm-control-api"
            - name: XDS_HOST
              value: "control.dhs.svc.cluster.local"
            - name: XDS_NODE_ID
              value: "default"
            - name: XDS_PORT
              value: "50000"
          volumeMounts:            
            - name: sidecar-certs
              mountPath: /etc/proxy/tls/sidecar/
              readOnly: true
      imagePullSecrets:
        - name: docker.secret
      volumes:      
      - name: sidecar-certs
        secret:
          secretName: sidecar-certs
      - name: gm-control-api-backup
        persistentVolumeClaim:
          claimName: gm-control-api-pvc
---
# Source: greymatter/charts/internal-data/templates/data.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: data-internal
  namespace: dhs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: data-internal
  template:
    metadata:
      labels:
        app: data-internal
    spec:
      serviceAccountName: waiter-sa
      initContainers:
        - name: ensure-data-internal
          image: deciphernow/k8s-waiter:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: NAMESPACE
              value: dhs
            - name: SERVICE
              value: internal-data-mongo
      containers:
      - name: data-internal 
        image: 'docker.production.deciphernow.com/deciphernow/gm-data:0.2.9'
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 250m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
          
        env:        
        - name: AWS_S3_BUCKET
          value: "data"
        - name: AWS_S3_PARTITION
          value: "data"
        - name: CLIENT_JWT_ENDPOINT_ADDRESS
          value: "localhost"
        - name: CLIENT_JWT_ENDPOINT_CERT
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: jwt.cert.pem
        - name: CLIENT_JWT_ENDPOINT_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: jwt.key.pem
        - name: CLIENT_JWT_ENDPOINT_PORT
          value: "8080"
        - name: CLIENT_JWT_ENDPOINT_PREFIX
          value: "/jwt"
        - name: CLIENT_JWT_ENDPOINT_TRUST
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: jwt.trust.pem
        - name: CLIENT_JWT_ENDPOINT_USE_TLS
          value: "true"
        - name: CLIENT_JWT_PREFIX
          value: "/jwt"
        - name: CLIENT_PREFIX
          value: "/services/dhs-data-internal/0.2.7"
        - name: GMDATA_CERT
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: server.cert.pem
        - name: GMDATA_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: server.key.pem
        - name: GMDATA_NAMESPACE
          value: "world"
        - name: GMDATA_NAMESPACE_USERFIELD
          value: "email"
        - name: GMDATA_TRUST
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: server.trust.pem
        - name: GMDATA_USE_TLS
          value: "true"
        - name: JWT_API_KEY
          valueFrom:
            secretKeyRef:
              name: internal-jwt-security-secret
              key: jwt.api_key
        - name: JWT_PUB
          valueFrom:
            secretKeyRef:
              name: internal-jwt-security-secret
              key: jwt.pub
        - name: LESS_CHATTY_INFO
          value: "false"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: root_password
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: root_username
        - name: MONGODB
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: database
        - name: USES3
          value: "false"
        - name: MASTERKEY
          value: "__AWS_MASTER_KEY__"
        - name: MONGOHOST
          value: "internal-data-mongo-0.internal-data-mongo.dhs.svc.cluster.local:27017"
        volumeMounts:
          - name: data-pvc
            mountPath: /buckets/data/data
      - name: sidecar 
        image: 'docker.production.deciphernow.com/deciphernow/gm-proxy:1.1.0'
        env:        
        - name: ENVOY_ADMIN_LOG_PATH
          value: "/dev/stdout"
        - name: PROXY_DYNAMIC
          value: "true"
        - name: XDS_CLUSTER
          value: "data-internal"
        - name: XDS_HOST
          value: "control.dhs.svc.cluster.local"
        - name: XDS_NODE_ID
          value: "default"
        - name: XDS_PORT
          value: "50000"

            # XDS_CLUSTER should be set in values.yaml for regular (non-standalone) deployments
            # The rest of the values will automatically be populated by the envvars template

        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
          
        ports:
        - containerPort: 8080
          name: proxy
          protocol: TCP
        - containerPort: 8081
          name: metrics
          protocol: TCP
        volumeMounts:        
        - name: sidecar-certs
          mountPath: /etc/proxy/tls/sidecar/
          readOnly: true

      imagePullSecrets:
      - name: docker.secret
      volumes:      
      - name: sidecar-certs
        secret:
          secretName: sidecar-certs
      - name: jwt-security
        secret:
          secretName: jwt-security
      - name: data-pvc
        persistentVolumeClaim:
          claimName: data-internal-pvc
---
# Source: greymatter/charts/internal-jwt/templates/jwt.yaml
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
    name: internal-jwt-security
    namespace: dhs
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: internal-jwt-security
      deployment: internal-jwt-security
  template:
    metadata:
      labels:
        app: internal-jwt-security
        deployment: internal-jwt-security
    spec:
      containers:
      - name: jwt-security
        image: 'docker.production.deciphernow.com/deciphernow/gm-jwt-security:0.2.1'
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 64Mi
          
        command:
        - /bin/sh
        
        args:
        - -c
        - if [[ ! -d ./certs ]]; then mkdir -p ./certs; fi && if [[ ! -d ./etc ]]; then mkdir
          -p ./certs; fi && /gm-jwt-security/gm-jwt-security
        
        

        env:
        - name: HTTPS_PORT
          value: "3000"
        - name: PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: internal-jwt-security-secret
              key: jwt.key
        - name: JWT_API_KEY
          valueFrom:
            secretKeyRef:
              name: internal-jwt-security-secret
              key: jwt.api_key
        - name: ENABLE_TLS
          value: "true"
        - name: SERVER_TRUST
          valueFrom:
            secretKeyRef:
              name: internal-jwt-certs
              key: jwt.trust.pem
        - name: SERVER_CERT
          valueFrom:
            secretKeyRef:
              name: internal-jwt-certs
              key: jwt.cert.pem
        - name: SERVER_KEY
          valueFrom:
            secretKeyRef:
              name: internal-jwt-certs
              key: jwt.key.pem   
        - name: REDIS_HOST
          value: internal-redis.dhs.svc.cluster.local
        - name:  REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: "0"
        - name: REDIS_PASS
          valueFrom:
            secretKeyRef:
              name: internal-redis-password
              key: password
        volumeMounts:
        - name: jwt-users
          mountPath: /gm-jwt-security/etc
      
      - name: sidecar
        image: 'docker.production.deciphernow.com/deciphernow/gm-proxy:1.1.0'
        imagePullPolicy: IfNotPresent
        env:        
        - name: ENVOY_ADMIN_LOG_PATH
          value: "/dev/stdout"
        - name: PROXY_DYNAMIC
          value: "true"
        - name: XDS_CLUSTER
          value: "internal-jwt-security"
        - name: XDS_HOST
          value: "control.dhs.svc.cluster.local"
        - name: XDS_NODE_ID
          value: "default"
        - name: XDS_PORT
          value: "50000"
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
          
        ports:
        - containerPort: 8080
          name: proxy
          protocol: TCP
        - containerPort: 8081
          name: metrics
          protocol: TCP
        volumeMounts:        
        - name: sidecar-certs
          mountPath: /etc/proxy/tls/sidecar/
          readOnly: true
      imagePullSecrets:
        - name: docker.secret
      volumes:
      volumes:      
      - name: sidecar-certs
        secret:
          secretName: sidecar-certs
      - name: jwt-users
        configMap:
          name: internal-jwt-users
---
# Source: greymatter/charts/internal-jwt/templates/redis.yaml
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  labels:
    app: internal-redis
  name: internal-redis
  namespace: dhs
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: internal-redis
      deployment: internal-redis
  strategy:
#    activeDeadlineSeconds: 21600
#    resources: {}
    rollingUpdate:
#      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
#      timeoutSeconds: 600
#      updatePeriodSeconds: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: internal-redis
        deployment: internal-redis
    spec:
      containers:
        - name: redis
          image: centos/redis-32-centos7
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: internal-redis-password
                key: password
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 128Mi
            
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
#  test: false
#  triggers:
#    - type: ConfigChange
---
# Source: greymatter/charts/jwt/templates/jwt.yaml
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
    name: jwt-security
    namespace: dhs
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: jwt-security
      deployment: jwt-security
  template:
    metadata:
      labels:
        app: jwt-security
        deployment: jwt-security
    spec:
      containers:
      - name: jwt-security
        image: 'docker.production.deciphernow.com/deciphernow/gm-jwt-security:0.2.1'
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 64Mi
          
        command:
        - /bin/sh
        
        args:
        - -c
        - if [[ ! -d ./certs ]]; then mkdir -p ./certs; fi && if [[ ! -d ./etc ]]; then mkdir
          -p ./certs; fi && /gm-jwt-security/gm-jwt-security
        
        

        env:
        - name: HTTPS_PORT
          value: "3000"
        - name: PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-security
              key: jwt.key
        - name: JWT_API_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-security
              key: jwt.api_key
        - name: ENABLE_TLS
          value: "true"
        - name: SERVER_TRUST
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: jwt.trust.pem
        - name: SERVER_CERT
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: jwt.cert.pem
        - name: SERVER_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-certs
              key: jwt.key.pem  
        - name: REDIS_HOST
          value: redis.dhs.svc.cluster.local
        - name:  REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: "0"
        - name: REDIS_PASS
          valueFrom:
            secretKeyRef:
              name: redis-password
              key: password
        volumeMounts:
        - name: jwt-users
          mountPath: /gm-jwt-security/etc
      
      - name: sidecar
        image: 'docker.production.deciphernow.com/deciphernow/gm-proxy:1.1.0'
        imagePullPolicy: IfNotPresent
        env:        
        - name: ENVOY_ADMIN_LOG_PATH
          value: "/dev/stdout"
        - name: PROXY_DYNAMIC
          value: "true"
        - name: XDS_CLUSTER
          value: "jwt-security"
        - name: XDS_HOST
          value: "control.dhs.svc.cluster.local"
        - name: XDS_NODE_ID
          value: "default"
        - name: XDS_PORT
          value: "50000"
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
          
        ports:
        - containerPort: 8080
          name: proxy
          protocol: TCP
        - containerPort: 8081
          name: metrics
          protocol: TCP
        volumeMounts:        
        - name: sidecar-certs
          mountPath: /etc/proxy/tls/sidecar/
          readOnly: true
      imagePullSecrets:
        - name: docker.secret
      volumes:
      volumes:      
      - name: sidecar-certs
        secret:
          secretName: sidecar-certs
      - name: jwt-users
        configMap:
          name: jwt-users
---
# Source: greymatter/charts/jwt/templates/redis.yaml
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  labels:
    app: redis
  name: redis
  namespace: dhs
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: redis
      deployment: redis
  strategy:
#    activeDeadlineSeconds: 21600
#    resources: {}
    rollingUpdate:
#      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
#      timeoutSeconds: 600
#      updatePeriodSeconds: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: redis
        deployment: redis
    spec:
      containers:
        - name: redis
          image: centos/redis-32-centos7
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: redis-password
                key: password
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 128Mi
            
      imagePullSecrets:
      - name: docker.secret
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
#  test: false
#  triggers:
#    - type: ConfigChange
---
# Source: greymatter/charts/slo/templates/slo.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: slo
  namespace: dhs
spec:
  selector:
    matchLabels:
      app: slo
      deployment: slo
  replicas: 1
  template:
    metadata:
      labels:
        app: slo
        deployment: slo
    spec:
      serviceAccountName: waiter-sa
      initContainers:
        - name: ensure-postgres
          image: deciphernow/k8s-waiter:latest
          env:
            - name: NAMESPACE
              value: dhs
            - name: SERVICE
              value: postgres-slo
            - name: POST_DELAY
              value: "3"
      containers:
      - name: slo
        image: 'docker.production.deciphernow.com/deciphernow/gm-slo:0.5.0'
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 250m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
          
        env:
        - name: POSTGRESQL_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: database 
        - name: DATABASE_URI
          value: postgres://$(POSTGRESQL_USERNAME):$(POSTGRESQL_PASSWORD)@postgres-slo.dhs.svc.cluster.local:5432/$(POSTGRESQL_DATABASE)
        - name: SERVICE_PORT
          value: "1337"
        - name: SSL_ENABLED
          value: "true"
        - name: SSL_SERVER_CA
          value: /certs/ca.pem
        - name: SSL_SERVER_CERT
          value: /certs/postgres.crt
        - name: SSL_SERVER_KEY
          value: /certs/postgres.key
        volumeMounts:
        - name: postgres-certs
          mountPath: "/certs"
      - name: sidecar
        image: 'docker.production.deciphernow.com/deciphernow/gm-proxy:1.1.0'
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
          
        ports:
        - name: proxy
          containerPort: 8080
        - name: metrics
          containerPort: 8081
        env:        
        - name: ENVOY_ADMIN_LOG_PATH
          value: "/dev/stdout"
        - name: PROXY_DYNAMIC
          value: "true"
        - name: XDS_CLUSTER
          value: "slo"
        - name: XDS_HOST
          value: "control.dhs.svc.cluster.local"
        - name: XDS_NODE_ID
          value: "default"
        - name: XDS_PORT
          value: "50000"
        volumeMounts:        
        - name: sidecar-certs
          mountPath: /etc/proxy/tls/sidecar/
          readOnly: true
      imagePullSecrets:
        - name: docker.secret
      volumes:      
      - name: sidecar-certs
        secret:
          secretName: sidecar-certs
      - name: postgres-certs
        secret:
          secretName: postgres-ssl-certs
          defaultMode: 0600
---
# Source: greymatter/charts/data/templates/mongo.yaml
kind: StatefulSet
apiVersion: apps/v1
metadata:
  labels:
    app: data-mongo
  name: data-mongo
  namespace: dhs
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: data-mongo
  serviceName: data-mongo
  template:
    metadata:
      labels:
        app: data-mongo
    spec:
      containers:
      - env:        
        - name: MONGO_CLIENT_DN
          value: "CN=*.greymatter.svc.cluster.local, OU=Engineering, O=Decipher Technology Studios, L=Alexandria, ST=Virginia, C=US"
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: database
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: root_password
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: root_username
        - name: MONGODB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: root_username
        - name: MONGODB_DATABASE
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: database
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: root_password
        - name: MONGODB_USER
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: root_username 
        image: "deciphernow/mongo:4.0.3"
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
          
        name: mongo
        ports:
        - containerPort: 27017
          name: mongo
          protocol: TCP
        volumeMounts:
        - mountPath: /data/db
          name: data
        - mountPath: /docker-entrypoint-initdb.d/
          name: mongo-init
      volumes:
        - name: mongo-init
          configMap:
            name: data-mongo-init
      imagePullSecrets:
      - name: docker.secret
  volumeClaimTemplates:
  - metadata:
      name: data
      # annotations:
      #   volume.beta.kubernetes.io/storage-class: glusterfs-storage
      #   volume.beta.kubernetes.io/storage-provisioner: glusterfs-storage
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 40Gi
---
# Source: greymatter/charts/internal-data/templates/mongo.yaml
kind: StatefulSet
apiVersion: apps/v1
metadata:
  labels:
    app: internal-data-mongo
  name: internal-data-mongo
  namespace: dhs
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: internal-data-mongo
  serviceName: internal-data-mongo
  template:
    metadata:
      labels:
        app: internal-data-mongo
    spec:
      containers:
      - env:        
        - name: MONGO_CLIENT_DN
          value: "CN=*.greymatter.svc.cluster.local, OU=Engineering, O=Decipher Technology Studios, L=Alexandria, ST=Virginia, C=US"
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: database
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: root_password
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: root_username
        - name: MONGODB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: internal-mongo-credentials
              key: root_username
        - name: MONGODB_DATABASE
          valueFrom:
            secretKeyRef:
              name: internal-mongo-credentials
              key: database
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: internal-mongo-credentials
              key: root_password
        - name: MONGODB_USER
          valueFrom:
            secretKeyRef:
              name: internal-mongo-credentials
              key: root_username 
        image: "deciphernow/mongo:4.0.3"
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
          
        name: mongo
        ports:
        - containerPort: 27017
          name: mongo
          protocol: TCP
        volumeMounts:
        - mountPath: /data/db
          name: data
        - mountPath: /docker-entrypoint-initdb.d/
          name: mongo-init
      volumes:
        - name: mongo-init
          configMap:
            name: internal-data-mongo-init
      imagePullSecrets:
      - name: docker.secret
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 40Gi
---
# Source: greymatter/charts/slo/templates/postgres.yaml
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: postgres-slo
  namespace: dhs
  labels:
    app: postgres-slo
spec:
  selector:
    matchLabels:
      app: postgres-slo
  replicas: 1
  serviceName: postgres-slo
  template:
    metadata:
      labels:
        app: postgres-slo
    spec:
      containers:
      - name: postgres
        image: docker.io/centos/postgresql-10-centos7
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
          
        ports:
          - name: postgres
            containerPort: 5432
        env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: postgres-credentials
                key: username
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-credentials
                key: password
          - name: POSTGRES_USER_CN
            value: "CN=*.greymatter.svc.cluster.local, OU=Engineering, O=Decipher Technology Studios, L=Alexandria, ST=Virginia, C=US"
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: postgres-credentials
                key: database
        volumeMounts:
          - name: postgres-slo
            mountPath: /var/lib/pgsql/data
          - name: certificates
            mountPath: /certs
          - name: postgres-slo-config
            mountPath: /conf
          - name: postgres-slo-overrides
            mountPath: /opt/app-root/src/postgresql-cfg
        readinessProbe:
          tcpSocket:
            port: postgres
          # Pods are considered to be in a Failure state before the initialDelaySeconds has passed, meaning they won't be backends for a service
          initialDelaySeconds: 5
          periodSeconds: 2
      imagePullSecrets:
      - name: docker.secret 
      volumes:
      - name: postgres-slo
        persistentVolumeClaim:
          claimName: postgres-slo
      - name: postgres-slo-config
        configMap:
          name: postgres-slo-config
      - name: postgres-slo-overrides
        configMap:
          name: postgres-slo-overrides
      - name: certificates
        secret:
          secretName: postgres-ssl-certs
          defaultMode: 0400
---
# Source: greymatter/charts/catalog/templates/catalog-init.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: catalog-init
  # annotations:
  #   # This is what defines this resource as a hook. Without this line, the
  #   # job is considered part of the release.
  #   "helm.sh/hook": post-install
  #   "helm.sh/hook-weight": "0"
  #   "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: catalog-init
    spec:
      restartPolicy: "OnFailure"
      # We need a SA with read access to the `Endpoints` resource
      serviceAccountName: waiter-sa
      initContainers:
        - name: ensure-catalog
          image: deciphernow/k8s-waiter:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: NAMESPACE
              value: dhs
            - name: SERVICE
              value: catalog
      containers:
        - image:  'docker.production.deciphernow.com/deciphernow/gm-proxy:1.1.0'
          name: catalog-init
          imagePullPolicy: IfNotPresent
          command: ["/tmp/bootstrap/bootstrap.sh"]
          env:            
            - name: CATALOG_API_HOST
              value: "catalog:9080"
            - name: DEBUG
              value: "true"
            - name: USE_TLS
              value: "true"
          volumeMounts:
            - name: service-config-volume-catalog
              mountPath: /etc/config/mesh/services/catalog
            - name: service-config-volume-gm-control-api
              mountPath: /etc/config/mesh/services/gm-control-api
            - name: service-config-volume-dashboard
              mountPath: /etc/config/mesh/services/dashboard
            - name: service-config-volume-data
              mountPath: /etc/config/mesh/services/data
            - name: service-config-volume-edge
              mountPath: /etc/config/mesh/services/edge
            - name: service-config-volume-intake
              mountPath: /etc/config/mesh/services/intake
            - name: service-config-volume-jwt-security
              mountPath: /etc/config/mesh/services/jwt-security
            - name: service-config-volume-payment
              mountPath: /etc/config/mesh/services/payment
            - name: service-config-volume-slo
              mountPath: /etc/config/mesh/services/slo
            - name: bootstrap-script-volume
              mountPath: /tmp/bootstrap
            - name: bootstrap-zone-volume
              mountPath: /etc/config/mesh/zones/
            - name: certs
              mountPath: /etc/pki
      volumes:
        - name: service-config-volume-catalog
          configMap:
            name: service-catalog-catalog-api-config
        - name: service-config-volume-gm-control-api
          configMap:
            name: service-gm-control-api-catalog-api-config
        - name: service-config-volume-dashboard
          configMap:
            name: service-dashboard-catalog-api-config
        - name: service-config-volume-data
          configMap:
            name: service-data-catalog-api-config
        - name: service-config-volume-edge
          configMap:
            name: service-edge-catalog-api-config
        - name: service-config-volume-intake
          configMap:
            name: service-intake-catalog-api-config
        - name: service-config-volume-jwt-security
          configMap:
            name: service-jwt-security-catalog-api-config
        - name: service-config-volume-payment
          configMap:
            name: service-payment-catalog-api-config
        - name: service-config-volume-slo
          configMap:
            name: service-slo-catalog-api-config
        - name: bootstrap-script-volume
          configMap:
            name: catalog-bootstrap-script
            defaultMode: 0777
        - name: bootstrap-zone-volume
          configMap:
            name: catalog-zone-bootstrap
        - name: certs
          secret:
            secretName: sidecar-certs
      imagePullSecrets:
        - name: docker.secret
---
# Source: greymatter/charts/gm-control-api/templates/gm-control-api-init.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gm-control-api-init
spec:
  template:
    metadata:
      name: gm-control-api-init
    spec:
      restartPolicy: "Never"
      # We need a SA with read access to the `Endpoints` resource
      serviceAccountName: waiter-sa
      initContainers:
        - name: ensure-gm-control-api
          image: deciphernow/k8s-waiter:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: NAMESPACE
              value: dhs
            - name: SERVICE
              value: gm-control-api
      containers:
        - image:  'docker.production.deciphernow.com/deciphernow/greymatter:1.1.0'
          name: gm-control-api-init
          imagePullPolicy: IfNotPresent
          command: ["/tmp/bootstrap/bootstrap.sh"]
          env:            
            - name: BASIC_OBJECT_PATH
              value: "/tmp/mesh/basic_objects"
            - name: GREYMATTER_API_HOST
              value: "gm-control-api:5555"
            - name: GREYMATTER_API_KEY
              value: "xxx"
            - name: GREYMATTER_API_SSL
              value: "false"
            - name: GREYMATTER_CONSOLE_LEVEL
              value: "debug"
          volumeMounts:
            - name: service-config-volume-catalog
              mountPath: /etc/config/mesh/services/catalog
            - name: edge-config-volume-catalog
              mountPath: /etc/config/mesh/edge/catalog
            - name: service-config-volume-gm-control-api
              mountPath: /etc/config/mesh/services/gm-control-api
            - name: edge-config-volume-gm-control-api
              mountPath: /etc/config/mesh/edge/gm-control-api
            - name: service-config-volume-dashboard
              mountPath: /etc/config/mesh/services/dashboard
            - name: edge-config-volume-dashboard
              mountPath: /etc/config/mesh/edge/dashboard
            - name: service-config-volume-data
              mountPath: /etc/config/mesh/services/data
            - name: edge-config-volume-data
              mountPath: /etc/config/mesh/edge/data
            - name: service-config-volume-intake
              mountPath: /etc/config/mesh/services/intake
            - name: edge-config-volume-intake
              mountPath: /etc/config/mesh/edge/intake
            - name: service-config-volume-data-internal
              mountPath: /etc/config/mesh/services/data-internal
            - name: edge-config-volume-data-internal
              mountPath: /etc/config/mesh/edge/data-internal
            - name: service-config-volume-internal-jwt-security
              mountPath: /etc/config/mesh/services/internal-jwt-security
            - name: edge-config-volume-internal-jwt-security
              mountPath: /etc/config/mesh/edge/internal-jwt-security
            - name: service-config-volume-jwt-security
              mountPath: /etc/config/mesh/services/jwt-security
            - name: edge-config-volume-jwt-security
              mountPath: /etc/config/mesh/edge/jwt-security
            - name: service-config-volume-payment
              mountPath: /etc/config/mesh/services/payment
            - name: edge-config-volume-payment
              mountPath: /etc/config/mesh/edge/payment
            - name: service-config-volume-prometheus
              mountPath: /etc/config/mesh/services/prometheus
            - name: edge-config-volume-prometheus
              mountPath: /etc/config/mesh/edge/prometheus
            - name: service-config-volume-slo
              mountPath: /etc/config/mesh/services/slo
            - name: edge-config-volume-slo
              mountPath: /etc/config/mesh/edge/slo
            - name: special-config-volume
              mountPath: /etc/config/mesh/special
            - name: bootstrap-script-volume
              mountPath: /tmp/bootstrap
      volumes:
        - name: service-config-volume-catalog
          configMap:
            name: service-catalog-mesh-config
        - name: edge-config-volume-catalog
          configMap:
            name: edge-catalog-mesh-config
        - name: service-config-volume-gm-control-api
          configMap:
            name: service-gm-control-api-mesh-config
        - name: edge-config-volume-gm-control-api
          configMap:
            name: edge-gm-control-api-mesh-config
        - name: service-config-volume-dashboard
          configMap:
            name: service-dashboard-mesh-config
        - name: edge-config-volume-dashboard
          configMap:
            name: edge-dashboard-mesh-config
        - name: service-config-volume-data
          configMap:
            name: service-data-mesh-config
        - name: edge-config-volume-data
          configMap:
            name: edge-data-mesh-config
        - name: service-config-volume-intake
          configMap:
            name: service-intake-mesh-config
        - name: edge-config-volume-intake
          configMap:
            name: edge-intake-mesh-config
        - name: service-config-volume-data-internal
          configMap:
            name: service-data-internal-mesh-config
        - name: edge-config-volume-data-internal
          configMap:
            name: edge-data-internal-mesh-config
        - name: service-config-volume-internal-jwt-security
          configMap:
            name: service-internal-jwt-security-mesh-config
        - name: edge-config-volume-internal-jwt-security
          configMap:
            name: edge-internal-jwt-security-mesh-config
        - name: service-config-volume-jwt-security
          configMap:
            name: service-jwt-security-mesh-config
        - name: edge-config-volume-jwt-security
          configMap:
            name: edge-jwt-security-mesh-config
        - name: service-config-volume-payment
          configMap:
            name: service-payment-mesh-config
        - name: edge-config-volume-payment
          configMap:
            name: edge-payment-mesh-config
        - name: service-config-volume-prometheus
          configMap:
            name: service-prometheus-mesh-config
        - name: edge-config-volume-prometheus
          configMap:
            name: edge-prometheus-mesh-config
        - name: service-config-volume-slo
          configMap:
            name: service-slo-mesh-config
        - name: edge-config-volume-slo
          configMap:
            name: edge-slo-mesh-config
        - name: bootstrap-script-volume
          configMap:
            name: bootstrap-script
            defaultMode: 0777
        - name: special-config-volume
          configMap:
            name: special-mesh-config
      imagePullSecrets:
        - name: docker.secret
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: edge
  name: edge
  namespace: dhs
spec:
  host: dhs.staging.deciphernow.com
  port:
    targetPort: proxy
  tls:
    termination: passthrough
  to:
    kind: Service
    name: edge
    weight: 100
  wildcardPolicy: None
status:
  ingress:
    - conditions:
        - lastTransitionTime: '2019-10-29T21:55:05Z'
          status: 'True'
          type: Admitted
      routerName: router
      wildcardPolicy: None
