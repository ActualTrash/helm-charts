---
# Source: fabric/charts/control/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: control-sa
  namespace: default
---
# Source: fabric/templates/waiter-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: waiter-sa
  namespace: default
---
# Source: fabric/charts/control-api/templates/bootstrap-configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: bootstrap-script
  namespace: default
data:
  bootstrap.sh: |-
    #!/usr/bin/env sh
    
    MESH_CONFIG_DIR="/etc/config/mesh/"
    
    echo "Configuring mesh from config directory: $MESH_CONFIG_DIR"
    
    cd $MESH_CONFIG_DIR
    
    greymatter version
    
    echo "Config dir contains:"
    ls
    
    # This script expects gm-control-api to be up and available to serve requests
    # Currently, this is handled in a fairly good idiomatic way using Readiness Probes and `k8s-waiter`
    
    echo "Starting mesh configuration ..."
    
    echo "Creating service configuration objects..."
    
    delay=0.01
    
    # Create or update takes an object type and an optional filename
    create_or_update() {
        file=$2
        # If file is null, set to objecttype.json, eg route.json
        if [ -z "$file" ]; then
            file=$1.json
        fi
    
        echo "Creating object with $file"
        resp=$(greymatter create $1 <$file)
        echo "$resp"
        # If response from the api is null, try editing the object
        if [ -z "$resp" ]; then
            echo "Object already exists! Editing $file"
            greymatter edit $1 _ <$file
        fi
    
        echo "----------"
    }
    
    cd $MESH_CONFIG_DIR/services
    # Each service should be able to be created all by itself. This means it needs to contain a domain
    for d in */; do
        echo "Found service: $d"
        cd $d
    
        # The ordering of creating gm-control-api resources is extremely important and precise.
        # All objects referenced by keys must be created before being referenced or will result in an error.
        # So we add a delay of 0.1 seconds between each request to hopefully streamline this
        # A better option is probably to hardcode the order of items
    
        names="domain cluster listener proxy shared_rules route"
        for name in $names; do
            echo "Creating mesh object: $name."
            if [ "$name" == "domain" ]; then
                create_or_update $name domain-egress.json
            elif [ "$name" == "listener" ]; then
                create_or_update $name listener-egress.json
            fi
            create_or_update $name
            sleep $delay
        done
    
        cd $MESH_CONFIG_DIR/services
    done
    
    # The edge service is created last as it links to the clusters of every other service.
    # The edge domain must be created before it can be referenced
    cd $MESH_CONFIG_DIR/special
    echo "Creating special configuration objects (domain, edge listener + proxy)"
    create_or_update "domain"
    create_or_update "domain" domain-egress.json
    create_or_update "listener"
    create_or_update "listener" listener-egress.json
    create_or_update "proxy"
    create_or_update "cluster"
    create_or_update "shared_rules"
    create_or_update "route"
    
    cd $MESH_CONFIG_DIR/edge
    echo "Creating edge configuration objects"
    
    # All the following services reference the `edge` domain key
    for d in */; do
        echo "Found service: $d"
        cd $d
    
        names="cluster shared_rules"
        for name in $names; do
            echo "Creating mesh object: $name."
            create_or_update $name
            sleep $delay
        done
    
        for file in route-*.json; do
            echo "Creating mesh object: $name."
            create_or_update "route" $file
            sleep $delay
        done
    
        cd $MESH_CONFIG_DIR/edge
    done
    
    cd $MESH_CONFIG_DIR/services
    # After all service + edge objects have been created, we need to add egress jwt routes to each service proxy
    # This is done in another loop because it references internal-jwt & edge keys
    for d in */; do
        echo "Found service: $d"
        cd $d
    
        # Create JWT egress routes for each proxy
        create_or_update route route-jwt-slash.json
        create_or_update route route-jwt-slash.json
    
        cd $MESH_CONFIG_DIR/services
    done
    
    cd $MESH_CONFIG_DIR/special
    echo "Adding additional Special Routes"
    for rte in $(ls route-*.json); do
        create_or_update "route" $rte
    done
    
    # greymatter create route < route-data-jwt-slash.json
    # greymatter create route < route-data-jwt.json
    # greymatter create route < route-dashboard-slash.json
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-catalog-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-catalog",
      "zone_key": "zone-default-zone",
      "name": "catalog-service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 9080
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain-egress.json: |-
    {
      "domain_key": "domain-catalog-egress",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10909,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null
    }
    
  domain.json: |-
    {
      "domain_key": "domain-catalog",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10808,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "gzip_enabled": false,
      "force_https": true
    }
    
  listener-egress.json: |-
    {
      "listener_key": "listener-catalog-egress",
      "zone_key": "zone-default-zone",
      "name": "catalog",
      "ip": "127.0.0.1",
      "port": 10909,
      "protocol": "http_auto",
      "domain_keys": [
        "domain-catalog",
        "domain-catalog-egress"
      ],
      "tracing_config": null,
      "active_http_filters": ["gm.inheaders"],
      "http_filters": {
        "gm_inheaders": {}
      }
    }
    
  listener.json: |-
    {
      "listener_key": "listener-catalog",
      "zone_key": "zone-default-zone",
      "name": "catalog",
      "ip": "0.0.0.0",
      "port": 10808,
      "protocol": "http_auto",
      "domain_keys": ["domain-catalog"],
      "tracing_config": null,
      "active_http_filters": ["gm.metrics", "gm.impersonation", "gm.jwtsecurity"],
      "http_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "metrics_ring_buffer_size": 4096,
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_key_function": "none"
        },
        "gm_jwtsecurity": {
          "apiKey": "dm9sY2Fuby1lcGlkZW1pYy10d2VsZnRoLXRhbWFsZQ==",
          "jwtHeaderName": "userpolicy",
          "endpoint": "http://localhost:10909/jwt",
        },	
        "gm_impersonation": {	
          "servers": "C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=edge|C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=greymatter"	
        }
      },
      "tracing_config": null,
      "secret": {
        "secret_key": "secret-catalog-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/catalog/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ],
        "forward_client_cert_details": "SANITIZE_SET",
        "set_current_client_cert_details": {
            "uri": true
        }
      }
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-catalog",
      "zone_key": "zone-default-zone",
      "name": "catalog",
      "domain_keys": [
        "domain-catalog",
        "domain-catalog-egress"
      ],
      "listener_keys": [
        "listener-catalog",
        "listener-catalog-egress"
      ],
      "listeners": null
    }
    
  route-jwt-slash.json: |-
    {
      "route_key": "route-catalog-jwt",
      "domain_key": "domain-catalog-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-jwt.json: |-
    {
      "route_key": "route-catalog-jwt-slash",
      "domain_key": "domain-catalog-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt",
      "prefix_rewrite": "/jwt/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route.json: |-
    {
      "route_key": "route-catalog",
      "domain_key": "domain-catalog",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-catalog",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-catalog",
      "name": "catalog",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-catalog",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-control-api-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-control-api",
      "zone_key": "zone-default-zone",
      "name": "control-api-service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 5555
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain-egress.json: |-
    {
      "domain_key": "domain-control-api-egress",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10909,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null
    }
    
  domain.json: |-
    {
      "domain_key": "domain-control-api",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10808,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "gzip_enabled": false,
      "force_https": true
    }
    
  listener-egress.json: |-
    {
      "listener_key": "listener-control-api-egress",
      "zone_key": "zone-default-zone",
      "name": "control-api",
      "ip": "127.0.0.1",
      "port": 10909,
      "protocol": "http_auto",
      "domain_keys": [
        "domain-control-api",
        "domain-control-api-egress"
      ],
      "tracing_config": null,
      "active_http_filters": ["gm.inheaders"],
      "http_filters": {
        "gm_inheaders": {}
      }
    }
    
  listener.json: |-
    {
      "listener_key": "listener-control-api",
      "zone_key": "zone-default-zone",
      "name": "control-api",
      "ip": "0.0.0.0",
      "port": 10808,
      "protocol": "http_auto",
      "domain_keys": ["domain-control-api"],
      "tracing_config": null,
      "active_http_filters": ["gm.metrics", "gm.impersonation", "gm.jwtsecurity"],
      "http_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "metrics_ring_buffer_size": 4096,
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_key_function": "none"
        },
        "gm_jwtsecurity": {
          "apiKey": "dm9sY2Fuby1lcGlkZW1pYy10d2VsZnRoLXRhbWFsZQ==",
          "jwtHeaderName": "userpolicy",
          "endpoint": "http://localhost:10909/jwt",
        },	
        "gm_impersonation": {	
          "servers": "C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=edge|C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=greymatter"	
        }
      },
      "tracing_config": null,
      "secret": {
        "secret_key": "secret-control-api-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/control-api/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ],
        "forward_client_cert_details": "SANITIZE_SET",
        "set_current_client_cert_details": {
            "uri": true
        }
      }
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-control-api",
      "zone_key": "zone-default-zone",
      "name": "control-api",
      "domain_keys": [
        "domain-control-api",
        "domain-control-api-egress"
      ],
      "listener_keys": [
        "listener-control-api",
        "listener-control-api-egress"
      ],
      "listeners": null
    }
    
  route-jwt-slash.json: |-
    {
      "route_key": "route-control-api-jwt",
      "domain_key": "domain-control-api-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-jwt.json: |-
    {
      "route_key": "route-control-api-jwt-slash",
      "domain_key": "domain-control-api-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt",
      "prefix_rewrite": "/jwt/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route.json: |-
    {
      "route_key": "route-control-api",
      "domain_key": "domain-control-api",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-control-api",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-control-api",
      "name": "control-api",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-control-api",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-dashboard-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-dashboard",
      "zone_key": "zone-default-zone",
      "name": "dashboard-service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 1337
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain-egress.json: |-
    {
      "domain_key": "domain-dashboard-egress",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10909,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null
    }
    
  domain.json: |-
    {
      "domain_key": "domain-dashboard",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10808,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "gzip_enabled": false,
      "force_https": true
    }
    
  listener-egress.json: |-
    {
      "listener_key": "listener-dashboard-egress",
      "zone_key": "zone-default-zone",
      "name": "dashboard",
      "ip": "127.0.0.1",
      "port": 10909,
      "protocol": "http_auto",
      "domain_keys": [
        "domain-dashboard",
        "domain-dashboard-egress"
      ],
      "tracing_config": null,
      "active_http_filters": ["gm.inheaders"],
      "http_filters": {
        "gm_inheaders": {}
      }
    }
    
  listener.json: |-
    {
      "listener_key": "listener-dashboard",
      "zone_key": "zone-default-zone",
      "name": "dashboard",
      "ip": "0.0.0.0",
      "port": 10808,
      "protocol": "http_auto",
      "domain_keys": ["domain-dashboard"],
      "tracing_config": null,
      "active_http_filters": ["gm.metrics", "gm.impersonation", "gm.jwtsecurity"],
      "http_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "metrics_ring_buffer_size": 4096,
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_key_function": "none"
        },
        "gm_jwtsecurity": {
          "apiKey": "dm9sY2Fuby1lcGlkZW1pYy10d2VsZnRoLXRhbWFsZQ==",
          "jwtHeaderName": "userpolicy",
          "endpoint": "http://localhost:10909/jwt",
        },	
        "gm_impersonation": {	
          "servers": "C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=edge"	
        }
      },
      "tracing_config": null,
      "secret": {
        "secret_key": "secret-dashboard-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/dashboard/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ],
        "forward_client_cert_details": "SANITIZE_SET",
        "set_current_client_cert_details": {
            "uri": true
        }
      }
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-dashboard",
      "zone_key": "zone-default-zone",
      "name": "dashboard",
      "domain_keys": [
        "domain-dashboard",
        "domain-dashboard-egress"
      ],
      "listener_keys": [
        "listener-dashboard",
        "listener-dashboard-egress"
      ],
      "listeners": null
    }
    
  route-jwt-slash.json: |-
    {
      "route_key": "route-dashboard-jwt",
      "domain_key": "domain-dashboard-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-jwt.json: |-
    {
      "route_key": "route-dashboard-jwt-slash",
      "domain_key": "domain-dashboard-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt",
      "prefix_rewrite": "/jwt/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route.json: |-
    {
      "route_key": "route-dashboard",
      "domain_key": "domain-dashboard",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-dashboard",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-dashboard",
      "name": "dashboard",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-dashboard",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-data-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-data",
      "zone_key": "zone-default-zone",
      "name": "data-service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 8181
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain-egress.json: |-
    {
      "domain_key": "domain-data-egress",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10909,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null
    }
    
  domain.json: |-
    {
      "domain_key": "domain-data",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10808,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "gzip_enabled": false,
      "force_https": true
    }
    
  listener-egress.json: |-
    {
      "listener_key": "listener-data-egress",
      "zone_key": "zone-default-zone",
      "name": "data",
      "ip": "127.0.0.1",
      "port": 10909,
      "protocol": "http_auto",
      "domain_keys": [
        "domain-data",
        "domain-data-egress"
      ],
      "tracing_config": null,
      "active_http_filters": ["gm.inheaders"],
      "http_filters": {
        "gm_inheaders": {}
      }
    }
    
  listener.json: |-
    {
      "listener_key": "listener-data",
      "zone_key": "zone-default-zone",
      "name": "data",
      "ip": "0.0.0.0",
      "port": 10808,
      "protocol": "http_auto",
      "domain_keys": ["domain-data"],
      "tracing_config": null,
      "active_http_filters": ["gm.metrics", "gm.impersonation", "gm.jwtsecurity"],
      "http_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "metrics_ring_buffer_size": 4096,
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_key_function": "none"
        },
        "gm_jwtsecurity": {
          "apiKey": "dm9sY2Fuby1lcGlkZW1pYy10d2VsZnRoLXRhbWFsZQ==",
          "jwtHeaderName": "userpolicy",
          "endpoint": "http://localhost:10909/jwt",
        },	
        "gm_impersonation": {	
          "servers": "C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=edge|C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=greymatter"	
        }
      },
      "tracing_config": null,
      "secret": {
        "secret_key": "secret-data-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/data/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ],
        "forward_client_cert_details": "SANITIZE_SET",
        "set_current_client_cert_details": {
            "uri": true
        }
      }
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-data",
      "zone_key": "zone-default-zone",
      "name": "data",
      "domain_keys": [
        "domain-data",
        "domain-data-egress"
      ],
      "listener_keys": [
        "listener-data",
        "listener-data-egress"
      ],
      "listeners": null
    }
    
  route-jwt-slash.json: |-
    {
      "route_key": "route-data-jwt",
      "domain_key": "domain-data-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-jwt.json: |-
    {
      "route_key": "route-data-jwt-slash",
      "domain_key": "domain-data-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt",
      "prefix_rewrite": "/jwt/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route.json: |-
    {
      "route_key": "route-data",
      "domain_key": "domain-data",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-data",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-data",
      "name": "data",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-data",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-data-internal-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-data-internal",
      "zone_key": "zone-default-zone",
      "name": "data-internal-service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 8181
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain-egress.json: |-
    {
      "domain_key": "domain-data-internal-egress",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10909,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null
    }
    
  domain.json: |-
    {
      "domain_key": "domain-data-internal",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10808,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "gzip_enabled": false,
      "force_https": true
    }
    
  listener-egress.json: |-
    {
      "listener_key": "listener-data-internal-egress",
      "zone_key": "zone-default-zone",
      "name": "data-internal",
      "ip": "127.0.0.1",
      "port": 10909,
      "protocol": "http_auto",
      "domain_keys": [
        "domain-data-internal",
        "domain-data-internal-egress"
      ],
      "tracing_config": null,
      "active_http_filters": ["gm.inheaders"],
      "http_filters": {
        "gm_inheaders": {}
      }
    }
    
  listener.json: |-
    {
      "listener_key": "listener-data-internal",
      "zone_key": "zone-default-zone",
      "name": "data-internal",
      "ip": "0.0.0.0",
      "port": 10808,
      "protocol": "http_auto",
      "domain_keys": ["domain-data-internal"],
      "tracing_config": null,
      "active_http_filters": ["gm.metrics", "gm.impersonation", "gm.jwtsecurity"],
      "http_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "metrics_ring_buffer_size": 4096,
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_key_function": "none"
        },
        "gm_jwtsecurity": {
          "apiKey": "dm9sY2Fuby1lcGlkZW1pYy10d2VsZnRoLXRhbWFsZQ==",
          "jwtHeaderName": "userpolicy",
          "endpoint": "http://localhost:10909/jwt",
        },	
        "gm_impersonation": {	
          "servers": "C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=edge|C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=greymatter"	
        }
      },
      "tracing_config": null,
      "secret": {
        "secret_key": "secret-data-internal-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/data-internal/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ],
        "forward_client_cert_details": "SANITIZE_SET",
        "set_current_client_cert_details": {
            "uri": true
        }
      }
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-data-internal",
      "zone_key": "zone-default-zone",
      "name": "data-internal",
      "domain_keys": [
        "domain-data-internal",
        "domain-data-internal-egress"
      ],
      "listener_keys": [
        "listener-data-internal",
        "listener-data-internal-egress"
      ],
      "listeners": null
    }
    
  route-jwt-slash.json: |-
    {
      "route_key": "route-data-internal-jwt",
      "domain_key": "domain-data-internal-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-jwt.json: |-
    {
      "route_key": "route-data-internal-jwt-slash",
      "domain_key": "domain-data-internal-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt",
      "prefix_rewrite": "/jwt/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route.json: |-
    {
      "route_key": "route-data-internal",
      "domain_key": "domain-data-internal",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-data-internal",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-data-internal",
      "name": "data-internal",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-data-internal",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-internal-jwt-security-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-internal-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "internal-jwt-security-service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 3000
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain-egress.json: |-
    {
      "domain_key": "domain-internal-jwt-security-egress",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10909,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null
    }
    
  domain.json: |-
    {
      "domain_key": "domain-internal-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10808,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "gzip_enabled": false,
      "force_https": true
    }
    
  listener-egress.json: |-
    {
      "listener_key": "listener-internal-jwt-security-egress",
      "zone_key": "zone-default-zone",
      "name": "internal-jwt-security",
      "ip": "127.0.0.1",
      "port": 10909,
      "protocol": "http_auto",
      "domain_keys": [
        "domain-internal-jwt-security",
        "domain-internal-jwt-security-egress"
      ],
      "tracing_config": null,
      "active_http_filters": ["gm.inheaders"],
      "http_filters": {
        "gm_inheaders": {}
      }
    }
    
  listener.json: |-
    {
      "listener_key": "listener-internal-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "internal-jwt-security",
      "ip": "0.0.0.0",
      "port": 10808,
      "protocol": "http_auto",
      "domain_keys": ["domain-internal-jwt-security"],
      "tracing_config": null,
      "active_http_filters": ["gm.metrics", "gm.impersonation"],
      "http_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "metrics_ring_buffer_size": 4096,
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_key_function": "none"
        },
        "gm_jwtsecurity": {
          "apiKey": "dm9sY2Fuby1lcGlkZW1pYy10d2VsZnRoLXRhbWFsZQ==",
          "jwtHeaderName": "userpolicy",
          "endpoint": "http://localhost:10909/jwt",
        },	
        "gm_impersonation": {	
          "servers": "C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=edge|C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=greymatter"	
        }
      },
      "tracing_config": null,
      "secret": {
        "secret_key": "secret-internal-jwt-security-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/internal-jwt-security/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ],
        "forward_client_cert_details": "SANITIZE_SET",
        "set_current_client_cert_details": {
            "uri": true
        }
      }
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-internal-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "internal-jwt-security",
      "domain_keys": [
        "domain-internal-jwt-security",
        "domain-internal-jwt-security-egress"
      ],
      "listener_keys": [
        "listener-internal-jwt-security",
        "listener-internal-jwt-security-egress"
      ],
      "listeners": null
    }
    
  route-jwt-slash.json: |-
    {
      "route_key": "route-internal-jwt-security-jwt",
      "domain_key": "domain-internal-jwt-security-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-jwt.json: |-
    {
      "route_key": "route-internal-jwt-security-jwt-slash",
      "domain_key": "domain-internal-jwt-security-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt",
      "prefix_rewrite": "/jwt/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route.json: |-
    {
      "route_key": "route-internal-jwt-security",
      "domain_key": "domain-internal-jwt-security",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-internal-jwt-security",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-internal-jwt-security",
      "name": "internal-jwt-security",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-internal-jwt-security",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-jwt-security-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "jwt-security-service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 3000
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain-egress.json: |-
    {
      "domain_key": "domain-jwt-security-egress",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10909,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null
    }
    
  domain.json: |-
    {
      "domain_key": "domain-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10808,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "gzip_enabled": false,
      "force_https": true
    }
    
  listener-egress.json: |-
    {
      "listener_key": "listener-jwt-security-egress",
      "zone_key": "zone-default-zone",
      "name": "jwt-security",
      "ip": "127.0.0.1",
      "port": 10909,
      "protocol": "http_auto",
      "domain_keys": [
        "domain-jwt-security",
        "domain-jwt-security-egress"
      ],
      "tracing_config": null,
      "active_http_filters": ["gm.inheaders"],
      "http_filters": {
        "gm_inheaders": {}
      }
    }
    
  listener.json: |-
    {
      "listener_key": "listener-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "jwt-security",
      "ip": "0.0.0.0",
      "port": 10808,
      "protocol": "http_auto",
      "domain_keys": ["domain-jwt-security"],
      "tracing_config": null,
      "active_http_filters": ["gm.metrics", "gm.impersonation"],
      "http_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "metrics_ring_buffer_size": 4096,
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_key_function": "none"
        },
        "gm_jwtsecurity": {
          "apiKey": "dm9sY2Fuby1lcGlkZW1pYy10d2VsZnRoLXRhbWFsZQ==",
          "jwtHeaderName": "userpolicy",
          "endpoint": "http://localhost:10909/jwt",
        },	
        "gm_impersonation": {	
          "servers": "C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=edge|C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=greymatter"	
        }
      },
      "tracing_config": null,
      "secret": {
        "secret_key": "secret-jwt-security-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/jwt-security/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ],
        "forward_client_cert_details": "SANITIZE_SET",
        "set_current_client_cert_details": {
            "uri": true
        }
      }
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-jwt-security",
      "zone_key": "zone-default-zone",
      "name": "jwt-security",
      "domain_keys": [
        "domain-jwt-security",
        "domain-jwt-security-egress"
      ],
      "listener_keys": [
        "listener-jwt-security",
        "listener-jwt-security-egress"
      ],
      "listeners": null
    }
    
  route-jwt-slash.json: |-
    {
      "route_key": "route-jwt-security-jwt",
      "domain_key": "domain-jwt-security-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-jwt.json: |-
    {
      "route_key": "route-jwt-security-jwt-slash",
      "domain_key": "domain-jwt-security-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt",
      "prefix_rewrite": "/jwt/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route.json: |-
    {
      "route_key": "route-jwt-security",
      "domain_key": "domain-jwt-security",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-jwt-security",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-jwt-security",
      "name": "jwt-security",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-jwt-security",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-prometheus-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-prometheus",
      "zone_key": "zone-default-zone",
      "name": "prometheus-service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 9090
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain-egress.json: |-
    {
      "domain_key": "domain-prometheus-egress",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10909,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null
    }
    
  domain.json: |-
    {
      "domain_key": "domain-prometheus",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10808,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "gzip_enabled": false,
      "force_https": true
    }
    
  listener-egress.json: |-
    {
      "listener_key": "listener-prometheus-egress",
      "zone_key": "zone-default-zone",
      "name": "prometheus",
      "ip": "127.0.0.1",
      "port": 10909,
      "protocol": "http_auto",
      "domain_keys": [
        "domain-prometheus",
        "domain-prometheus-egress"
      ],
      "tracing_config": null,
      "active_http_filters": ["gm.inheaders"],
      "http_filters": {
        "gm_inheaders": {}
      }
    }
    
  listener.json: |-
    {
      "listener_key": "listener-prometheus",
      "zone_key": "zone-default-zone",
      "name": "prometheus",
      "ip": "0.0.0.0",
      "port": 10808,
      "protocol": "http_auto",
      "domain_keys": ["domain-prometheus"],
      "tracing_config": null,
      "active_http_filters": ["gm.metrics", "gm.jwtsecurity"],
      "http_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "metrics_ring_buffer_size": 4096,
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_key_function": "none"
        },
        "gm_jwtsecurity": {
          "apiKey": "dm9sY2Fuby1lcGlkZW1pYy10d2VsZnRoLXRhbWFsZQ==",
          "jwtHeaderName": "userpolicy",
          "endpoint": "http://localhost:10909/jwt",
        },
      },
      "tracing_config": null,
      "secret": {
        "secret_key": "secret-prometheus-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/prometheus/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ],
        "forward_client_cert_details": "SANITIZE_SET",
        "set_current_client_cert_details": {
            "uri": true
        }
      }
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-prometheus",
      "zone_key": "zone-default-zone",
      "name": "prometheus",
      "domain_keys": [
        "domain-prometheus",
        "domain-prometheus-egress"
      ],
      "listener_keys": [
        "listener-prometheus",
        "listener-prometheus-egress"
      ],
      "listeners": null
    }
    
  route-jwt-slash.json: |-
    {
      "route_key": "route-prometheus-jwt",
      "domain_key": "domain-prometheus-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-jwt.json: |-
    {
      "route_key": "route-prometheus-jwt-slash",
      "domain_key": "domain-prometheus-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt",
      "prefix_rewrite": "/jwt/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route.json: |-
    {
      "route_key": "route-prometheus",
      "domain_key": "domain-prometheus",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-prometheus",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-prometheus",
      "name": "prometheus",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-prometheus",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-slo-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "cluster_key": "cluster-slo",
      "zone_key": "zone-default-zone",
      "name": "slo-service",
      "instances": [
        {
            "host": "0.0.0.0",
            "port": 1337
        }
      ],
      "circuit_breakers": null,
      "outlier_detection": null,
      "health_checks": []
    }
  domain-egress.json: |-
    {
      "domain_key": "domain-slo-egress",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10909,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null
    }
    
  domain.json: |-
    {
      "domain_key": "domain-slo",
      "zone_key": "zone-default-zone",
      "name": "*",
      "port": 10808,
      "redirects": null,
      "gzip_enabled": false,
      "cors_config": null,
      "aliases": null,
      "gzip_enabled": false,
      "force_https": true
    }
    
  listener-egress.json: |-
    {
      "listener_key": "listener-slo-egress",
      "zone_key": "zone-default-zone",
      "name": "slo",
      "ip": "127.0.0.1",
      "port": 10909,
      "protocol": "http_auto",
      "domain_keys": [
        "domain-slo",
        "domain-slo-egress"
      ],
      "tracing_config": null,
      "active_http_filters": ["gm.inheaders"],
      "http_filters": {
        "gm_inheaders": {}
      }
    }
    
  listener.json: |-
    {
      "listener_key": "listener-slo",
      "zone_key": "zone-default-zone",
      "name": "slo",
      "ip": "0.0.0.0",
      "port": 10808,
      "protocol": "http_auto",
      "domain_keys": ["domain-slo"],
      "tracing_config": null,
      "active_http_filters": ["gm.metrics", "gm.impersonation", "gm.jwtsecurity"],
      "http_filters": {
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "metrics_ring_buffer_size": 4096,
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_key_function": "none"
        },
        "gm_jwtsecurity": {
          "apiKey": "dm9sY2Fuby1lcGlkZW1pYy10d2VsZnRoLXRhbWFsZQ==",
          "jwtHeaderName": "userpolicy",
          "endpoint": "http://localhost:10909/jwt",
        },	
        "gm_impersonation": {	
          "servers": "C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=edge|C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=greymatter"	
        }
      },
      "tracing_config": null,
      "secret": {
        "secret_key": "secret-slo-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/slo/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ],
        "forward_client_cert_details": "SANITIZE_SET",
        "set_current_client_cert_details": {
            "uri": true
        }
      }
    }
    
  proxy.json: |-
    {
      "proxy_key": "proxy-slo",
      "zone_key": "zone-default-zone",
      "name": "slo",
      "domain_keys": [
        "domain-slo",
        "domain-slo-egress"
      ],
      "listener_keys": [
        "listener-slo",
        "listener-slo-egress"
      ],
      "listeners": null
    }
    
  route-jwt-slash.json: |-
    {
      "route_key": "route-slo-jwt",
      "domain_key": "domain-slo-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-jwt.json: |-
    {
      "route_key": "route-slo-jwt-slash",
      "domain_key": "domain-slo-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt",
      "prefix_rewrite": "/jwt/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route.json: |-
    {
      "route_key": "route-slo",
      "domain_key": "domain-slo",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-slo",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-slo",
      "name": "slo",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-slo",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-catalog-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-catalog-cluster",
      "name": "catalog",
      "instances": [],
      "circuit_breakers": null,
      "health_checks": [],
      "require_tls": true,
      "secret": {
        "secret_key": "secret-catalog-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/edge/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ]
      },
      "outlier_detection": null
    }
    
  route-1.json: |-
    {
      "route_key": "edge-catalog-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/catalog/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-catalog-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-catalog-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/catalog/latest",
      "prefix_rewrite": "/services/catalog/latest/",
      "redirects": null,
      "shared_rules_key": "edge-catalog-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-catalog-shared-rules",
      "name": "catalog",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-catalog-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-control-api-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-control-api-cluster",
      "name": "control-api",
      "instances": [],
      "circuit_breakers": null,
      "health_checks": [],
      "require_tls": true,
      "secret": {
        "secret_key": "secret-control-api-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/edge/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ]
      },
      "outlier_detection": null
    }
    
  route-1.json: |-
    {
      "route_key": "edge-control-api-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/control-api/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-control-api-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-control-api-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/control-api/latest",
      "prefix_rewrite": "/services/control-api/latest/",
      "redirects": null,
      "shared_rules_key": "edge-control-api-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-control-api-shared-rules",
      "name": "control-api",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-control-api-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-dashboard-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-dashboard-cluster",
      "name": "dashboard",
      "instances": [],
      "circuit_breakers": null,
      "health_checks": [],
      "require_tls": true,
      "secret": {
        "secret_key": "secret-dashboard-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/edge/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ]
      },
      "outlier_detection": null
    }
    
  route-1.json: |-
    {
      "route_key": "edge-dashboard-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/dashboard/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-dashboard-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-dashboard-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/dashboard/latest",
      "prefix_rewrite": "/services/dashboard/latest/",
      "redirects": null,
      "shared_rules_key": "edge-dashboard-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-dashboard-shared-rules",
      "name": "dashboard",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-dashboard-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-data-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-data-cluster",
      "name": "data",
      "instances": [],
      "circuit_breakers": null,
      "health_checks": [],
      "require_tls": true,
      "secret": {
        "secret_key": "secret-data-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/edge/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ]
      },
      "outlier_detection": null
    }
    
  route-1.json: |-
    {
      "route_key": "edge-data-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/data/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-data-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-data-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/data/latest",
      "prefix_rewrite": "/services/data/latest/",
      "redirects": null,
      "shared_rules_key": "edge-data-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-data-shared-rules",
      "name": "data",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-data-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-data-internal-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-data-internal-cluster",
      "name": "data-internal",
      "instances": [],
      "circuit_breakers": null,
      "health_checks": [],
      "require_tls": true,
      "secret": {
        "secret_key": "secret-data-internal-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/edge/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ]
      },
      "outlier_detection": null
    }
    
  route-1.json: |-
    {
      "route_key": "edge-data-internal-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/data-internal/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-data-internal-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-data-internal-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/data-internal/latest",
      "prefix_rewrite": "/services/data-internal/latest/",
      "redirects": null,
      "shared_rules_key": "edge-data-internal-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-data-internal-shared-rules",
      "name": "data-internal",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-data-internal-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-internal-jwt-security-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-internal-jwt-security-cluster",
      "name": "internal-jwt-security",
      "instances": [],
      "circuit_breakers": null,
      "health_checks": [],
      "require_tls": true,
      "secret": {
        "secret_key": "secret-internal-jwt-security-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/edge/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ]
      },
      "outlier_detection": null
    }
    
  route-1.json: |-
    {
      "route_key": "edge-internal-jwt-security-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/internal-jwt-security/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-internal-jwt-security-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/internal-jwt-security/latest",
      "prefix_rewrite": "/services/internal-jwt-security/latest/",
      "redirects": null,
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-internal-jwt-security-shared-rules",
      "name": "internal-jwt-security",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-internal-jwt-security-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-jwt-security-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-jwt-security-cluster",
      "name": "jwt-security",
      "instances": [],
      "circuit_breakers": null,
      "health_checks": [],
      "require_tls": true,
      "secret": {
        "secret_key": "secret-jwt-security-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/edge/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ]
      },
      "outlier_detection": null
    }
    
  route-1.json: |-
    {
      "route_key": "edge-jwt-security-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/jwt-security/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-jwt-security-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/jwt-security/latest",
      "prefix_rewrite": "/services/jwt-security/latest/",
      "redirects": null,
      "shared_rules_key": "edge-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-jwt-security-shared-rules",
      "name": "jwt-security",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-jwt-security-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-prometheus-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-prometheus-cluster",
      "name": "prometheus",
      "instances": [],
      "circuit_breakers": null,
      "health_checks": [],
      "require_tls": true,
      "secret": {
        "secret_key": "secret-prometheus-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/edge/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ]
      },
      "outlier_detection": null
    }
    
  route-1.json: |-
    {
      "route_key": "edge-prometheus-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/prometheus/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-prometheus-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-prometheus-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/prometheus/latest",
      "prefix_rewrite": "/services/prometheus/latest/",
      "redirects": null,
      "shared_rules_key": "edge-prometheus-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-prometheus-shared-rules",
      "name": "prometheus",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-prometheus-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-slo-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
      "zone_key": "zone-default-zone",
      "cluster_key": "edge-to-slo-cluster",
      "name": "slo",
      "instances": [],
      "circuit_breakers": null,
      "health_checks": [],
      "require_tls": true,
      "secret": {
        "secret_key": "secret-slo-secret",
        "secret_name": "spiffe://quickstart.greymatter.io/edge/mTLS",
        "secret_validation_name": "spiffe://quickstart.greymatter.io",
        "ecdh_curves": [
            "X25519:P-256:P-521:P-384"
        ]
      },
      "outlier_detection": null
    }
    
  route-1.json: |-
    {
      "route_key": "edge-slo-route",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/slo/latest/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-slo-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-2.json: |-
    {
      "route_key": "edge-slo-route-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/slo/latest",
      "prefix_rewrite": "/services/slo/latest/",
      "redirects": null,
      "shared_rules_key": "edge-slo-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "zone_key": "zone-default-zone",
      "shared_rules_key": "edge-slo-shared-rules",
      "name": "slo",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "edge-to-slo-cluster",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
    
...
---
# Source: fabric/charts/control-api/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: special-mesh-config
  namespace: default
data:
  cluster.json: |-
    {
        "cluster_key": "cluster-edge",
        "zone_key": "zone-default-zone",
        "name": "edge",
        "instances": [
          {
              "host": "localhost",
              "port": 10808
          }
        ],
        "circuit_breakers": null,
        "outlier_detection": null,
        "health_checks": []
      }
  domain-egress.json: |-
    {
        "domain_key": "edge-egress",
        "zone_key": "zone-default-zone",
        "name": "*",
        "port": 10909,
        "redirects": null,
        "gzip_enabled": false,
        "cors_config": null,
        "aliases": null
    }
  domain.json: |-
    {
        "domain_key": "edge",
        "zone_key": "zone-default-zone",
        "name": "*",
        "port": 10808,
        "redirects": null,
        "gzip_enabled": false,
        "cors_config": null,
        "aliases": null,
        "force_https": true,
        "ssl_config": {
            "require_client_certs": true,
            "trust_file": "/etc/proxy/tls/edge/ca.crt",
            "cert_key_pairs": [
                {
                    "certificate_path": "/etc/proxy/tls/edge/server.crt",
                    "key_path": "/etc/proxy/tls/edge/server.key"
                }
            ]
        }
    }
  listener-egress.json: |-
    {
      "zone_key": "zone-default-zone",
      "listener_key": "edge-listener-egress",
      "domain_keys": ["edge", "edge-egress"],
      "name": "edge",
      "ip": "0.0.0.0",
      "port": 10909,
      "protocol": "http_auto",
      "tracing_config": null,
      "active_http_filters": ["gm.inheaders"],
      "http_filters": {
        "gm_inheaders": {},
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "metrics_ring_buffer_size": 4096,
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_key_function": "none"
        }
      }
    }
    
  listener.json: |-
    {
      "zone_key": "zone-default-zone",
      "listener_key": "edge-listener",
      "domain_keys": ["edge", "edge-egress"],
      "name": "edge",
      "ip": "0.0.0.0",
      "port": 10808,
      "protocol": "http_auto",
      "tracing_config": null,
      "active_http_filters": ["gm.metrics", "gm.inheaders", "gm.jwtsecurity"],
      "http_filters": {
        "gm_inheaders": {},
        "gm_metrics": {
          "metrics_port": 8081,
          "metrics_host": "0.0.0.0",
          "metrics_dashboard_uri_path": "/metrics",
          "metrics_prometheus_uri_path": "/prometheus",
          "metrics_ring_buffer_size": 4096,
          "prometheus_system_metrics_interval_seconds": 15,
          "metrics_key_function": "none"
        },
        "gm_jwtsecurity": {
          "apiKey": "dm9sY2Fuby1lcGlkZW1pYy10d2VsZnRoLXRhbWFsZQ==",
          "jwtHeaderName": "userpolicy",
          "endpoint": "http://localhost:10909/jwt",
        }
      }
    }
    
  proxy.json: |-
    {
      "zone_key": "zone-default-zone",
      "proxy_key": "edge-proxy",
      "domain_keys": ["edge", "edge-egress"],
      "listener_keys": ["edge-listener", "edge-listener-egress"],
      "name": "edge",
      "listeners": null
    }
    
  route-catalog-to-internal-data-slash.json: |-
    {
      "route_key": "catalog-internal-data-route-slash",
      "domain_key": "domain-catalog-egress",
      "zone_key": "zone-default-zone",
      "path": "/data",
      "prefix_rewrite": "/data/",
      "redirects": null,
      "shared_rules_key": "edge-data-internal-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-catalog-to-internal-data.json: |-
    {
      "route_key": "catalog-internal-data-route",
      "domain_key": "domain-catalog-egress",
      "zone_key": "zone-default-zone",
      "path": "/data/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-data-internal-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-dashboard-slash.json: |-
    {
      "route_key": "edge-dashboard-route-no-slash",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "edge-dashboard-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-jwt-slash.json: |-
    {
      "route_key": "route-edge-jwt",
      "domain_key": "edge-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt/",
      "prefix_rewrite": "/",
      "redirects": null,
      "shared_rules_key": "edge-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route-jwt.json: |-
    {
      "route_key": "route-edge-jwt-slash",
      "domain_key": "edge-egress",
      "zone_key": "zone-default-zone",
      "path": "/jwt",
      "prefix_rewrite": "/jwt/",
      "redirects": null,
      "shared_rules_key": "edge-jwt-security-shared-rules",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  route.json: |-
    {
      "route_key": "route-edge",
      "domain_key": "edge",
      "zone_key": "zone-default-zone",
      "path": "/services/edge/latest/",
      "prefix_rewrite": null,
      "redirects": null,
      "shared_rules_key": "shared-rules-edge",
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "retry_policy": null
    }
    
  shared_rules.json: |-
    {
      "shared_rules_key": "shared-rules-edge",
      "name": "edge",
      "zone_key": "zone-default-zone",
      "default": {
        "light": [
          {
            "constraint_key": "",
            "cluster_key": "cluster-edge",
            "metadata": null,
            "properties": null,
            "response_data": {},
            "weight": 1
          }
        ],
        "dark": null,
        "tap": null
      },
      "rules": null,
      "response_data": {},
      "cohort_seed": null,
      "properties": null,
      "retry_policy": null
    }
---
# Source: fabric/charts/control/templates/role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: control-sa-role
  namespace: default
rules:
- apiGroups: [""]
  resources: ["pods", "endpoints"]
  verbs: ["get", "list", "watch"]
---
# Source: fabric/charts/control/templates/rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: control-sa-rolebinding
  namespace: default
subjects:
- kind: ServiceAccount
  name: control-sa
  namespace: default
roleRef:
  kind: ClusterRole
  name: control-sa-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: fabric/templates/waiter-role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: waiter-sa-role
  namespace: default
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get", "list", "watch"]
---
# Source: fabric/templates/waiter-rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: waiter-sa-rolebinding
  namespace: default
subjects:
- kind: ServiceAccount
  name: waiter-sa
  namespace: default
roleRef:
  kind: Role
  name: waiter-sa-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: fabric/charts/control-api/templates/control-api-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: control-api
spec:
  selector:
    gm.proxy: control-api
  ports:
  - port: 5555
    targetPort: 5555
---
# Source: fabric/charts/control/templates/control-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    run: control
  name: control
  namespace: default
spec:
  ports:
  - port: 50000
    protocol: TCP
    targetPort: grpc
  selector:
    run: control
  type: ClusterIP
---
# Source: fabric/charts/control/templates/control.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: control
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      gm.proxy: control
      deployment: control
  template:
    metadata:
      labels:
        gm.proxy: control
        deployment: control
        run: control
    spec:
      # This service_account must have read access to both pods and endpoints, because gm-control uses the kubernetes API to do service discovery, and the waiter init container needs access to service endpoints to wait on control-api
      serviceAccountName: control-sa
      containers:
        - name: control
          image: docker-dev.production.deciphernow.com/deciphernow/gm-control:1.2.2
          imagePullPolicy: IfNotPresent
          env:          
          - name: GM_CONTROL_API_HOST
            value: "control-api:5555"
          - name: GM_CONTROL_API_INSECURE
            value: "true"
          - name: GM_CONTROL_API_KEY
            value: "xxx"
          - name: GM_CONTROL_API_SSL
            value: "false"
          - name: GM_CONTROL_API_SSLCERT
            value: "/service-certs/server.crt"
          - name: GM_CONTROL_API_SSLKEY
            value: "/service-certs/server.key"
          - name: GM_CONTROL_API_ZONE_NAME
            value: "zone-default-zone"
          - name: GM_CONTROL_CMD
            value: "kubernetes"
          - name: GM_CONTROL_CONSOLE_LEVEL
            value: "info"
          - name: GM_CONTROL_KUBERNETES_CLUSTER_LABEL
            value: "gm.proxy"
          - name: GM_CONTROL_KUBERNETES_NAMESPACES
            value: "default"
          - name: GM_CONTROL_KUBERNETES_PORT_NAME
            value: "proxy"
          - name: GM_CONTROL_XDS_ADS_ENABLED
            value: "true"
          - name: GM_CONTROL_XDS_RESOLVE_DNS
            value: "true"
          ports:
            - name: grpc
              containerPort: 50000
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: grpc
            initialDelaySeconds: 2
          resources:
            null
          volumeMounts:
            - name: controlapi-certs
              mountPath: /service-certs
      initContainers:
        - name: ensure-control-api
          image: deciphernow/k8s-waiter:latest
          env:
            - name: NAMESPACE
              value: default
            - name: SERVICE
              value: control-api
            - name: POST_DELAY
              value: '10'
      imagePullSecrets:
      - name: docker.secret
      volumes:
        - name: controlapi-certs
          secret:
            secretName: control-certs
            defaultMode: 0777
---
# Source: fabric/charts/control-api/templates/control-api.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: control-api
  namespace: default
spec:
  serviceName: control-api
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      gm.proxy: control-api
      deployment: control-api
  template:
    metadata:
      labels:
        gm.proxy: control-api
        deployment: control-api
    spec:
      containers:
        - name: control-api
          image: docker-dev.production.deciphernow.com/deciphernow/gm-control-api:1.2.1
          imagePullPolicy: IfNotPresent
          env:          
          - name: GM_CONTROL_API_ADDRESS
            value: "0.0.0.0:5555"
          - name: GM_CONTROL_API_CA_CERT_PATH
            value: "/service-certs/ca.crt"
          - name: GM_CONTROL_API_LOG_LEVEL
            value: "debug"
          - name: GM_CONTROL_API_ORG_KEY
            value: "deciphernow"
          - name: GM_CONTROL_API_PERSISTER_PATH
            value: "/app/control-api/data/backend.json"
          - name: GM_CONTROL_API_PERSISTER_TYPE
            value: "file"
          - name: GM_CONTROL_API_SERVER_CERT_PATH
            value: "/service-certs/server.crt"
          - name: GM_CONTROL_API_SERVER_KEY_PATH
            value: "/service-certs/server.key"
          - name: GM_CONTROL_API_USE_TLS
            value: "false"
          - name: GM_CONTROL_API_ZONE_KEY
            value: "zone-default-zone"
          - name: GM_CONTROL_API_ZONE_NAME
            value: "zone-default-zone"
          ports:
            - name: http
              containerPort: 5555
              protocol: TCP
          volumeMounts:
            - name: service-certs
              mountPath: /service-certs
            - name: control-api-backup
              mountPath: /app/control-api/data
        - name: sidecar   
          image: "docker-dev.production.deciphernow.com/deciphernow/gm-proxy:1.2.1"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          ports:
            - name: proxy
              containerPort: 10808
            - name: metrics
              containerPort: 8081
          # If mTLS is enabled on the service, we can't use normal httpGet probes. Instead we add the probes to the sidecar so that we can exec in and call the service directly. The control-api service does not have the utilities (curl, wget with ssl) we need to do these probes there.
          env:            
            - name: ENVOY_ADMIN_LOG_PATH
              value: "/dev/stdout"
            - name: PROXY_DYNAMIC
              value: "true"
            - name: SPIRE_PATH
              value: "/run/spire/socket/agent.sock"
            - name: XDS_CLUSTER
              value: "control-api"
            - name: XDS_HOST
              value: "control.default.svc"
            - name: XDS_NODE_ID
              value: "default"
            - name: XDS_PORT
              value: "\"50000\""
            - name: XDS_ZONE
              value: "zone-default-zone"
          volumeMounts:            
            - name: spire-socket
              mountPath: /run/spire/socket
              readOnly: false
      imagePullSecrets:
      - name: docker.secret
      volumes:
      - name: service-certs
        secret:
          secretName: controlapi-certs
          defaultMode: 0600      
      - name: spire-socket
        hostPath:
          path: /run/spire/socket
          type: DirectoryOrCreate
  volumeClaimTemplates:
  - metadata:
      name: control-api-backup
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
# Source: fabric/charts/control-api/templates/control-api-init-hook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: control-api-init
  annotations:
    # Run this job after an install or an upgrade
    "helm.sh/hook": post-install,post-upgrade
    # If a job with this name already exists, delete it before running this one
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      name: control-api-init
    spec:
      restartPolicy: "Never"
      # We need a SA with read access to the `Endpoints` resource
      serviceAccountName: waiter-sa
      initContainers:
        - name: ensure-gm-control-api
          image: deciphernow/k8s-waiter:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: NAMESPACE
              value: default
            - name: SERVICE
              value: control-api
      containers:
        - image: docker-dev.production.deciphernow.com/deciphernow/greymatter:1.2.0
          name: control-api-init
          imagePullPolicy: IfNotPresent
          command: ["/tmp/bootstrap/bootstrap.sh"]
          env:          
          - name: BASIC_OBJECT_PATH
            value: "/tmp/mesh/basic_objects"
          - name: GREYMATTER_API_HOST
            value: "control-api:5555"
          - name: GREYMATTER_API_INSECURE
            value: "true"
          - name: GREYMATTER_API_KEY
            value: "xxx"
          - name: GREYMATTER_API_SSL
            value: "false"
          - name: GREYMATTER_API_SSLCERT
            value: "/certs/server.crt"
          - name: GREYMATTER_API_SSLKEY
            value: "/certs/server.key"
          - name: GREYMATTER_CONSOLE_LEVEL
            value: "debug"
          - name: SPIRE_ENABLED
            value: "true"
          volumeMounts:
            - name: service-certs
              mountPath: /certs
            - name: service-config-volume-catalog
              mountPath: /etc/config/mesh/services/catalog
            - name: edge-config-volume-catalog
              mountPath: /etc/config/mesh/edge/catalog
            - name: service-config-volume-control-api
              mountPath: /etc/config/mesh/services/control-api
            - name: edge-config-volume-control-api
              mountPath: /etc/config/mesh/edge/control-api
            - name: service-config-volume-dashboard
              mountPath: /etc/config/mesh/services/dashboard
            - name: edge-config-volume-dashboard
              mountPath: /etc/config/mesh/edge/dashboard
            - name: service-config-volume-data
              mountPath: /etc/config/mesh/services/data
            - name: edge-config-volume-data
              mountPath: /etc/config/mesh/edge/data
            - name: service-config-volume-data-internal
              mountPath: /etc/config/mesh/services/data-internal
            - name: edge-config-volume-data-internal
              mountPath: /etc/config/mesh/edge/data-internal
            - name: service-config-volume-internal-jwt-security
              mountPath: /etc/config/mesh/services/internal-jwt-security
            - name: edge-config-volume-internal-jwt-security
              mountPath: /etc/config/mesh/edge/internal-jwt-security
            - name: service-config-volume-jwt-security
              mountPath: /etc/config/mesh/services/jwt-security
            - name: edge-config-volume-jwt-security
              mountPath: /etc/config/mesh/edge/jwt-security
            - name: service-config-volume-prometheus
              mountPath: /etc/config/mesh/services/prometheus
            - name: edge-config-volume-prometheus
              mountPath: /etc/config/mesh/edge/prometheus
            - name: service-config-volume-slo
              mountPath: /etc/config/mesh/services/slo
            - name: edge-config-volume-slo
              mountPath: /etc/config/mesh/edge/slo
            - name: special-config-volume
              mountPath: /etc/config/mesh/special
            - name: bootstrap-script-volume
              mountPath: /tmp/bootstrap
      volumes:
        - name: service-certs
          secret:
            secretName: sidecar-certs
            defaultMode: 0600
        - name: service-config-volume-catalog
          configMap:
            name: service-catalog-mesh-config
        - name: edge-config-volume-catalog
          configMap:
            name: edge-catalog-mesh-config
        - name: service-config-volume-control-api
          configMap:
            name: service-control-api-mesh-config
        - name: edge-config-volume-control-api
          configMap:
            name: edge-control-api-mesh-config
        - name: service-config-volume-dashboard
          configMap:
            name: service-dashboard-mesh-config
        - name: edge-config-volume-dashboard
          configMap:
            name: edge-dashboard-mesh-config
        - name: service-config-volume-data
          configMap:
            name: service-data-mesh-config
        - name: edge-config-volume-data
          configMap:
            name: edge-data-mesh-config
        - name: service-config-volume-data-internal
          configMap:
            name: service-data-internal-mesh-config
        - name: edge-config-volume-data-internal
          configMap:
            name: edge-data-internal-mesh-config
        - name: service-config-volume-internal-jwt-security
          configMap:
            name: service-internal-jwt-security-mesh-config
        - name: edge-config-volume-internal-jwt-security
          configMap:
            name: edge-internal-jwt-security-mesh-config
        - name: service-config-volume-jwt-security
          configMap:
            name: service-jwt-security-mesh-config
        - name: edge-config-volume-jwt-security
          configMap:
            name: edge-jwt-security-mesh-config
        - name: service-config-volume-prometheus
          configMap:
            name: service-prometheus-mesh-config
        - name: edge-config-volume-prometheus
          configMap:
            name: edge-prometheus-mesh-config
        - name: service-config-volume-slo
          configMap:
            name: service-slo-mesh-config
        - name: edge-config-volume-slo
          configMap:
            name: edge-slo-mesh-config
        - name: bootstrap-script-volume
          configMap:
            name: bootstrap-script
            defaultMode: 0777
        - name: special-config-volume
          configMap:
            name: special-mesh-config
      imagePullSecrets:
        - name: docker.secret
