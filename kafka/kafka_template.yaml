---
# Source: kafka/charts/zookeeper/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: kafka-observables-zookeeper
  namespace: kafka
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-5.14.3
    app.kubernetes.io/instance: kafka-observables
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: kafka-observables
      app.kubernetes.io/component: zookeeper
  maxUnavailable: 1
---
# Source: kafka/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: kafka-observables
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-10.3.3
    app.kubernetes.io/instance: kafka-observables
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/instance: kafka-observables
      app.kubernetes.io/component: kafka
---
# Source: kafka/charts/zookeeper/templates/svc.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: kafka-observables-zookeeper
#  namespace: kafka
#  labels:
#    app.kubernetes.io/name: zookeeper
#    helm.sh/chart: zookeeper-5.14.3
#    app.kubernetes.io/instance: kafka-observables
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/component: zookeeper
#spec:
#  type: ClusterIP
#  ports:
#
#    - name: tcp-client
#      port: 2181
#      targetPort: client
#
#
#    - name: follower
#      port: 2888
#      targetPort: follower
#    - name: tcp-election
#      port: 3888
#      targetPort: election
#  selector:
#    app.kubernetes.io/name: zookeeper
#    app.kubernetes.io/instance: kafka-observables
#    app.kubernetes.io/component: zookeeper
#---
# Source: kafka/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-observables
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-10.3.3
    app.kubernetes.io/instance: kafka-observables
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
spec:
  type: ClusterIP
  ports:
    - name: tcp-kafka
      port: 8092
      protocol: TCP
      targetPort: kafka
      nodePort: null
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: kafka-observables
    app.kubernetes.io/component: kafka
---
# zk sts 0
# Source: kafka/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-observables-zookeeper-0
  namespace: kafka
  labels:
    app.kubernetes.io/name: zookeeper-0
    helm.sh/chart: zookeeper-5.14.3
    app.kubernetes.io/instance: kafka-observables
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper-0
    role: zookeeper
    greymatter.io/control: zookeeper-0
spec:
  serviceName: kafka-observables-zookeeper-0
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper-0
      app.kubernetes.io/instance: kafka-observables
      app.kubernetes.io/component: zookeeper-0
  template:
    metadata:
      name: kafka-observables-zookeeper
      labels:
        app.kubernetes.io/name: zookeeper-0
        helm.sh/chart: zookeeper-5.14.3
        app.kubernetes.io/instance: kafka-observables
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zookeeper-0
    spec:
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/minideb:buster
          imagePullPolicy: "Always"
          command: ["chown", "-R", "1001:1001", "/bitnami/zookeeper"]
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/zookeeper

      containers:
        - name: sidecar
          image: "docker.greymatter.io/development/gm-proxy:1.6.0-dev"
          imagePullPolicy: "Always"
          args:
            - -c
            - /etc/greymatter/config.yaml
          command:
            - /app/gm-proxy
          env:
            - name: PROXY_DYNAMIC
              value: "true"
            - name: SPIRE_PATH
              value: "/run/spire/socket/agent.sock"
            - name: XDS_CLUSTER
              value: "zookeeper-0"
            - name: XDS_HOST
              value: "control.default.svc"
            - name: XDS_PORT
              value: "50000"
            - name: XDS_ZONE
              value: "zone-default-zone"
          ports:
          - containerPort: 2180
            protocol: TCP
            name: proxy
          - containerPort: 2889
            protocol: TCP
            name: follower
          - containerPort: 3889
            protocol: TCP
            name: election
          - containerPort: 8081
            protocol: TCP
            name: metrics
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: spire-socket
              mountPath: /run/spire/socket
              readOnly: false
            - name: sidecar-config
              mountPath: /etc/greymatter
              readOnly: true
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.6.1-debian-10-r7
          imagePullPolicy: "IfNotPresent"
          command:
            - bash
            - -ec
            - |
                # Execute entrypoint as usual after obtaining ZOO_SERVER_ID based on POD hostname
                HOSTNAME=`hostname -s`
                if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
                  ORD=${BASH_REMATCH[2]}
                else
                  echo "Failed to get index from hostname $HOST"
                  exit 1
                fi
                if [ ! -e "/bitnami/zookeeper/data/myid" ] ; then
                  export ZOO_SERVER_ID=1
                else
                  echo "1" > /bitnami/zookeeper/data/myid
                fi
                exec /entrypoint.sh /run.sh
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          env:
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "200"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: "srvr, mntr"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "3"
            - name: ZOO_SERVERS
              value: 0.0.0.0:2888:3888 127.0.0.1:2891:3891 127.0.0.1:2892:3892
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: "ERROR"
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "no"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:

            - name: client
              containerPort: 2181

          livenessProbe:
            tcpSocket:

              port: client

            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            tcpSocket:

              port: client

            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: data
              mountPath: /bitnami/zookeeper
      imagePullSecrets:
        - name: docker.secret
      volumes:
        - name: sidecar-config
          configMap:
            name: zk0-sidecar
        - name: spire-socket
          hostPath:
            path: /run/spire/socket
            type: DirectoryOrCreate
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# zk sts 1
# Source: kafka/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-observables-zookeeper-1
  namespace: kafka
  labels:
    app.kubernetes.io/name: zookeeper-1
    helm.sh/chart: zookeeper-5.14.3
    app.kubernetes.io/instance: kafka-observables
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper-1
    role: zookeeper
    greymatter.io/control: zookeeper-1
spec:
  serviceName: kafka-observables-zookeeper-1
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper-1
      app.kubernetes.io/instance: kafka-observables
      app.kubernetes.io/component: zookeeper-1
  template:
    metadata:
      name: kafka-observables-zookeeper
      labels:
        app.kubernetes.io/name: zookeeper-1
        helm.sh/chart: zookeeper-5.14.3
        app.kubernetes.io/instance: kafka-observables
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zookeeper-1
    spec:
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/minideb:buster
          imagePullPolicy: "Always"
          command: ["chown", "-R", "1001:1001", "/bitnami/zookeeper"]
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/zookeeper

      containers:
        - name: sidecar
          image: "docker.greymatter.io/development/gm-proxy:1.6.0-dev"
          imagePullPolicy: "Always"
          args:
            - -c
            - /etc/greymatter/config.yaml
          command:
            - /app/gm-proxy
          env:
            - name: PROXY_DYNAMIC
              value: "true"
            - name: SPIRE_PATH
              value: "/run/spire/socket/agent.sock"
            - name: XDS_CLUSTER
              value: "zookeeper-1"
            - name: XDS_HOST
              value: "control.default.svc"
            - name: XDS_PORT
              value: "50000"
            - name: XDS_ZONE
              value: "zone-default-zone"
          ports:
          - containerPort: 2180
            protocol: TCP
            name: proxy
          - containerPort: 2889
            protocol: TCP
            name: follower
          - containerPort: 3889
            protocol: TCP
            name: election
          - containerPort: 8081
            protocol: TCP
            name: metrics
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: spire-socket
              mountPath: /run/spire/socket
              readOnly: false
            - name: sidecar-config
              mountPath: /etc/greymatter
              readOnly: true
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.6.1-debian-10-r7
          imagePullPolicy: "IfNotPresent"
          command:
            - bash
            - -ec
            - |
                # Execute entrypoint as usual after obtaining ZOO_SERVER_ID based on POD hostname
                HOSTNAME=`hostname -s`
                if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
                  ORD=${BASH_REMATCH[2]}
                else
                  echo "Failed to get index from hostname $HOST"
                  exit 1
                fi
                if [ ! -e "/bitnami/zookeeper/data/myid" ] ; then
                  export ZOO_SERVER_ID=2
                else
                  echo "2" > /bitnami/zookeeper/data/myid
                fi
                exec /entrypoint.sh /run.sh
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          env:
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "200"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: "srvr, mntr"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "3"
            - name: ZOO_SERVERS
              value: 127.0.0.1:2891:3891 0.0.0.0:2888:3888 127.0.0.1:2892:3892
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: "ERROR"
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "no"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:

            - name: client
              containerPort: 2181


            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            tcpSocket:

              port: client

            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            tcpSocket:

              port: client

            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: data
              mountPath: /bitnami/zookeeper
      imagePullSecrets:
        - name: docker.secret
      volumes:
        - name: sidecar-config
          configMap:
            name: zk1-sidecar
        - name: spire-socket
          hostPath:
            path: /run/spire/socket
            type: DirectoryOrCreate
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# zk sts 2
# Source: kafka/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-observables-zookeeper-2
  namespace: kafka
  labels:
    app.kubernetes.io/name: zookeeper-2
    helm.sh/chart: zookeeper-5.14.3
    app.kubernetes.io/instance: kafka-observables
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper-2
    role: zookeeper
    greymatter.io/control: zookeeper-2
spec:
  serviceName: kafka-observables-zookeeper-2
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper-2
      app.kubernetes.io/instance: kafka-observables
      app.kubernetes.io/component: zookeeper-2
  template:
    metadata:
      name: kafka-observables-zookeeper
      labels:
        app.kubernetes.io/name: zookeeper-2
        helm.sh/chart: zookeeper-5.14.3
        app.kubernetes.io/instance: kafka-observables
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zookeeper-2
    spec:
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/minideb:buster
          imagePullPolicy: "Always"
          command: ["chown", "-R", "1001:1001", "/bitnami/zookeeper"]
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/zookeeper

      containers:
        - name: sidecar
          image: "docker.greymatter.io/development/gm-proxy:1.6.0-dev"
          imagePullPolicy: "Always"
          args:
            - -c
            - /etc/greymatter/config.yaml
          command:
            - /app/gm-proxy
          env:
            - name: PROXY_DYNAMIC
              value: "true"
            - name: SPIRE_PATH
              value: "/run/spire/socket/agent.sock"
            - name: XDS_CLUSTER
              value: "zookeeper-2"
            - name: XDS_HOST
              value: "control.default.svc"
            - name: XDS_PORT
              value: "50000"
            - name: XDS_ZONE
              value: "zone-default-zone"
          ports:
          - containerPort: 2180
            protocol: TCP
            name: proxy
          - containerPort: 2889
            protocol: TCP
            name: follower
          - containerPort: 3889
            protocol: TCP
            name: election
          - containerPort: 8081
            protocol: TCP
            name: metrics
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: spire-socket
              mountPath: /run/spire/socket
              readOnly: false
            - name: sidecar-config
              mountPath: /etc/greymatter
              readOnly: true
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.6.1-debian-10-r7
          imagePullPolicy: "IfNotPresent"
          command:
            - bash
            - -ec
            - |
                # Execute entrypoint as usual after obtaining ZOO_SERVER_ID based on POD hostname
                HOSTNAME=`hostname -s`
                if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
                  ORD=${BASH_REMATCH[2]}
                else
                  echo "Failed to get index from hostname $HOST"
                  exit 1
                fi
                if [ ! -e "/bitnami/zookeeper/data/myid" ] ; then
                  export ZOO_SERVER_ID=3
                else
                  echo "3" > /bitnami/zookeeper/data/myid
                fi
                exec /entrypoint.sh /run.sh
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          env:
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "200"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: "srvr, mntr"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "3"
            - name: ZOO_SERVERS
              value: 127.0.0.1:2891:3891 127.0.0.1:2892:3892 0.0.0.0:2888:3888
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: "ERROR"
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "no"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:

            - name: client
              containerPort: 2181


            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            tcpSocket:

              port: client

            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            tcpSocket:

              port: client

            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: data
              mountPath: /bitnami/zookeeper
      imagePullSecrets:
        - name: docker.secret
      volumes:
        - name: sidecar-config
          configMap:
            name: zk2-sidecar
        - name: spire-socket
          hostPath:
            path: /run/spire/socket
            type: DirectoryOrCreate
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: kafka/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-observables-0
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-10.3.3
    app.kubernetes.io/instance: kafka-observables-0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
    greymatter.io/control: kafka-broker-0
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/instance: kafka-observables-0
      app.kubernetes.io/component: kafka
      greymatter.io/control: kafka-broker-0
  serviceName: kafka-broker-0
  updateStrategy:
    type: "RollingUpdate"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafka
        helm.sh/chart: kafka-10.3.3
        app.kubernetes.io/instance: kafka-observables-0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: kafka
        greymatter.io/control: kafka-broker-0
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/minideb:buster
          imagePullPolicy: "Always"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              mkdir -p /bitnami/kafka
              chown -R "1001:1001" "/bitnami/kafka"
          securityContext:
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
      containers:
        - name: sidecar
          image: "docker.greymatter.io/development/gm-proxy:1.6.0-dev"
          imagePullPolicy: "Always"
          args:
            - -c
            - /etc/greymatter/config.yaml
          command:
            - /app/gm-proxy
          env:
            - name: PROXY_DYNAMIC
              value: "true"
            - name: SPIRE_PATH
              value: "/run/spire/socket/agent.sock"
            - name: XDS_CLUSTER
              value: "kafka-broker-0"
            - name: XDS_HOST
              value: "control.default.svc"
            - name: XDS_PORT
              value: "50000"
            - name: XDS_ZONE
              value: "zone-default-zone"
          ports:
          - containerPort: 9092
            protocol: TCP
            name: proxy
          - containerPort: 8081
            protocol: TCP
            name: metrics
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: spire-socket
              mountPath: /run/spire/socket
              readOnly: false
            - name: sidecar-config
              mountPath: /etc/greymatter
              readOnly: true
        - name: kafka
          image: docker.io/bitnami/kafka:2.7.0-debian-10-r1
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "kafka-observables-zookeeper-0:2180,kafka-observables-zookeeper-1:2180,kafka-observables-zookeeper-2:2180"
            - name: KAFKA_PORT_NUMBER
              value: "8092"
            - name: KAFKA_CFG_LISTENERS
              value: "PLAINTEXT://:$(KAFKA_PORT_NUMBER)"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "PLAINTEXT://:9092"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_CFG_BROKER_ID
              value: "0"
            - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
              value: "false"
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx1024m -Xms1024m"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
              value: "10000"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
              value: "1000"
            - name: KAFKA_CFG_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVALS_MS
              value: "300000"
            - name: KAFKA_CFG_LOG_RETENTION_HOURS
              value: "168"
            - name: KAFKA_CFG_MESSAGE_MAX_BYTES
              value: "1000012"
            - name: KAFKA_CFG_LOG_SEGMENT_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_DIRS
              value: "/bitnami/kafka/data"
            - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
              value: "https"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_CFG_NUM_IO_THREADS
              value: "8"
            - name: KAFKA_CFG_NUM_NETWORK_THREADS
              value: "3"
            - name: KAFKA_CFG_NUM_PARTITIONS
              value: "1"
            - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
              value: "1"
            - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
              value: "104857600"
            - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: "36000"
          ports:
            - name: kafka
              containerPort: 8092
          livenessProbe:
            failureThreshold: 2
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: kafka
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: kafka
            timeoutSeconds: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
      imagePullSecrets:
        - name: docker.secret
      volumes:
        - name: spire-socket
          hostPath:
            path: /run/spire/socket
            type: DirectoryOrCreate
        - name: sidecar-config
          configMap:
            name: kafka-broker-sidecar-0
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: kafka/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-observables-1
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-10.3.3
    app.kubernetes.io/instance: kafka-observables-1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
    greymatter.io/control: kafka-broker-1
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/instance: kafka-observables-1
      app.kubernetes.io/component: kafka
      greymatter.io/control: kafka-broker-1
  serviceName: kafka-broker-1
  updateStrategy:
    type: "RollingUpdate"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafka
        helm.sh/chart: kafka-10.3.3
        app.kubernetes.io/instance: kafka-observables-1
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: kafka
        greymatter.io/control: kafka-broker-1
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/minideb:buster
          imagePullPolicy: "Always"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              mkdir -p /bitnami/kafka
              chown -R "1001:1001" "/bitnami/kafka"
          securityContext:
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
      containers:
        - name: sidecar
          image: "docker.greymatter.io/development/gm-proxy:1.6.0-dev"
          imagePullPolicy: "Always"
          args:
            - -c
            - /etc/greymatter/config.yaml
          command:
            - /app/gm-proxy
          env:
            - name: PROXY_DYNAMIC
              value: "true"
            - name: SPIRE_PATH
              value: "/run/spire/socket/agent.sock"
            - name: XDS_CLUSTER
              value: "kafka-broker-1"
            - name: XDS_HOST
              value: "control.default.svc"
            - name: XDS_PORT
              value: "50000"
            - name: XDS_ZONE
              value: "zone-default-zone"
          ports:
          - containerPort: 9093
            protocol: TCP
            name: proxy
          - containerPort: 8081
            protocol: TCP
            name: metrics
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: spire-socket
              mountPath: /run/spire/socket
              readOnly: false
            - name: sidecar-config
              mountPath: /etc/greymatter
              readOnly: true
        - name: kafka
          image: docker.io/bitnami/kafka:2.7.0-debian-10-r1
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "kafka-observables-zookeeper-0:2180,kafka-observables-zookeeper-1:2180,kafka-observables-zookeeper-2:2180"
            - name: KAFKA_PORT_NUMBER
              value: "8092"
            - name: KAFKA_CFG_LISTENERS
              value: "PLAINTEXT://:$(KAFKA_PORT_NUMBER)"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "PLAINTEXT://:9093"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_CFG_BROKER_ID
              value: "1"
            - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
              value: "false"
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx1024m -Xms1024m"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
              value: "10000"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
              value: "1000"
            - name: KAFKA_CFG_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVALS_MS
              value: "300000"
            - name: KAFKA_CFG_LOG_RETENTION_HOURS
              value: "168"
            - name: KAFKA_CFG_MESSAGE_MAX_BYTES
              value: "1000012"
            - name: KAFKA_CFG_LOG_SEGMENT_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_DIRS
              value: "/bitnami/kafka/data"
            - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
              value: "https"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_CFG_NUM_IO_THREADS
              value: "8"
            - name: KAFKA_CFG_NUM_NETWORK_THREADS
              value: "3"
            - name: KAFKA_CFG_NUM_PARTITIONS
              value: "1"
            - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
              value: "1"
            - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
              value: "104857600"
            - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: "36000"
          ports:
            - name: kafka
              containerPort: 8092
          livenessProbe:
            failureThreshold: 2
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: kafka
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: kafka
            timeoutSeconds: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
      imagePullSecrets:
        - name: docker.secret
      volumes:
        - name: spire-socket
          hostPath:
            path: /run/spire/socket
            type: DirectoryOrCreate
        - name: sidecar-config
          configMap:
            name: kafka-broker-sidecar-1
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: kafka/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-observables-2
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-10.3.3
    app.kubernetes.io/instance: kafka-observables-2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
    greymatter.io/control: kafka-broker-2
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/instance: kafka-observables-2
      app.kubernetes.io/component: kafka
      greymatter.io/control: kafka-broker-2
  serviceName: kafka-broker-2
  updateStrategy:
    type: "RollingUpdate"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafka
        helm.sh/chart: kafka-10.3.3
        app.kubernetes.io/instance: kafka-observables-2
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: kafka
        greymatter.io/control: kafka-broker-2
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/minideb:buster
          imagePullPolicy: "Always"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              mkdir -p /bitnami/kafka
              chown -R "1001:1001" "/bitnami/kafka"
          securityContext:
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
      containers:
        - name: sidecar
          image: "docker.greymatter.io/development/gm-proxy:1.6.0-dev"
          imagePullPolicy: "Always"
          args:
            - -c
            - /etc/greymatter/config.yaml
          command:
            - /app/gm-proxy
          env:
            - name: PROXY_DYNAMIC
              value: "true"
            - name: SPIRE_PATH
              value: "/run/spire/socket/agent.sock"
            - name: XDS_CLUSTER
              value: "kafka-broker-2"
            - name: XDS_HOST
              value: "control.default.svc"
            - name: XDS_PORT
              value: "50000"
            - name: XDS_ZONE
              value: "zone-default-zone"
          ports:
          - containerPort: 9094
            protocol: TCP
            name: proxy
          - containerPort: 8081
            protocol: TCP
            name: metrics
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: spire-socket
              mountPath: /run/spire/socket
              readOnly: false
            - name: sidecar-config
              mountPath: /etc/greymatter
              readOnly: true
        - name: kafka
          image: docker.io/bitnami/kafka:2.7.0-debian-10-r1
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "kafka-observables-zookeeper-0:2180,kafka-observables-zookeeper-1:2180,kafka-observables-zookeeper-2:2180"
            - name: KAFKA_PORT_NUMBER
              value: "8092"
            - name: KAFKA_CFG_LISTENERS
              value: "PLAINTEXT://:$(KAFKA_PORT_NUMBER)"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "PLAINTEXT://:9094"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_CFG_BROKER_ID
              value: "2"
            - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
              value: "false"
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx1024m -Xms1024m"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
              value: "10000"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
              value: "1000"
            - name: KAFKA_CFG_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVALS_MS
              value: "300000"
            - name: KAFKA_CFG_LOG_RETENTION_HOURS
              value: "168"
            - name: KAFKA_CFG_MESSAGE_MAX_BYTES
              value: "1000012"
            - name: KAFKA_CFG_LOG_SEGMENT_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_DIRS
              value: "/bitnami/kafka/data"
            - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
              value: "https"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_CFG_NUM_IO_THREADS
              value: "8"
            - name: KAFKA_CFG_NUM_NETWORK_THREADS
              value: "3"
            - name: KAFKA_CFG_NUM_PARTITIONS
              value: "1"
            - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
              value: "1"
            - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
              value: "104857600"
            - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: "36000"
          ports:
            - name: kafka
              containerPort: 8092
          livenessProbe:
            failureThreshold: 2
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: kafka
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: kafka
            timeoutSeconds: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
      imagePullSecrets:
        - name: docker.secret
      volumes:
        - name: spire-socket
          hostPath:
            path: /run/spire/socket
            type: DirectoryOrCreate
        - name: sidecar-config
          configMap:
            name: kafka-broker-sidecar-2
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"